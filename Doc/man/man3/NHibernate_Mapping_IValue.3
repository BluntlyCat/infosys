.TH "NHibernate.Mapping.IValue" 3 "Fri Jul 5 2013" "Version 1.0" "HSA.InfoSys" \" -*- nroff -*-
.ad l
.nh
.SH NAME
NHibernate.Mapping.IValue \- 
.PP
A value is anything that is persisted by value, instead of by reference\&. It is essentially a Hibernate IType, together with zero or more columns\&. Values are wrapped by things with higher level semantics, for example properties, collections, classes\&.  

.SH SYNOPSIS
.br
.PP
.PP
Inherited by \fBNHibernate\&.Mapping\&.Collection\fP, \fBNHibernate\&.Mapping\&.IKeyValue\fP, and \fBNHibernate\&.Mapping\&.OneToMany\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBCreateForeignKey\fP ()"
.br
.ti -1c
.RI "bool \fBIsValid\fP (\fBIMapping\fP mapping)"
.br
.RI "\fIDetermines if the Value is part of a valid mapping\&. \fP"
.ti -1c
.RI "void \fBSetTypeUsingReflection\fP (string className, string propertyName, string accesorName)"
.br
.ti -1c
.RI "object \fBAccept\fP (\fBIValueVisitor\fP visitor)"
.br
.in -1c
.SS "Properties"

.in +1c
.ti -1c
.RI "int \fBColumnSpan\fP\fC [get]\fP"
.br
.RI "\fIGets the number of columns that this value spans in the table\&. \fP"
.ti -1c
.RI "IEnumerable< \fBISelectable\fP > \fBColumnIterator\fP\fC [get]\fP"
.br
.RI "\fIGets an IEnumerable{ISelectable} of \fBColumn\fP objects that this value is stored in\&. \fP"
.ti -1c
.RI "\fBIType\fP \fBType\fP\fC [get]\fP"
.br
.RI "\fIGets the IType to read/write the Values\&. \fP"
.ti -1c
.RI "\fBTable\fP \fBTable\fP\fC [get]\fP"
.br
.RI "\fIGets the \fBTable\fP this Value is stored in\&. \fP"
.ti -1c
.RI "bool \fBHasFormula\fP\fC [get]\fP"
.br
.ti -1c
.RI "bool \fBIsAlternateUniqueKey\fP\fC [get]\fP"
.br
.RI "\fIGets a bool indicating if this Value is unique\&. \fP"
.ti -1c
.RI "bool \fBIsNullable\fP\fC [get]\fP"
.br
.RI "\fIGets a bool indicating if this Value can have null values\&. \fP"
.ti -1c
.RI "bool[] \fBColumnUpdateability\fP\fC [get]\fP"
.br
.ti -1c
.RI "bool[] \fBColumnInsertability\fP\fC [get]\fP"
.br
.ti -1c
.RI "bool \fBIsSimpleValue\fP\fC [get]\fP"
.br
.RI "\fIGets a bool indicating if this is a \fBSimpleValue\fP that does not involve foreign keys\&. \fP"
.ti -1c
.RI "\fBFetchMode\fP \fBFetchMode\fP\fC [get]\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
A value is anything that is persisted by value, instead of by reference\&. It is essentially a Hibernate IType, together with zero or more columns\&. Values are wrapped by things with higher level semantics, for example properties, collections, classes\&. 


.PP
Definition at line 14 of file IValue\&.cs\&.
.SH "Member Function Documentation"
.PP 
.SS "void NHibernate\&.Mapping\&.IValue\&.CreateForeignKey ()"

.PP

.PP
Implemented in \fBNHibernate\&.Mapping\&.Collection\fP, \fBNHibernate\&.Mapping\&.SimpleValue\fP, \fBNHibernate\&.Mapping\&.OneToMany\fP, \fBNHibernate\&.Mapping\&.ToOne\fP, \fBNHibernate\&.Mapping\&.OneToOne\fP, and \fBNHibernate\&.Mapping\&.ManyToOne\fP\&.
.SS "bool NHibernate\&.Mapping\&.IValue\&.IsValid (\fBIMapping\fPmapping)"

.PP
Determines if the Value is part of a valid mapping\&. 
.PP
\fBParameters:\fP
.RS 4
\fImapping\fP The IMapping to validate\&.
.RE
.PP
\fBReturns:\fP
.RS 4
if the Value is part of a valid mapping,  otherwise\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBMappingException\fP\fP 
.RE
.PP
.PP
Mainly used to make sure that Value maps to the correct number of columns\&. 
.PP
Implemented in \fBNHibernate\&.Mapping\&.Collection\fP, \fBNHibernate\&.Mapping\&.SimpleValue\fP, and \fBNHibernate\&.Mapping\&.OneToMany\fP\&.
.SH "Property Documentation"
.PP 
.SS "IEnumerable<\fBISelectable\fP> NHibernate\&.Mapping\&.IValue\&.ColumnIterator\fC [get]\fP"

.PP
Gets an IEnumerable{ISelectable} of \fBColumn\fP objects that this value is stored in\&. 
.PP
Definition at line 25 of file IValue\&.cs\&.
.SS "int NHibernate\&.Mapping\&.IValue\&.ColumnSpan\fC [get]\fP"

.PP
Gets the number of columns that this value spans in the table\&. 
.PP
Definition at line 19 of file IValue\&.cs\&.
.SS "bool NHibernate\&.Mapping\&.IValue\&.IsAlternateUniqueKey\fC [get]\fP"

.PP
Gets a bool indicating if this Value is unique\&. 
.PP
Definition at line 42 of file IValue\&.cs\&.
.SS "bool NHibernate\&.Mapping\&.IValue\&.IsNullable\fC [get]\fP"

.PP
Gets a bool indicating if this Value can have null values\&. 
.PP
Definition at line 48 of file IValue\&.cs\&.
.SS "bool NHibernate\&.Mapping\&.IValue\&.IsSimpleValue\fC [get]\fP"

.PP
Gets a bool indicating if this is a \fBSimpleValue\fP that does not involve foreign keys\&. 
.PP
Definition at line 57 of file IValue\&.cs\&.
.SS "\fBTable\fP NHibernate\&.Mapping\&.IValue\&.Table\fC [get]\fP"

.PP
Gets the \fBTable\fP this Value is stored in\&. 
.PP
Definition at line 35 of file IValue\&.cs\&.
.SS "\fBIType\fP NHibernate\&.Mapping\&.IValue\&.Type\fC [get]\fP"

.PP
Gets the IType to read/write the Values\&. 
.PP
Definition at line 30 of file IValue\&.cs\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for HSA\&.InfoSys from the source code\&.
