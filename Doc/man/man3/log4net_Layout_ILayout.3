.TH "log4net.Layout.ILayout" 3 "Fri Jul 5 2013" "Version 1.0" "HSA.InfoSys" \" -*- nroff -*-
.ad l
.nh
.SH NAME
log4net.Layout.ILayout \- 
.PP
Interface implemented by layout objects  

.SH SYNOPSIS
.br
.PP
.PP
Inherited by \fBlog4net\&.Layout\&.LayoutSkeleton\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBFormat\fP (TextWriter writer, \fBLoggingEvent\fP loggingEvent)"
.br
.RI "\fIImplement this method to create your own layout format\&. \fP"
.in -1c
.SS "Properties"

.in +1c
.ti -1c
.RI "string \fBContentType\fP\fC [get]\fP"
.br
.RI "\fIThe content type output by this layout\&. \fP"
.ti -1c
.RI "string \fBHeader\fP\fC [get]\fP"
.br
.RI "\fIThe header for the layout format\&. \fP"
.ti -1c
.RI "string \fBFooter\fP\fC [get]\fP"
.br
.RI "\fIThe footer for the layout format\&. \fP"
.ti -1c
.RI "bool \fBIgnoresException\fP\fC [get]\fP"
.br
.RI "\fIFlag indicating if this layout handle exceptions \fP"
.in -1c
.SH "Detailed Description"
.PP 
Interface implemented by layout objects 

An \fBILayout\fP object is used to format a LoggingEvent as text\&. The \fBFormat(TextWriter,LoggingEvent)\fP method is called by an appender to transform the LoggingEvent into a string\&. 
.PP
The layout can also supply \fBHeader\fP and \fBFooter\fP text that is appender before any events and after all the events respectively\&. 
.PP
<author>Nicko Cadell</author> <author>Gert Driesen</author> 
.PP
Definition at line 44 of file ILayout\&.cs\&.
.SH "Member Function Documentation"
.PP 
.SS "void log4net\&.Layout\&.ILayout\&.Format (TextWriterwriter, \fBLoggingEvent\fPloggingEvent)"

.PP
Implement this method to create your own layout format\&. 
.PP
\fBParameters:\fP
.RS 4
\fIwriter\fP The TextWriter to write the formatted event to
.br
\fIloggingEvent\fP The event to format
.RE
.PP
.PP
This method is called by an appender to format the \fIloggingEvent\fP  as text and output to a writer\&. 
.PP
If the caller does not have a TextWriter and prefers the event to be formatted as a String then the following code can be used to format the event into a StringWriter\&. 
.PP
.PP
.nf
StringWriter writer = new StringWriter();
Layout\&.Format(writer, loggingEvent);
string formattedEvent = writer\&.ToString();
.fi
.PP
 
.PP
Implemented in \fBlog4net\&.Layout\&.PatternLayout\fP, \fBlog4net\&.Layout\&.XmlLayoutBase\fP, \fBlog4net\&.Layout\&.LayoutSkeleton\fP, \fBlog4net\&.Layout\&.ExceptionLayout\fP, and \fBlog4net\&.Layout\&.SimpleLayout\fP\&.
.SH "Property Documentation"
.PP 
.SS "string log4net\&.Layout\&.ILayout\&.ContentType\fC [get]\fP"

.PP
The content type output by this layout\&. The content type
.PP
The content type output by this layout\&. 
.PP
This is a MIME type e\&.g\&. \fC'text/plain'\fP\&. 
.PP
Definition at line 81 of file ILayout\&.cs\&.
.SS "string log4net\&.Layout\&.ILayout\&.Footer\fC [get]\fP"

.PP
The footer for the layout format\&. the layout footer
.PP
The Footer text will be appended after all the logging events have been formatted and appended\&. 
.PP
Definition at line 105 of file ILayout\&.cs\&.
.SS "string log4net\&.Layout\&.ILayout\&.Header\fC [get]\fP"

.PP
The header for the layout format\&. the layout header
.PP
The Header text will be appended before any logging events are formatted and appended\&. 
.PP
Definition at line 93 of file ILayout\&.cs\&.
.SS "bool log4net\&.Layout\&.ILayout\&.IgnoresException\fC [get]\fP"

.PP
Flag indicating if this layout handle exceptions \fCfalse\fP if this layout handles exceptions
.PP
If this layout handles the exception object contained within LoggingEvent, then the layout should return \fCfalse\fP\&. Otherwise, if the layout ignores the exception object, then the layout should return \fCtrue\fP\&. 
.PP
Definition at line 119 of file ILayout\&.cs\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for HSA\&.InfoSys from the source code\&.
