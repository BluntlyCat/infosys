.TH "log4net.ILog" 3 "Fri Jul 5 2013" "Version 1.0" "HSA.InfoSys" \" -*- nroff -*-
.ad l
.nh
.SH NAME
log4net.ILog \- 
.PP
The \fBILog\fP interface is use by application to log messages into the \fBlog4net\fP framework\&.  

.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBlog4net\&.Core\&.ILoggerWrapper\fP\&.
.PP
Inherited by \fBlog4net\&.Core\&.LogImpl\fP, \fBlog4net\&.Ext\&.EventID\&.IEventIDLog\fP, \fBlog4net\&.Ext\&.MarshalByRef\&.MarshalByRefLogImpl\fP, \fBlog4net\&.Ext\&.Trace\&.ITraceLog\fP, and NHibernate\&.Test\&.Logging\&.Log4NetLoggerTest\&.LogMock\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBDebug\fP (object message)"
.br
.RI "\fILog a message object with the Level\&.Debug level\&. \fP"
.ti -1c
.RI "void \fBDebug\fP (object message, Exception exception)"
.br
.RI "\fILog a message object with the Level\&.Debug level including the stack trace of the Exception passed as a parameter\&. \fP"
.ti -1c
.RI "void \fBDebugFormat\fP (string format, params object[] args)"
.br
.RI "\fILogs a formatted message string with the Level\&.Debug level\&. \fP"
.ti -1c
.RI "void \fBDebugFormat\fP (string format, object arg0)"
.br
.RI "\fILogs a formatted message string with the Level\&.Debug level\&. \fP"
.ti -1c
.RI "void \fBDebugFormat\fP (string format, object arg0, object arg1)"
.br
.RI "\fILogs a formatted message string with the Level\&.Debug level\&. \fP"
.ti -1c
.RI "void \fBDebugFormat\fP (string format, object arg0, object arg1, object arg2)"
.br
.RI "\fILogs a formatted message string with the Level\&.Debug level\&. \fP"
.ti -1c
.RI "void \fBDebugFormat\fP (IFormatProvider provider, string format, params object[] args)"
.br
.RI "\fILogs a formatted message string with the Level\&.Debug level\&. \fP"
.ti -1c
.RI "void \fBInfo\fP (object message)"
.br
.RI "\fILogs a message object with the Level\&.Info level\&. \fP"
.ti -1c
.RI "void \fBInfo\fP (object message, Exception exception)"
.br
.RI "\fILogs a message object with the \fCINFO\fP level including the stack trace of the Exception passed as a parameter\&. \fP"
.ti -1c
.RI "void \fBInfoFormat\fP (string format, params object[] args)"
.br
.RI "\fILogs a formatted message string with the Level\&.Info level\&. \fP"
.ti -1c
.RI "void \fBInfoFormat\fP (string format, object arg0)"
.br
.RI "\fILogs a formatted message string with the Level\&.Info level\&. \fP"
.ti -1c
.RI "void \fBInfoFormat\fP (string format, object arg0, object arg1)"
.br
.RI "\fILogs a formatted message string with the Level\&.Info level\&. \fP"
.ti -1c
.RI "void \fBInfoFormat\fP (string format, object arg0, object arg1, object arg2)"
.br
.RI "\fILogs a formatted message string with the Level\&.Info level\&. \fP"
.ti -1c
.RI "void \fBInfoFormat\fP (IFormatProvider provider, string format, params object[] args)"
.br
.RI "\fILogs a formatted message string with the Level\&.Info level\&. \fP"
.ti -1c
.RI "void \fBWarn\fP (object message)"
.br
.RI "\fILog a message object with the Level\&.Warn level\&. \fP"
.ti -1c
.RI "void \fBWarn\fP (object message, Exception exception)"
.br
.RI "\fILog a message object with the Level\&.Warn level including the stack trace of the Exception passed as a parameter\&. \fP"
.ti -1c
.RI "void \fBWarnFormat\fP (string format, params object[] args)"
.br
.RI "\fILogs a formatted message string with the Level\&.Warn level\&. \fP"
.ti -1c
.RI "void \fBWarnFormat\fP (string format, object arg0)"
.br
.RI "\fILogs a formatted message string with the Level\&.Warn level\&. \fP"
.ti -1c
.RI "void \fBWarnFormat\fP (string format, object arg0, object arg1)"
.br
.RI "\fILogs a formatted message string with the Level\&.Warn level\&. \fP"
.ti -1c
.RI "void \fBWarnFormat\fP (string format, object arg0, object arg1, object arg2)"
.br
.RI "\fILogs a formatted message string with the Level\&.Warn level\&. \fP"
.ti -1c
.RI "void \fBWarnFormat\fP (IFormatProvider provider, string format, params object[] args)"
.br
.RI "\fILogs a formatted message string with the Level\&.Warn level\&. \fP"
.ti -1c
.RI "void \fBError\fP (object message)"
.br
.RI "\fILogs a message object with the Level\&.Error level\&. \fP"
.ti -1c
.RI "void \fBError\fP (object message, Exception exception)"
.br
.RI "\fILog a message object with the Level\&.Error level including the stack trace of the Exception passed as a parameter\&. \fP"
.ti -1c
.RI "void \fBErrorFormat\fP (string format, params object[] args)"
.br
.RI "\fILogs a formatted message string with the Level\&.Error level\&. \fP"
.ti -1c
.RI "void \fBErrorFormat\fP (string format, object arg0)"
.br
.RI "\fILogs a formatted message string with the Level\&.Error level\&. \fP"
.ti -1c
.RI "void \fBErrorFormat\fP (string format, object arg0, object arg1)"
.br
.RI "\fILogs a formatted message string with the Level\&.Error level\&. \fP"
.ti -1c
.RI "void \fBErrorFormat\fP (string format, object arg0, object arg1, object arg2)"
.br
.RI "\fILogs a formatted message string with the Level\&.Error level\&. \fP"
.ti -1c
.RI "void \fBErrorFormat\fP (IFormatProvider provider, string format, params object[] args)"
.br
.RI "\fILogs a formatted message string with the Level\&.Error level\&. \fP"
.ti -1c
.RI "void \fBFatal\fP (object message)"
.br
.RI "\fILog a message object with the Level\&.Fatal level\&. \fP"
.ti -1c
.RI "void \fBFatal\fP (object message, Exception exception)"
.br
.RI "\fILog a message object with the Level\&.Fatal level including the stack trace of the Exception passed as a parameter\&. \fP"
.ti -1c
.RI "void \fBFatalFormat\fP (string format, params object[] args)"
.br
.RI "\fILogs a formatted message string with the Level\&.Fatal level\&. \fP"
.ti -1c
.RI "void \fBFatalFormat\fP (string format, object arg0)"
.br
.RI "\fILogs a formatted message string with the Level\&.Fatal level\&. \fP"
.ti -1c
.RI "void \fBFatalFormat\fP (string format, object arg0, object arg1)"
.br
.RI "\fILogs a formatted message string with the Level\&.Fatal level\&. \fP"
.ti -1c
.RI "void \fBFatalFormat\fP (string format, object arg0, object arg1, object arg2)"
.br
.RI "\fILogs a formatted message string with the Level\&.Fatal level\&. \fP"
.ti -1c
.RI "void \fBFatalFormat\fP (IFormatProvider provider, string format, params object[] args)"
.br
.RI "\fILogs a formatted message string with the Level\&.Fatal level\&. \fP"
.in -1c
.SS "Properties"

.in +1c
.ti -1c
.RI "bool \fBIsDebugEnabled\fP\fC [get]\fP"
.br
.RI "\fIChecks if this logger is enabled for the Level\&.Debug level\&. \fP"
.ti -1c
.RI "bool \fBIsInfoEnabled\fP\fC [get]\fP"
.br
.RI "\fIChecks if this logger is enabled for the Level\&.Info level\&. \fP"
.ti -1c
.RI "bool \fBIsWarnEnabled\fP\fC [get]\fP"
.br
.RI "\fIChecks if this logger is enabled for the Level\&.Warn level\&. \fP"
.ti -1c
.RI "bool \fBIsErrorEnabled\fP\fC [get]\fP"
.br
.RI "\fIChecks if this logger is enabled for the Level\&.Error level\&. \fP"
.ti -1c
.RI "bool \fBIsFatalEnabled\fP\fC [get]\fP"
.br
.RI "\fIChecks if this logger is enabled for the Level\&.Fatal level\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
The \fBILog\fP interface is use by application to log messages into the \fBlog4net\fP framework\&. 

Use the \fBLogManager\fP to obtain logger instances that implement this interface\&. The \fBLogManager\&.GetLogger(Assembly,Type)\fP static method is used to get logger instances\&. 
.PP
This class contains methods for logging at different levels and also has properties for determining if those logging levels are enabled in the current configuration\&. 
.PP
This interface can be implemented in different ways\&. This documentation specifies reasonable behavior that a caller can expect from the actual implementation, however different implementations reserve the right to do things differently\&. 
.PP
Simple example of logging messages 
.PP
.nf
ILog log = LogManager\&.GetLogger("application-log");

log\&.Info("Application Start");
log\&.Debug("This is a debug message");

if (log\&.IsDebugEnabled)
{
    log\&.Debug("This is another debug message");
}

.fi
.PP
 
.PP
\fBSee Also:\fP
.RS 4
\fBLogManager\fP, \fBLogManager\&.GetLogger(Assembly, Type)\fP
.PP
.RE
.PP
<author>Nicko Cadell</author> <author>Gert Driesen</author> 
.PP
Definition at line 66 of file ILog\&.cs\&.
.SH "Member Function Documentation"
.PP 
.SS "void log4net\&.ILog\&.Debug (objectmessage)"

.PP
Log a message object with the Level\&.Debug level\&. <overloads>Log a message object with the Level\&.Debug level\&.</overloads>
.PP
\fBParameters:\fP
.RS 4
\fImessage\fP The message object to log\&.
.RE
.PP
.PP
This method first checks if this logger is \fCDEBUG\fP enabled by comparing the level of this logger with the Level\&.Debug level\&. If this logger is \fCDEBUG\fP enabled, then it converts the message object (passed as parameter) to a string by invoking the appropriate \fBlog4net\&.ObjectRenderer\&.IObjectRenderer\fP\&. It then proceeds to call all the registered appenders in this logger and also higher in the hierarchy depending on the value of the additivity flag\&. 
.PP
\fBWARNING\fP Note that passing an Exception to this method will print the name of the Exception but no stack trace\&. To print a stack trace use the \fBDebug(object,Exception)\fP form instead\&. 
.PP
\fBSee Also:\fP
.RS 4
\fBDebug(object,Exception)\fP, \fBIsDebugEnabled\fP
.PP
.RE
.PP

.PP
Implemented in \fBlog4net\&.Core\&.LogImpl\fP, and \fBlog4net\&.Ext\&.MarshalByRef\&.MarshalByRefLogImpl\fP\&.
.SS "void log4net\&.ILog\&.Debug (objectmessage, Exceptionexception)"

.PP
Log a message object with the Level\&.Debug level including the stack trace of the Exception passed as a parameter\&. 
.PP
\fBParameters:\fP
.RS 4
\fImessage\fP The message object to log\&.
.br
\fIexception\fP The exception to log, including its stack trace\&.
.RE
.PP
.PP
See the \fBDebug(object)\fP form for more detailed information\&. 
.PP
\fBSee Also:\fP
.RS 4
\fBDebug(object)\fP, \fBIsDebugEnabled\fP
.PP
.RE
.PP

.PP
Implemented in \fBlog4net\&.Core\&.LogImpl\fP, and \fBlog4net\&.Ext\&.MarshalByRef\&.MarshalByRefLogImpl\fP\&.
.SS "void log4net\&.ILog\&.DebugFormat (stringformat, params object[]args)"

.PP
Logs a formatted message string with the Level\&.Debug level\&. <overloads>Log a formatted string with the Level\&.Debug level\&.</overloads>
.PP
\fBParameters:\fP
.RS 4
\fIformat\fP A String containing zero or more format items
.br
\fIargs\fP An Object array containing zero or more objects to format
.RE
.PP
.PP
The message is formatted using the \fCString\&.Format\fP method\&. See String\&.Format(string, object[]) for details of the syntax of the format string and the behavior of the formatting\&. 
.PP
This method does not take an Exception object to include in the log event\&. To pass an Exception use one of the \fBDebug(object,Exception)\fP methods instead\&. 
.PP
\fBSee Also:\fP
.RS 4
\fBDebug(object)\fP, \fBIsDebugEnabled\fP
.PP
.RE
.PP

.PP
Implemented in \fBlog4net\&.Core\&.LogImpl\fP, and \fBlog4net\&.Ext\&.MarshalByRef\&.MarshalByRefLogImpl\fP\&.
.SS "void log4net\&.ILog\&.DebugFormat (stringformat, objectarg0)"

.PP
Logs a formatted message string with the Level\&.Debug level\&. 
.PP
\fBParameters:\fP
.RS 4
\fIformat\fP A String containing zero or more format items
.br
\fIarg0\fP An Object to format
.RE
.PP
.PP
The message is formatted using the \fCString\&.Format\fP method\&. See String\&.Format(string, object[]) for details of the syntax of the format string and the behavior of the formatting\&. 
.PP
This method does not take an Exception object to include in the log event\&. To pass an Exception use one of the \fBDebug(object,Exception)\fP methods instead\&. 
.PP
\fBSee Also:\fP
.RS 4
\fBDebug(object)\fP, \fBIsDebugEnabled\fP
.PP
.RE
.PP

.PP
Implemented in \fBlog4net\&.Core\&.LogImpl\fP, and \fBlog4net\&.Ext\&.MarshalByRef\&.MarshalByRefLogImpl\fP\&.
.SS "void log4net\&.ILog\&.DebugFormat (stringformat, objectarg0, objectarg1)"

.PP
Logs a formatted message string with the Level\&.Debug level\&. 
.PP
\fBParameters:\fP
.RS 4
\fIformat\fP A String containing zero or more format items
.br
\fIarg0\fP An Object to format
.br
\fIarg1\fP An Object to format
.RE
.PP
.PP
The message is formatted using the \fCString\&.Format\fP method\&. See String\&.Format(string, object[]) for details of the syntax of the format string and the behavior of the formatting\&. 
.PP
This method does not take an Exception object to include in the log event\&. To pass an Exception use one of the \fBDebug(object,Exception)\fP methods instead\&. 
.PP
\fBSee Also:\fP
.RS 4
\fBDebug(object)\fP, \fBIsDebugEnabled\fP
.PP
.RE
.PP

.PP
Implemented in \fBlog4net\&.Core\&.LogImpl\fP, and \fBlog4net\&.Ext\&.MarshalByRef\&.MarshalByRefLogImpl\fP\&.
.SS "void log4net\&.ILog\&.DebugFormat (stringformat, objectarg0, objectarg1, objectarg2)"

.PP
Logs a formatted message string with the Level\&.Debug level\&. 
.PP
\fBParameters:\fP
.RS 4
\fIformat\fP A String containing zero or more format items
.br
\fIarg0\fP An Object to format
.br
\fIarg1\fP An Object to format
.br
\fIarg2\fP An Object to format
.RE
.PP
.PP
The message is formatted using the \fCString\&.Format\fP method\&. See String\&.Format(string, object[]) for details of the syntax of the format string and the behavior of the formatting\&. 
.PP
This method does not take an Exception object to include in the log event\&. To pass an Exception use one of the \fBDebug(object,Exception)\fP methods instead\&. 
.PP
\fBSee Also:\fP
.RS 4
\fBDebug(object)\fP, \fBIsDebugEnabled\fP
.PP
.RE
.PP

.PP
Implemented in \fBlog4net\&.Core\&.LogImpl\fP, and \fBlog4net\&.Ext\&.MarshalByRef\&.MarshalByRefLogImpl\fP\&.
.SS "void log4net\&.ILog\&.DebugFormat (IFormatProviderprovider, stringformat, params object[]args)"

.PP
Logs a formatted message string with the Level\&.Debug level\&. 
.PP
\fBParameters:\fP
.RS 4
\fIprovider\fP An IFormatProvider that supplies culture-specific formatting information
.br
\fIformat\fP A String containing zero or more format items
.br
\fIargs\fP An Object array containing zero or more objects to format
.RE
.PP
.PP
The message is formatted using the \fCString\&.Format\fP method\&. See String\&.Format(string, object[]) for details of the syntax of the format string and the behavior of the formatting\&. 
.PP
This method does not take an Exception object to include in the log event\&. To pass an Exception use one of the \fBDebug(object,Exception)\fP methods instead\&. 
.PP
\fBSee Also:\fP
.RS 4
\fBDebug(object)\fP, \fBIsDebugEnabled\fP
.PP
.RE
.PP

.PP
Implemented in \fBlog4net\&.Core\&.LogImpl\fP, and \fBlog4net\&.Ext\&.MarshalByRef\&.MarshalByRefLogImpl\fP\&.
.SS "void log4net\&.ILog\&.Error (objectmessage)"

.PP
Logs a message object with the Level\&.Error level\&. <overloads>Log a message object with the Level\&.Error level\&.</overloads>
.PP
\fBParameters:\fP
.RS 4
\fImessage\fP The message object to log\&.
.RE
.PP
.PP
This method first checks if this logger is \fCERROR\fP enabled by comparing the level of this logger with the Level\&.Error level\&. If this logger is \fCERROR\fP enabled, then it converts the message object (passed as parameter) to a string by invoking the appropriate \fBlog4net\&.ObjectRenderer\&.IObjectRenderer\fP\&. It then proceeds to call all the registered appenders in this logger and also higher in the hierarchy depending on the value of the additivity flag\&. 
.PP
\fBWARNING\fP Note that passing an Exception to this method will print the name of the Exception but no stack trace\&. To print a stack trace use the \fBError(object,Exception)\fP form instead\&. 
.PP
\fBSee Also:\fP
.RS 4
\fBError(object,Exception)\fP, \fBIsErrorEnabled\fP
.PP
.RE
.PP

.PP
Implemented in \fBlog4net\&.Core\&.LogImpl\fP, and \fBlog4net\&.Ext\&.MarshalByRef\&.MarshalByRefLogImpl\fP\&.
.SS "void log4net\&.ILog\&.Error (objectmessage, Exceptionexception)"

.PP
Log a message object with the Level\&.Error level including the stack trace of the Exception passed as a parameter\&. 
.PP
\fBParameters:\fP
.RS 4
\fImessage\fP The message object to log\&.
.br
\fIexception\fP The exception to log, including its stack trace\&.
.RE
.PP
.PP
See the \fBError(object)\fP form for more detailed information\&. 
.PP
\fBSee Also:\fP
.RS 4
\fBError(object)\fP, \fBIsErrorEnabled\fP
.PP
.RE
.PP

.PP
Implemented in \fBlog4net\&.Core\&.LogImpl\fP, and \fBlog4net\&.Ext\&.MarshalByRef\&.MarshalByRefLogImpl\fP\&.
.SS "void log4net\&.ILog\&.ErrorFormat (stringformat, params object[]args)"

.PP
Logs a formatted message string with the Level\&.Error level\&. <overloads>Log a formatted message string with the Level\&.Error level\&.</overloads>
.PP
\fBParameters:\fP
.RS 4
\fIformat\fP A String containing zero or more format items
.br
\fIargs\fP An Object array containing zero or more objects to format
.RE
.PP
.PP
The message is formatted using the \fCString\&.Format\fP method\&. See String\&.Format(string, object[]) for details of the syntax of the format string and the behavior of the formatting\&. 
.PP
This method does not take an Exception object to include in the log event\&. To pass an Exception use one of the \fBError(object)\fP methods instead\&. 
.PP
\fBSee Also:\fP
.RS 4
\fBError(object,Exception)\fP, \fBIsErrorEnabled\fP
.PP
.RE
.PP

.PP
Implemented in \fBlog4net\&.Core\&.LogImpl\fP, and \fBlog4net\&.Ext\&.MarshalByRef\&.MarshalByRefLogImpl\fP\&.
.SS "void log4net\&.ILog\&.ErrorFormat (stringformat, objectarg0)"

.PP
Logs a formatted message string with the Level\&.Error level\&. 
.PP
\fBParameters:\fP
.RS 4
\fIformat\fP A String containing zero or more format items
.br
\fIarg0\fP An Object to format
.RE
.PP
.PP
The message is formatted using the \fCString\&.Format\fP method\&. See String\&.Format(string, object[]) for details of the syntax of the format string and the behavior of the formatting\&. 
.PP
This method does not take an Exception object to include in the log event\&. To pass an Exception use one of the \fBError(object,Exception)\fP methods instead\&. 
.PP
\fBSee Also:\fP
.RS 4
\fBError(object)\fP, \fBIsErrorEnabled\fP
.PP
.RE
.PP

.PP
Implemented in \fBlog4net\&.Core\&.LogImpl\fP, and \fBlog4net\&.Ext\&.MarshalByRef\&.MarshalByRefLogImpl\fP\&.
.SS "void log4net\&.ILog\&.ErrorFormat (stringformat, objectarg0, objectarg1)"

.PP
Logs a formatted message string with the Level\&.Error level\&. 
.PP
\fBParameters:\fP
.RS 4
\fIformat\fP A String containing zero or more format items
.br
\fIarg0\fP An Object to format
.br
\fIarg1\fP An Object to format
.RE
.PP
.PP
The message is formatted using the \fCString\&.Format\fP method\&. See String\&.Format(string, object[]) for details of the syntax of the format string and the behavior of the formatting\&. 
.PP
This method does not take an Exception object to include in the log event\&. To pass an Exception use one of the \fBError(object,Exception)\fP methods instead\&. 
.PP
\fBSee Also:\fP
.RS 4
\fBError(object)\fP, \fBIsErrorEnabled\fP
.PP
.RE
.PP

.PP
Implemented in \fBlog4net\&.Core\&.LogImpl\fP, and \fBlog4net\&.Ext\&.MarshalByRef\&.MarshalByRefLogImpl\fP\&.
.SS "void log4net\&.ILog\&.ErrorFormat (stringformat, objectarg0, objectarg1, objectarg2)"

.PP
Logs a formatted message string with the Level\&.Error level\&. 
.PP
\fBParameters:\fP
.RS 4
\fIformat\fP A String containing zero or more format items
.br
\fIarg0\fP An Object to format
.br
\fIarg1\fP An Object to format
.br
\fIarg2\fP An Object to format
.RE
.PP
.PP
The message is formatted using the \fCString\&.Format\fP method\&. See String\&.Format(string, object[]) for details of the syntax of the format string and the behavior of the formatting\&. 
.PP
This method does not take an Exception object to include in the log event\&. To pass an Exception use one of the \fBError(object,Exception)\fP methods instead\&. 
.PP
\fBSee Also:\fP
.RS 4
\fBError(object)\fP, \fBIsErrorEnabled\fP
.PP
.RE
.PP

.PP
Implemented in \fBlog4net\&.Core\&.LogImpl\fP, and \fBlog4net\&.Ext\&.MarshalByRef\&.MarshalByRefLogImpl\fP\&.
.SS "void log4net\&.ILog\&.ErrorFormat (IFormatProviderprovider, stringformat, params object[]args)"

.PP
Logs a formatted message string with the Level\&.Error level\&. 
.PP
\fBParameters:\fP
.RS 4
\fIprovider\fP An IFormatProvider that supplies culture-specific formatting information
.br
\fIformat\fP A String containing zero or more format items
.br
\fIargs\fP An Object array containing zero or more objects to format
.RE
.PP
.PP
The message is formatted using the \fCString\&.Format\fP method\&. See String\&.Format(string, object[]) for details of the syntax of the format string and the behavior of the formatting\&. 
.PP
This method does not take an Exception object to include in the log event\&. To pass an Exception use one of the \fBError(object)\fP methods instead\&. 
.PP
\fBSee Also:\fP
.RS 4
\fBError(object,Exception)\fP, \fBIsErrorEnabled\fP
.PP
.RE
.PP

.PP
Implemented in \fBlog4net\&.Core\&.LogImpl\fP, and \fBlog4net\&.Ext\&.MarshalByRef\&.MarshalByRefLogImpl\fP\&.
.SS "void log4net\&.ILog\&.Fatal (objectmessage)"

.PP
Log a message object with the Level\&.Fatal level\&. <overloads>Log a message object with the Level\&.Fatal level\&.</overloads>
.PP
This method first checks if this logger is \fCFATAL\fP enabled by comparing the level of this logger with the Level\&.Fatal level\&. If this logger is \fCFATAL\fP enabled, then it converts the message object (passed as parameter) to a string by invoking the appropriate \fBlog4net\&.ObjectRenderer\&.IObjectRenderer\fP\&. It then proceeds to call all the registered appenders in this logger and also higher in the hierarchy depending on the value of the additivity flag\&. 
.PP
\fBWARNING\fP Note that passing an Exception to this method will print the name of the Exception but no stack trace\&. To print a stack trace use the \fBFatal(object,Exception)\fP form instead\&. 
.PP
\fBParameters:\fP
.RS 4
\fImessage\fP The message object to log\&.
.RE
.PP
\fBSee Also:\fP
.RS 4
\fBFatal(object,Exception)\fP, \fBIsFatalEnabled\fP
.PP
.RE
.PP

.PP
Implemented in \fBlog4net\&.Core\&.LogImpl\fP, and \fBlog4net\&.Ext\&.MarshalByRef\&.MarshalByRefLogImpl\fP\&.
.SS "void log4net\&.ILog\&.Fatal (objectmessage, Exceptionexception)"

.PP
Log a message object with the Level\&.Fatal level including the stack trace of the Exception passed as a parameter\&. 
.PP
\fBParameters:\fP
.RS 4
\fImessage\fP The message object to log\&.
.br
\fIexception\fP The exception to log, including its stack trace\&.
.RE
.PP
.PP
See the \fBFatal(object)\fP form for more detailed information\&. 
.PP
\fBSee Also:\fP
.RS 4
\fBFatal(object)\fP, \fBIsFatalEnabled\fP
.PP
.RE
.PP

.PP
Implemented in \fBlog4net\&.Core\&.LogImpl\fP, and \fBlog4net\&.Ext\&.MarshalByRef\&.MarshalByRefLogImpl\fP\&.
.SS "void log4net\&.ILog\&.FatalFormat (stringformat, params object[]args)"

.PP
Logs a formatted message string with the Level\&.Fatal level\&. <overloads>Log a formatted message string with the Level\&.Fatal level\&.</overloads>
.PP
\fBParameters:\fP
.RS 4
\fIformat\fP A String containing zero or more format items
.br
\fIargs\fP An Object array containing zero or more objects to format
.RE
.PP
.PP
The message is formatted using the \fCString\&.Format\fP method\&. See String\&.Format(string, object[]) for details of the syntax of the format string and the behavior of the formatting\&. 
.PP
This method does not take an Exception object to include in the log event\&. To pass an Exception use one of the \fBFatal(object)\fP methods instead\&. 
.PP
\fBSee Also:\fP
.RS 4
\fBFatal(object,Exception)\fP, \fBIsFatalEnabled\fP
.PP
.RE
.PP

.PP
Implemented in \fBlog4net\&.Core\&.LogImpl\fP, and \fBlog4net\&.Ext\&.MarshalByRef\&.MarshalByRefLogImpl\fP\&.
.SS "void log4net\&.ILog\&.FatalFormat (stringformat, objectarg0)"

.PP
Logs a formatted message string with the Level\&.Fatal level\&. 
.PP
\fBParameters:\fP
.RS 4
\fIformat\fP A String containing zero or more format items
.br
\fIarg0\fP An Object to format
.RE
.PP
.PP
The message is formatted using the \fCString\&.Format\fP method\&. See String\&.Format(string, object[]) for details of the syntax of the format string and the behavior of the formatting\&. 
.PP
This method does not take an Exception object to include in the log event\&. To pass an Exception use one of the \fBFatal(object,Exception)\fP methods instead\&. 
.PP
\fBSee Also:\fP
.RS 4
\fBFatal(object)\fP, \fBIsFatalEnabled\fP
.PP
.RE
.PP

.PP
Implemented in \fBlog4net\&.Core\&.LogImpl\fP, and \fBlog4net\&.Ext\&.MarshalByRef\&.MarshalByRefLogImpl\fP\&.
.SS "void log4net\&.ILog\&.FatalFormat (stringformat, objectarg0, objectarg1)"

.PP
Logs a formatted message string with the Level\&.Fatal level\&. 
.PP
\fBParameters:\fP
.RS 4
\fIformat\fP A String containing zero or more format items
.br
\fIarg0\fP An Object to format
.br
\fIarg1\fP An Object to format
.RE
.PP
.PP
The message is formatted using the \fCString\&.Format\fP method\&. See String\&.Format(string, object[]) for details of the syntax of the format string and the behavior of the formatting\&. 
.PP
This method does not take an Exception object to include in the log event\&. To pass an Exception use one of the \fBFatal(object,Exception)\fP methods instead\&. 
.PP
\fBSee Also:\fP
.RS 4
\fBFatal(object)\fP, \fBIsFatalEnabled\fP
.PP
.RE
.PP

.PP
Implemented in \fBlog4net\&.Core\&.LogImpl\fP, and \fBlog4net\&.Ext\&.MarshalByRef\&.MarshalByRefLogImpl\fP\&.
.SS "void log4net\&.ILog\&.FatalFormat (stringformat, objectarg0, objectarg1, objectarg2)"

.PP
Logs a formatted message string with the Level\&.Fatal level\&. 
.PP
\fBParameters:\fP
.RS 4
\fIformat\fP A String containing zero or more format items
.br
\fIarg0\fP An Object to format
.br
\fIarg1\fP An Object to format
.br
\fIarg2\fP An Object to format
.RE
.PP
.PP
The message is formatted using the \fCString\&.Format\fP method\&. See String\&.Format(string, object[]) for details of the syntax of the format string and the behavior of the formatting\&. 
.PP
This method does not take an Exception object to include in the log event\&. To pass an Exception use one of the \fBFatal(object,Exception)\fP methods instead\&. 
.PP
\fBSee Also:\fP
.RS 4
\fBFatal(object)\fP, \fBIsFatalEnabled\fP
.PP
.RE
.PP

.PP
Implemented in \fBlog4net\&.Core\&.LogImpl\fP, and \fBlog4net\&.Ext\&.MarshalByRef\&.MarshalByRefLogImpl\fP\&.
.SS "void log4net\&.ILog\&.FatalFormat (IFormatProviderprovider, stringformat, params object[]args)"

.PP
Logs a formatted message string with the Level\&.Fatal level\&. 
.PP
\fBParameters:\fP
.RS 4
\fIprovider\fP An IFormatProvider that supplies culture-specific formatting information
.br
\fIformat\fP A String containing zero or more format items
.br
\fIargs\fP An Object array containing zero or more objects to format
.RE
.PP
.PP
The message is formatted using the \fCString\&.Format\fP method\&. See String\&.Format(string, object[]) for details of the syntax of the format string and the behavior of the formatting\&. 
.PP
This method does not take an Exception object to include in the log event\&. To pass an Exception use one of the \fBFatal(object)\fP methods instead\&. 
.PP
\fBSee Also:\fP
.RS 4
\fBFatal(object,Exception)\fP, \fBIsFatalEnabled\fP
.PP
.RE
.PP

.PP
Implemented in \fBlog4net\&.Core\&.LogImpl\fP, and \fBlog4net\&.Ext\&.MarshalByRef\&.MarshalByRefLogImpl\fP\&.
.SS "void log4net\&.ILog\&.Info (objectmessage)"

.PP
Logs a message object with the Level\&.Info level\&. <overloads>Log a message object with the Level\&.Info level\&.</overloads>
.PP
This method first checks if this logger is \fCINFO\fP enabled by comparing the level of this logger with the Level\&.Info level\&. If this logger is \fCINFO\fP enabled, then it converts the message object (passed as parameter) to a string by invoking the appropriate \fBlog4net\&.ObjectRenderer\&.IObjectRenderer\fP\&. It then proceeds to call all the registered appenders in this logger and also higher in the hierarchy depending on the value of the additivity flag\&. 
.PP
\fBWARNING\fP Note that passing an Exception to this method will print the name of the Exception but no stack trace\&. To print a stack trace use the \fBInfo(object,Exception)\fP form instead\&. 
.PP
\fBParameters:\fP
.RS 4
\fImessage\fP The message object to log\&.
.RE
.PP
\fBSee Also:\fP
.RS 4
\fBInfo(object,Exception)\fP, \fBIsInfoEnabled\fP
.PP
.RE
.PP

.PP
Implemented in \fBlog4net\&.Core\&.LogImpl\fP, and \fBlog4net\&.Ext\&.MarshalByRef\&.MarshalByRefLogImpl\fP\&.
.SS "void log4net\&.ILog\&.Info (objectmessage, Exceptionexception)"

.PP
Logs a message object with the \fCINFO\fP level including the stack trace of the Exception passed as a parameter\&. 
.PP
\fBParameters:\fP
.RS 4
\fImessage\fP The message object to log\&.
.br
\fIexception\fP The exception to log, including its stack trace\&.
.RE
.PP
.PP
See the \fBInfo(object)\fP form for more detailed information\&. 
.PP
\fBSee Also:\fP
.RS 4
\fBInfo(object)\fP, \fBIsInfoEnabled\fP
.PP
.RE
.PP

.PP
Implemented in \fBlog4net\&.Core\&.LogImpl\fP, and \fBlog4net\&.Ext\&.MarshalByRef\&.MarshalByRefLogImpl\fP\&.
.SS "void log4net\&.ILog\&.InfoFormat (stringformat, params object[]args)"

.PP
Logs a formatted message string with the Level\&.Info level\&. <overloads>Log a formatted message string with the Level\&.Info level\&.</overloads>
.PP
\fBParameters:\fP
.RS 4
\fIformat\fP A String containing zero or more format items
.br
\fIargs\fP An Object array containing zero or more objects to format
.RE
.PP
.PP
The message is formatted using the \fCString\&.Format\fP method\&. See String\&.Format(string, object[]) for details of the syntax of the format string and the behavior of the formatting\&. 
.PP
This method does not take an Exception object to include in the log event\&. To pass an Exception use one of the \fBInfo(object)\fP methods instead\&. 
.PP
\fBSee Also:\fP
.RS 4
\fBInfo(object,Exception)\fP, \fBIsInfoEnabled\fP
.PP
.RE
.PP

.PP
Implemented in \fBlog4net\&.Core\&.LogImpl\fP, and \fBlog4net\&.Ext\&.MarshalByRef\&.MarshalByRefLogImpl\fP\&.
.SS "void log4net\&.ILog\&.InfoFormat (stringformat, objectarg0)"

.PP
Logs a formatted message string with the Level\&.Info level\&. 
.PP
\fBParameters:\fP
.RS 4
\fIformat\fP A String containing zero or more format items
.br
\fIarg0\fP An Object to format
.RE
.PP
.PP
The message is formatted using the \fCString\&.Format\fP method\&. See String\&.Format(string, object[]) for details of the syntax of the format string and the behavior of the formatting\&. 
.PP
This method does not take an Exception object to include in the log event\&. To pass an Exception use one of the \fBInfo(object,Exception)\fP methods instead\&. 
.PP
\fBSee Also:\fP
.RS 4
\fBInfo(object)\fP, \fBIsInfoEnabled\fP
.PP
.RE
.PP

.PP
Implemented in \fBlog4net\&.Core\&.LogImpl\fP, and \fBlog4net\&.Ext\&.MarshalByRef\&.MarshalByRefLogImpl\fP\&.
.SS "void log4net\&.ILog\&.InfoFormat (stringformat, objectarg0, objectarg1)"

.PP
Logs a formatted message string with the Level\&.Info level\&. 
.PP
\fBParameters:\fP
.RS 4
\fIformat\fP A String containing zero or more format items
.br
\fIarg0\fP An Object to format
.br
\fIarg1\fP An Object to format
.RE
.PP
.PP
The message is formatted using the \fCString\&.Format\fP method\&. See String\&.Format(string, object[]) for details of the syntax of the format string and the behavior of the formatting\&. 
.PP
This method does not take an Exception object to include in the log event\&. To pass an Exception use one of the \fBInfo(object,Exception)\fP methods instead\&. 
.PP
\fBSee Also:\fP
.RS 4
\fBInfo(object)\fP, \fBIsInfoEnabled\fP
.PP
.RE
.PP

.PP
Implemented in \fBlog4net\&.Core\&.LogImpl\fP, and \fBlog4net\&.Ext\&.MarshalByRef\&.MarshalByRefLogImpl\fP\&.
.SS "void log4net\&.ILog\&.InfoFormat (stringformat, objectarg0, objectarg1, objectarg2)"

.PP
Logs a formatted message string with the Level\&.Info level\&. 
.PP
\fBParameters:\fP
.RS 4
\fIformat\fP A String containing zero or more format items
.br
\fIarg0\fP An Object to format
.br
\fIarg1\fP An Object to format
.br
\fIarg2\fP An Object to format
.RE
.PP
.PP
The message is formatted using the \fCString\&.Format\fP method\&. See String\&.Format(string, object[]) for details of the syntax of the format string and the behavior of the formatting\&. 
.PP
This method does not take an Exception object to include in the log event\&. To pass an Exception use one of the \fBInfo(object,Exception)\fP methods instead\&. 
.PP
\fBSee Also:\fP
.RS 4
\fBInfo(object)\fP, \fBIsInfoEnabled\fP
.PP
.RE
.PP

.PP
Implemented in \fBlog4net\&.Core\&.LogImpl\fP, and \fBlog4net\&.Ext\&.MarshalByRef\&.MarshalByRefLogImpl\fP\&.
.SS "void log4net\&.ILog\&.InfoFormat (IFormatProviderprovider, stringformat, params object[]args)"

.PP
Logs a formatted message string with the Level\&.Info level\&. 
.PP
\fBParameters:\fP
.RS 4
\fIprovider\fP An IFormatProvider that supplies culture-specific formatting information
.br
\fIformat\fP A String containing zero or more format items
.br
\fIargs\fP An Object array containing zero or more objects to format
.RE
.PP
.PP
The message is formatted using the \fCString\&.Format\fP method\&. See String\&.Format(string, object[]) for details of the syntax of the format string and the behavior of the formatting\&. 
.PP
This method does not take an Exception object to include in the log event\&. To pass an Exception use one of the \fBInfo(object)\fP methods instead\&. 
.PP
\fBSee Also:\fP
.RS 4
\fBInfo(object,Exception)\fP, \fBIsInfoEnabled\fP
.PP
.RE
.PP

.PP
Implemented in \fBlog4net\&.Core\&.LogImpl\fP, and \fBlog4net\&.Ext\&.MarshalByRef\&.MarshalByRefLogImpl\fP\&.
.SS "void log4net\&.ILog\&.Warn (objectmessage)"

.PP
Log a message object with the Level\&.Warn level\&. <overloads>Log a message object with the Level\&.Warn level\&.</overloads>
.PP
This method first checks if this logger is \fCWARN\fP enabled by comparing the level of this logger with the Level\&.Warn level\&. If this logger is \fCWARN\fP enabled, then it converts the message object (passed as parameter) to a string by invoking the appropriate \fBlog4net\&.ObjectRenderer\&.IObjectRenderer\fP\&. It then proceeds to call all the registered appenders in this logger and also higher in the hierarchy depending on the value of the additivity flag\&. 
.PP
\fBWARNING\fP Note that passing an Exception to this method will print the name of the Exception but no stack trace\&. To print a stack trace use the \fBWarn(object,Exception)\fP form instead\&. 
.PP
\fBParameters:\fP
.RS 4
\fImessage\fP The message object to log\&.
.RE
.PP
\fBSee Also:\fP
.RS 4
\fBWarn(object,Exception)\fP, \fBIsWarnEnabled\fP
.PP
.RE
.PP

.PP
Implemented in \fBlog4net\&.Core\&.LogImpl\fP, and \fBlog4net\&.Ext\&.MarshalByRef\&.MarshalByRefLogImpl\fP\&.
.SS "void log4net\&.ILog\&.Warn (objectmessage, Exceptionexception)"

.PP
Log a message object with the Level\&.Warn level including the stack trace of the Exception passed as a parameter\&. 
.PP
\fBParameters:\fP
.RS 4
\fImessage\fP The message object to log\&.
.br
\fIexception\fP The exception to log, including its stack trace\&.
.RE
.PP
.PP
See the \fBWarn(object)\fP form for more detailed information\&. 
.PP
\fBSee Also:\fP
.RS 4
\fBWarn(object)\fP, \fBIsWarnEnabled\fP
.PP
.RE
.PP

.PP
Implemented in \fBlog4net\&.Core\&.LogImpl\fP, and \fBlog4net\&.Ext\&.MarshalByRef\&.MarshalByRefLogImpl\fP\&.
.SS "void log4net\&.ILog\&.WarnFormat (stringformat, params object[]args)"

.PP
Logs a formatted message string with the Level\&.Warn level\&. <overloads>Log a formatted message string with the Level\&.Warn level\&.</overloads>
.PP
\fBParameters:\fP
.RS 4
\fIformat\fP A String containing zero or more format items
.br
\fIargs\fP An Object array containing zero or more objects to format
.RE
.PP
.PP
The message is formatted using the \fCString\&.Format\fP method\&. See String\&.Format(string, object[]) for details of the syntax of the format string and the behavior of the formatting\&. 
.PP
This method does not take an Exception object to include in the log event\&. To pass an Exception use one of the \fBWarn(object)\fP methods instead\&. 
.PP
\fBSee Also:\fP
.RS 4
\fBWarn(object,Exception)\fP, \fBIsWarnEnabled\fP
.PP
.RE
.PP

.PP
Implemented in \fBlog4net\&.Core\&.LogImpl\fP, and \fBlog4net\&.Ext\&.MarshalByRef\&.MarshalByRefLogImpl\fP\&.
.SS "void log4net\&.ILog\&.WarnFormat (stringformat, objectarg0)"

.PP
Logs a formatted message string with the Level\&.Warn level\&. 
.PP
\fBParameters:\fP
.RS 4
\fIformat\fP A String containing zero or more format items
.br
\fIarg0\fP An Object to format
.RE
.PP
.PP
The message is formatted using the \fCString\&.Format\fP method\&. See String\&.Format(string, object[]) for details of the syntax of the format string and the behavior of the formatting\&. 
.PP
This method does not take an Exception object to include in the log event\&. To pass an Exception use one of the \fBWarn(object,Exception)\fP methods instead\&. 
.PP
\fBSee Also:\fP
.RS 4
\fBWarn(object)\fP, \fBIsWarnEnabled\fP
.PP
.RE
.PP

.PP
Implemented in \fBlog4net\&.Core\&.LogImpl\fP, and \fBlog4net\&.Ext\&.MarshalByRef\&.MarshalByRefLogImpl\fP\&.
.SS "void log4net\&.ILog\&.WarnFormat (stringformat, objectarg0, objectarg1)"

.PP
Logs a formatted message string with the Level\&.Warn level\&. 
.PP
\fBParameters:\fP
.RS 4
\fIformat\fP A String containing zero or more format items
.br
\fIarg0\fP An Object to format
.br
\fIarg1\fP An Object to format
.RE
.PP
.PP
The message is formatted using the \fCString\&.Format\fP method\&. See String\&.Format(string, object[]) for details of the syntax of the format string and the behavior of the formatting\&. 
.PP
This method does not take an Exception object to include in the log event\&. To pass an Exception use one of the \fBWarn(object,Exception)\fP methods instead\&. 
.PP
\fBSee Also:\fP
.RS 4
\fBWarn(object)\fP, \fBIsWarnEnabled\fP
.PP
.RE
.PP

.PP
Implemented in \fBlog4net\&.Core\&.LogImpl\fP, and \fBlog4net\&.Ext\&.MarshalByRef\&.MarshalByRefLogImpl\fP\&.
.SS "void log4net\&.ILog\&.WarnFormat (stringformat, objectarg0, objectarg1, objectarg2)"

.PP
Logs a formatted message string with the Level\&.Warn level\&. 
.PP
\fBParameters:\fP
.RS 4
\fIformat\fP A String containing zero or more format items
.br
\fIarg0\fP An Object to format
.br
\fIarg1\fP An Object to format
.br
\fIarg2\fP An Object to format
.RE
.PP
.PP
The message is formatted using the \fCString\&.Format\fP method\&. See String\&.Format(string, object[]) for details of the syntax of the format string and the behavior of the formatting\&. 
.PP
This method does not take an Exception object to include in the log event\&. To pass an Exception use one of the \fBWarn(object,Exception)\fP methods instead\&. 
.PP
\fBSee Also:\fP
.RS 4
\fBWarn(object)\fP, \fBIsWarnEnabled\fP
.PP
.RE
.PP

.PP
Implemented in \fBlog4net\&.Core\&.LogImpl\fP, and \fBlog4net\&.Ext\&.MarshalByRef\&.MarshalByRefLogImpl\fP\&.
.SS "void log4net\&.ILog\&.WarnFormat (IFormatProviderprovider, stringformat, params object[]args)"

.PP
Logs a formatted message string with the Level\&.Warn level\&. 
.PP
\fBParameters:\fP
.RS 4
\fIprovider\fP An IFormatProvider that supplies culture-specific formatting information
.br
\fIformat\fP A String containing zero or more format items
.br
\fIargs\fP An Object array containing zero or more objects to format
.RE
.PP
.PP
The message is formatted using the \fCString\&.Format\fP method\&. See String\&.Format(string, object[]) for details of the syntax of the format string and the behavior of the formatting\&. 
.PP
This method does not take an Exception object to include in the log event\&. To pass an Exception use one of the \fBWarn(object)\fP methods instead\&. 
.PP
\fBSee Also:\fP
.RS 4
\fBWarn(object,Exception)\fP, \fBIsWarnEnabled\fP
.PP
.RE
.PP

.PP
Implemented in \fBlog4net\&.Core\&.LogImpl\fP, and \fBlog4net\&.Ext\&.MarshalByRef\&.MarshalByRefLogImpl\fP\&.
.SH "Property Documentation"
.PP 
.SS "bool log4net\&.ILog\&.IsDebugEnabled\fC [get]\fP"

.PP
Checks if this logger is enabled for the Level\&.Debug level\&. \fCtrue\fP if this logger is enabled for Level\&.Debug events, \fCfalse\fP otherwise\&. 
.PP
This function is intended to lessen the computational cost of disabled log debug statements\&. 
.PP
For some \fBILog\fP interface \fClog\fP, when you write:
.PP
.PP
.nf
log\&.Debug("This is entry number: " + i );
.fi
.PP
 
.PP
You incur the cost constructing the message, string construction and concatenation in this case, regardless of whether the message is logged or not\&. 
.PP
If you are worried about speed (who isn't), then you should write: 
.PP
.PP
.nf
if (log\&.IsDebugEnabled)
{ 
    log\&.Debug("This is entry number: " + i );
}
.fi
.PP
 
.PP
This way you will not incur the cost of parameter construction if debugging is disabled for \fClog\fP\&. On the other hand, if the \fClog\fP is debug enabled, you will incur the cost of evaluating whether the logger is debug enabled twice\&. Once in \fBIsDebugEnabled\fP and once in the \fBDebug(object)\fP\&. This is an insignificant overhead since evaluating a logger takes about 1% of the time it takes to actually log\&. This is the preferred style of logging\&. 
.PP
Alternatively if your logger is available statically then the is debug enabled state can be stored in a static variable like this: 
.PP
.PP
.nf
private static readonly bool isDebugEnabled = log\&.IsDebugEnabled;
.fi
.PP
 
.PP
Then when you come to log you can write: 
.PP
.PP
.nf
if (isDebugEnabled)
{ 
    log\&.Debug("This is entry number: " + i );
}
.fi
.PP
 
.PP
This way the debug enabled state is only queried once when the class is loaded\&. Using a \fCprivate static readonly\fP variable is the most efficient because it is a run time constant and can be heavily optimized by the JIT compiler\&. 
.PP
Of course if you use a static readonly variable to hold the enabled state of the logger then you cannot change the enabled state at runtime to vary the logging that is produced\&. You have to decide if you need absolute speed or runtime flexibility\&. 
.PP
\fBSee Also:\fP
.RS 4
\fBDebug(object)\fP, DebugFormat(IFormatProvider, string, object[])
.PP
.RE
.PP

.PP
Definition at line 902 of file ILog\&.cs\&.
.SS "bool log4net\&.ILog\&.IsErrorEnabled\fC [get]\fP"

.PP
Checks if this logger is enabled for the Level\&.Error level\&. \fCtrue\fP if this logger is enabled for Level\&.Error events, \fCfalse\fP otherwise\&. 
.PP
For more information see \fBILog\&.IsDebugEnabled\fP\&. 
.PP
\fBSee Also:\fP
.RS 4
\fBError(object)\fP, ErrorFormat(IFormatProvider, string, object[]), \fBILog\&.IsDebugEnabled\fP
.PP
.RE
.PP

.PP
Definition at line 944 of file ILog\&.cs\&.
.SS "bool log4net\&.ILog\&.IsFatalEnabled\fC [get]\fP"

.PP
Checks if this logger is enabled for the Level\&.Fatal level\&. \fCtrue\fP if this logger is enabled for Level\&.Fatal events, \fCfalse\fP otherwise\&. 
.PP
For more information see \fBILog\&.IsDebugEnabled\fP\&. 
.PP
\fBSee Also:\fP
.RS 4
\fBFatal(object)\fP, FatalFormat(IFormatProvider, string, object[]), \fBILog\&.IsDebugEnabled\fP
.PP
.RE
.PP

.PP
Definition at line 958 of file ILog\&.cs\&.
.SS "bool log4net\&.ILog\&.IsInfoEnabled\fC [get]\fP"

.PP
Checks if this logger is enabled for the Level\&.Info level\&. \fCtrue\fP if this logger is enabled for Level\&.Info events, \fCfalse\fP otherwise\&. 
.PP
For more information see \fBILog\&.IsDebugEnabled\fP\&. 
.PP
\fBSee Also:\fP
.RS 4
\fBInfo(object)\fP, InfoFormat(IFormatProvider, string, object[]), \fBILog\&.IsDebugEnabled\fP
.PP
.RE
.PP

.PP
Definition at line 916 of file ILog\&.cs\&.
.SS "bool log4net\&.ILog\&.IsWarnEnabled\fC [get]\fP"

.PP
Checks if this logger is enabled for the Level\&.Warn level\&. \fCtrue\fP if this logger is enabled for Level\&.Warn events, \fCfalse\fP otherwise\&. 
.PP
For more information see \fBILog\&.IsDebugEnabled\fP\&. 
.PP
\fBSee Also:\fP
.RS 4
\fBWarn(object)\fP, WarnFormat(IFormatProvider, string, object[]), \fBILog\&.IsDebugEnabled\fP
.PP
.RE
.PP

.PP
Definition at line 930 of file ILog\&.cs\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for HSA\&.InfoSys from the source code\&.
