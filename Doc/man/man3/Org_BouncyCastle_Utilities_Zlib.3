.TH "Org.BouncyCastle.Utilities.Zlib" 3 "Fri Jul 5 2013" "Version 1.0" "HSA.InfoSys" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Org.BouncyCastle.Utilities.Zlib \- 
.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBAdler32\fP"
.br
.ti -1c
.RI "class \fBDeflate\fP"
.br
.ti -1c
.RI "class \fBInfBlocks\fP"
.br
.ti -1c
.RI "class \fBInfCodes\fP"
.br
.ti -1c
.RI "class \fBInflate\fP"
.br
.ti -1c
.RI "class \fBInflateBlocks\fP"
.br
.ti -1c
.RI "class \fBInflateCodes\fP"
.br
.ti -1c
.RI "class \fBInflateTree\fP"
.br
.ti -1c
.RI "class \fBInfTree\fP"
.br
.ti -1c
.RI "class \fBJZlib\fP"
.br
.ti -1c
.RI "class \fBStaticTree\fP"
.br
.ti -1c
.RI "class \fBTree\fP"
.br
.ti -1c
.RI "class \fBZInputStream\fP"
.br
.ti -1c
.RI "class \fBZOutputStream\fP"
.br
.ti -1c
.RI "interface \fBICompressor\fP"
.br
.ti -1c
.RI "class \fBZStream\fP"
.br
.ti -1c
.RI "class \fBZDeflaterOutputStream\fP"
.br
.RI "\fISummary description for DeflaterOutputStream\&. \fP"
.ti -1c
.RI "class \fBZInflaterInputStream\fP"
.br
.RI "\fISummary description for DeflaterOutputStream\&. \fP"
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBInflateBlockMode\fP { \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9 }"
.br
.ti -1c
.RI "enum \fBInflateCodeMode\fP { \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9 }"
.br
.ti -1c
.RI "enum \fBBlockType\fP : byte { \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2 }"
.br
.ti -1c
.RI "enum \fBDefalteFlavor\fP : int { \fBSTORED\fP = 0, \fBFAST\fP = 1, \fBSLOW\fP = 2, \fBSTORED\fP = 0, \fBFAST\fP = 1, \fBSLOW\fP = 2, \fBSTORED\fP = 0, \fBFAST\fP = 1, \fBSLOW\fP = 2, \fBSTORED\fP = 0, \fBFAST\fP = 1, \fBSLOW\fP = 2, \fBSTORED\fP = 0, \fBFAST\fP = 1, \fBSLOW\fP = 2, \fBSTORED\fP = 0, \fBFAST\fP = 1, \fBSLOW\fP = 2, \fBSTORED\fP = 0, \fBFAST\fP = 1, \fBSLOW\fP = 2, \fBSTORED\fP = 0, \fBFAST\fP = 1, \fBSLOW\fP = 2, \fBSTORED\fP = 0, \fBFAST\fP = 1, \fBSLOW\fP = 2 }"
.br
.ti -1c
.RI "enum \fBInflateMode\fP : int { \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13 }"
.br
.ti -1c
.RI "enum \fBInflateBlockMode\fP { \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9 }"
.br
.ti -1c
.RI "enum \fBInflateCodeMode\fP { \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9 }"
.br
.ti -1c
.RI "enum \fBCompressionLevel\fP : int { \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1 }"
.br
.ti -1c
.RI "enum \fBFlushType\fP { \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4 }"
.br
.ti -1c
.RI "enum \fBCompressionStrategy\fP { \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0 }"
.br
.ti -1c
.RI "enum \fBZLibStatus\fP { \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6 }"
.br
.ti -1c
.RI "enum \fBBlockType\fP : byte { \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2 }"
.br
.ti -1c
.RI "enum \fBDefalteFlavor\fP : int { \fBSTORED\fP = 0, \fBFAST\fP = 1, \fBSLOW\fP = 2, \fBSTORED\fP = 0, \fBFAST\fP = 1, \fBSLOW\fP = 2, \fBSTORED\fP = 0, \fBFAST\fP = 1, \fBSLOW\fP = 2, \fBSTORED\fP = 0, \fBFAST\fP = 1, \fBSLOW\fP = 2, \fBSTORED\fP = 0, \fBFAST\fP = 1, \fBSLOW\fP = 2, \fBSTORED\fP = 0, \fBFAST\fP = 1, \fBSLOW\fP = 2, \fBSTORED\fP = 0, \fBFAST\fP = 1, \fBSLOW\fP = 2, \fBSTORED\fP = 0, \fBFAST\fP = 1, \fBSLOW\fP = 2, \fBSTORED\fP = 0, \fBFAST\fP = 1, \fBSLOW\fP = 2 }"
.br
.ti -1c
.RI "enum \fBInflateMode\fP : int { \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13 }"
.br
.ti -1c
.RI "enum \fBInflateBlockMode\fP { \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9 }"
.br
.ti -1c
.RI "enum \fBInflateCodeMode\fP { \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9 }"
.br
.ti -1c
.RI "enum \fBCompressionLevel\fP : int { \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1 }"
.br
.ti -1c
.RI "enum \fBFlushType\fP { \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4 }"
.br
.ti -1c
.RI "enum \fBCompressionStrategy\fP { \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0 }"
.br
.ti -1c
.RI "enum \fBZLibStatus\fP { \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6 }"
.br
.ti -1c
.RI "enum \fBBlockType\fP : byte { \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2 }"
.br
.ti -1c
.RI "enum \fBDefalteFlavor\fP : int { \fBSTORED\fP = 0, \fBFAST\fP = 1, \fBSLOW\fP = 2, \fBSTORED\fP = 0, \fBFAST\fP = 1, \fBSLOW\fP = 2, \fBSTORED\fP = 0, \fBFAST\fP = 1, \fBSLOW\fP = 2, \fBSTORED\fP = 0, \fBFAST\fP = 1, \fBSLOW\fP = 2, \fBSTORED\fP = 0, \fBFAST\fP = 1, \fBSLOW\fP = 2, \fBSTORED\fP = 0, \fBFAST\fP = 1, \fBSLOW\fP = 2, \fBSTORED\fP = 0, \fBFAST\fP = 1, \fBSLOW\fP = 2, \fBSTORED\fP = 0, \fBFAST\fP = 1, \fBSLOW\fP = 2, \fBSTORED\fP = 0, \fBFAST\fP = 1, \fBSLOW\fP = 2 }"
.br
.ti -1c
.RI "enum \fBInflateMode\fP : int { \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13 }"
.br
.ti -1c
.RI "enum \fBInflateBlockMode\fP { \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9 }"
.br
.ti -1c
.RI "enum \fBInflateCodeMode\fP { \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9 }"
.br
.ti -1c
.RI "enum \fBCompressionLevel\fP : int { \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1 }"
.br
.ti -1c
.RI "enum \fBFlushType\fP { \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4 }"
.br
.ti -1c
.RI "enum \fBCompressionStrategy\fP { \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0 }"
.br
.ti -1c
.RI "enum \fBZLibStatus\fP { \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6 }"
.br
.ti -1c
.RI "enum \fBBlockType\fP : byte { \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2 }"
.br
.ti -1c
.RI "enum \fBDefalteFlavor\fP : int { \fBSTORED\fP = 0, \fBFAST\fP = 1, \fBSLOW\fP = 2, \fBSTORED\fP = 0, \fBFAST\fP = 1, \fBSLOW\fP = 2, \fBSTORED\fP = 0, \fBFAST\fP = 1, \fBSLOW\fP = 2, \fBSTORED\fP = 0, \fBFAST\fP = 1, \fBSLOW\fP = 2, \fBSTORED\fP = 0, \fBFAST\fP = 1, \fBSLOW\fP = 2, \fBSTORED\fP = 0, \fBFAST\fP = 1, \fBSLOW\fP = 2, \fBSTORED\fP = 0, \fBFAST\fP = 1, \fBSLOW\fP = 2, \fBSTORED\fP = 0, \fBFAST\fP = 1, \fBSLOW\fP = 2, \fBSTORED\fP = 0, \fBFAST\fP = 1, \fBSLOW\fP = 2 }"
.br
.ti -1c
.RI "enum \fBInflateMode\fP : int { \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13 }"
.br
.ti -1c
.RI "enum \fBInflateBlockMode\fP { \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9 }"
.br
.ti -1c
.RI "enum \fBInflateCodeMode\fP { \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9 }"
.br
.ti -1c
.RI "enum \fBCompressionLevel\fP : int { \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1 }"
.br
.ti -1c
.RI "enum \fBFlushType\fP { \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4 }"
.br
.ti -1c
.RI "enum \fBCompressionStrategy\fP { \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0 }"
.br
.ti -1c
.RI "enum \fBZLibStatus\fP { \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6 }"
.br
.ti -1c
.RI "enum \fBBlockType\fP : byte { \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2 }"
.br
.ti -1c
.RI "enum \fBDefalteFlavor\fP : int { \fBSTORED\fP = 0, \fBFAST\fP = 1, \fBSLOW\fP = 2, \fBSTORED\fP = 0, \fBFAST\fP = 1, \fBSLOW\fP = 2, \fBSTORED\fP = 0, \fBFAST\fP = 1, \fBSLOW\fP = 2, \fBSTORED\fP = 0, \fBFAST\fP = 1, \fBSLOW\fP = 2, \fBSTORED\fP = 0, \fBFAST\fP = 1, \fBSLOW\fP = 2, \fBSTORED\fP = 0, \fBFAST\fP = 1, \fBSLOW\fP = 2, \fBSTORED\fP = 0, \fBFAST\fP = 1, \fBSLOW\fP = 2, \fBSTORED\fP = 0, \fBFAST\fP = 1, \fBSLOW\fP = 2, \fBSTORED\fP = 0, \fBFAST\fP = 1, \fBSLOW\fP = 2 }"
.br
.ti -1c
.RI "enum \fBInflateMode\fP : int { \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13 }"
.br
.ti -1c
.RI "enum \fBInflateBlockMode\fP { \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9 }"
.br
.ti -1c
.RI "enum \fBInflateCodeMode\fP { \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9 }"
.br
.ti -1c
.RI "enum \fBCompressionLevel\fP : int { \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1 }"
.br
.ti -1c
.RI "enum \fBFlushType\fP { \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4 }"
.br
.ti -1c
.RI "enum \fBCompressionStrategy\fP { \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0 }"
.br
.ti -1c
.RI "enum \fBZLibStatus\fP { \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6 }"
.br
.ti -1c
.RI "enum \fBBlockType\fP : byte { \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2 }"
.br
.ti -1c
.RI "enum \fBDefalteFlavor\fP : int { \fBSTORED\fP = 0, \fBFAST\fP = 1, \fBSLOW\fP = 2, \fBSTORED\fP = 0, \fBFAST\fP = 1, \fBSLOW\fP = 2, \fBSTORED\fP = 0, \fBFAST\fP = 1, \fBSLOW\fP = 2, \fBSTORED\fP = 0, \fBFAST\fP = 1, \fBSLOW\fP = 2, \fBSTORED\fP = 0, \fBFAST\fP = 1, \fBSLOW\fP = 2, \fBSTORED\fP = 0, \fBFAST\fP = 1, \fBSLOW\fP = 2, \fBSTORED\fP = 0, \fBFAST\fP = 1, \fBSLOW\fP = 2, \fBSTORED\fP = 0, \fBFAST\fP = 1, \fBSLOW\fP = 2, \fBSTORED\fP = 0, \fBFAST\fP = 1, \fBSLOW\fP = 2 }"
.br
.ti -1c
.RI "enum \fBInflateMode\fP : int { \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13 }"
.br
.ti -1c
.RI "enum \fBInflateBlockMode\fP { \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9 }"
.br
.ti -1c
.RI "enum \fBInflateCodeMode\fP { \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9 }"
.br
.ti -1c
.RI "enum \fBCompressionLevel\fP : int { \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1 }"
.br
.ti -1c
.RI "enum \fBFlushType\fP { \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4 }"
.br
.ti -1c
.RI "enum \fBCompressionStrategy\fP { \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0 }"
.br
.ti -1c
.RI "enum \fBZLibStatus\fP { \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6 }"
.br
.ti -1c
.RI "enum \fBBlockType\fP : byte { \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2 }"
.br
.ti -1c
.RI "enum \fBDefalteFlavor\fP : int { \fBSTORED\fP = 0, \fBFAST\fP = 1, \fBSLOW\fP = 2, \fBSTORED\fP = 0, \fBFAST\fP = 1, \fBSLOW\fP = 2, \fBSTORED\fP = 0, \fBFAST\fP = 1, \fBSLOW\fP = 2, \fBSTORED\fP = 0, \fBFAST\fP = 1, \fBSLOW\fP = 2, \fBSTORED\fP = 0, \fBFAST\fP = 1, \fBSLOW\fP = 2, \fBSTORED\fP = 0, \fBFAST\fP = 1, \fBSLOW\fP = 2, \fBSTORED\fP = 0, \fBFAST\fP = 1, \fBSLOW\fP = 2, \fBSTORED\fP = 0, \fBFAST\fP = 1, \fBSLOW\fP = 2, \fBSTORED\fP = 0, \fBFAST\fP = 1, \fBSLOW\fP = 2 }"
.br
.ti -1c
.RI "enum \fBInflateMode\fP : int { \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13 }"
.br
.ti -1c
.RI "enum \fBInflateBlockMode\fP { \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9 }"
.br
.ti -1c
.RI "enum \fBInflateCodeMode\fP { \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9 }"
.br
.ti -1c
.RI "enum \fBCompressionLevel\fP : int { \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1 }"
.br
.ti -1c
.RI "enum \fBFlushType\fP { \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4 }"
.br
.ti -1c
.RI "enum \fBCompressionStrategy\fP { \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0 }"
.br
.ti -1c
.RI "enum \fBZLibStatus\fP { \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6 }"
.br
.ti -1c
.RI "enum \fBBlockType\fP : byte { \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2 }"
.br
.ti -1c
.RI "enum \fBDefalteFlavor\fP : int { \fBSTORED\fP = 0, \fBFAST\fP = 1, \fBSLOW\fP = 2, \fBSTORED\fP = 0, \fBFAST\fP = 1, \fBSLOW\fP = 2, \fBSTORED\fP = 0, \fBFAST\fP = 1, \fBSLOW\fP = 2, \fBSTORED\fP = 0, \fBFAST\fP = 1, \fBSLOW\fP = 2, \fBSTORED\fP = 0, \fBFAST\fP = 1, \fBSLOW\fP = 2, \fBSTORED\fP = 0, \fBFAST\fP = 1, \fBSLOW\fP = 2, \fBSTORED\fP = 0, \fBFAST\fP = 1, \fBSLOW\fP = 2, \fBSTORED\fP = 0, \fBFAST\fP = 1, \fBSLOW\fP = 2, \fBSTORED\fP = 0, \fBFAST\fP = 1, \fBSLOW\fP = 2 }"
.br
.ti -1c
.RI "enum \fBInflateMode\fP : int { \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13 }"
.br
.ti -1c
.RI "enum \fBInflateBlockMode\fP { \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9 }"
.br
.ti -1c
.RI "enum \fBInflateCodeMode\fP { \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9 }"
.br
.ti -1c
.RI "enum \fBCompressionLevel\fP : int { \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1 }"
.br
.ti -1c
.RI "enum \fBFlushType\fP { \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4 }"
.br
.ti -1c
.RI "enum \fBCompressionStrategy\fP { \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0 }"
.br
.ti -1c
.RI "enum \fBZLibStatus\fP { \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6 }"
.br
.ti -1c
.RI "enum \fBBlockType\fP : byte { \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2 }"
.br
.ti -1c
.RI "enum \fBDefalteFlavor\fP : int { \fBSTORED\fP = 0, \fBFAST\fP = 1, \fBSLOW\fP = 2, \fBSTORED\fP = 0, \fBFAST\fP = 1, \fBSLOW\fP = 2, \fBSTORED\fP = 0, \fBFAST\fP = 1, \fBSLOW\fP = 2, \fBSTORED\fP = 0, \fBFAST\fP = 1, \fBSLOW\fP = 2, \fBSTORED\fP = 0, \fBFAST\fP = 1, \fBSLOW\fP = 2, \fBSTORED\fP = 0, \fBFAST\fP = 1, \fBSLOW\fP = 2, \fBSTORED\fP = 0, \fBFAST\fP = 1, \fBSLOW\fP = 2, \fBSTORED\fP = 0, \fBFAST\fP = 1, \fBSLOW\fP = 2, \fBSTORED\fP = 0, \fBFAST\fP = 1, \fBSLOW\fP = 2 }"
.br
.ti -1c
.RI "enum \fBInflateMode\fP : int { \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13 }"
.br
.ti -1c
.RI "enum \fBInflateBlockMode\fP { \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9 }"
.br
.ti -1c
.RI "enum \fBInflateCodeMode\fP { \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9 }"
.br
.ti -1c
.RI "enum \fBCompressionLevel\fP : int { \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1 }"
.br
.ti -1c
.RI "enum \fBFlushType\fP { \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4 }"
.br
.ti -1c
.RI "enum \fBCompressionStrategy\fP { \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0 }"
.br
.ti -1c
.RI "enum \fBZLibStatus\fP { \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6 }"
.br
.ti -1c
.RI "enum \fBBlockType\fP : byte { \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2, \fBZ_BINARY\fP = 0, \fBZ_ASCII\fP = 1, \fBZ_UNKNOWN\fP = 2 }"
.br
.ti -1c
.RI "enum \fBInflateBlockMode\fP { \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9, \fBInflateBlockMode\&.TYPE\fP = 0, \fBInflateBlockMode\&.LENS\fP = 1, \fBInflateBlockMode\&.STORED\fP = 2, \fBInflateBlockMode\&.TABLE\fP = 3, \fBInflateBlockMode\&.BTREE\fP = 4, \fBInflateBlockMode\&.DTREE\fP = 5, \fBInflateBlockMode\&.CODES\fP = 6, \fBInflateBlockMode\&.DRY\fP = 7, \fBInflateBlockMode\&.DONE\fP = 8, \fBInflateBlockMode\&.BAD\fP = 9 }"
.br
.ti -1c
.RI "enum \fBInflateCodeMode\fP { \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9 }"
.br
.ti -1c
.RI "enum \fBInflateCodeMode\fP { \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9, \fBInflateCodeMode\&.START\fP = 0, \fBInflateCodeMode\&.LEN\fP = 1, \fBInflateCodeMode\&.LENEXT\fP = 2, \fBInflateCodeMode\&.DIST\fP = 3, \fBInflateCodeMode\&.DISTEXT\fP = 4, \fBInflateCodeMode\&.COPY\fP = 5, \fBInflateCodeMode\&.LIT\fP = 6, \fBInflateCodeMode\&.WASH\fP = 7, \fBInflateCodeMode\&.END\fP = 8, \fBInflateCodeMode\&.BADCODE\fP = 9 }"
.br
.ti -1c
.RI "enum \fBInflateMode\fP : int { \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13, \fBInflateMode\&.METHOD\fP = 0, \fBInflateMode\&.FLAG\fP = 1, \fBInflateMode\&.DICT4\fP = 2, \fBInflateMode\&.DICT3\fP = 3, \fBInflateMode\&.DICT2\fP = 4, \fBInflateMode\&.DICT1\fP = 5, \fBInflateMode\&.DICT0\fP = 6, \fBInflateMode\&.BLOCKS\fP = 7, \fBInflateMode\&.CHECK4\fP = 8, \fBInflateMode\&.CHECK3\fP = 9, \fBInflateMode\&.CHECK2\fP = 10, \fBInflateMode\&.CHECK1\fP = 11, \fBInflateMode\&.DONE\fP = 12, \fBInflateMode\&.BAD\fP = 13 }"
.br
.ti -1c
.RI "enum \fBCompressionLevel\fP : int { \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1, \fBZ_NO_COMPRESSION\fP = 0, \fBZ_BEST_SPEED\fP = 1, \fBZ_BEST_COMPRESSION\fP = 9, \fBZ_DEFAULT_COMPRESSION\fP = -1 }"
.br
.ti -1c
.RI "enum \fBFlushType\fP { \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4, \fBZ_NO_FLUSH\fP = 0, \fBZ_PARTIAL_FLUSH\fP = 1, \fBZ_SYNC_FLUSH\fP = 2, \fBZ_FULL_FLUSH\fP = 3, \fBZ_FINISH\fP = 4 }"
.br
.ti -1c
.RI "enum \fBCompressionStrategy\fP { \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0, \fBZ_FILTERED\fP = 1, \fBZ_HUFFMAN_ONLY\fP = 2, \fBZ_DEFAULT_STRATEGY\fP = 0 }"
.br
.ti -1c
.RI "enum \fBZLibStatus\fP { \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6, \fBZ_OK\fP = 0, \fBZ_STREAM_END\fP = 1, \fBZ_NEED_DICT\fP = 2, \fBZ_ERRNO\fP = -1, \fBZ_STREAM_ERROR\fP = -2, \fBZ_DATA_ERROR\fP = -3, \fBZ_MEM_ERROR\fP = -4, \fBZ_BUF_ERROR\fP = -5, \fBZ_VERSION_ERROR\fP = -6 }"
.br
.in -1c
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBOrg\&.BouncyCastle\&.Utilities\&.Zlib\&.InflateBlockMode\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.PP
Definition at line 40 of file InflateBlocks\&.cs\&.
.SS "enum \fBOrg\&.BouncyCastle\&.Utilities\&.Zlib\&.InflateBlockMode\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.PP
Definition at line 40 of file InflateBlocks\&.cs\&.
.SS "enum \fBOrg\&.BouncyCastle\&.Utilities\&.Zlib\&.InflateBlockMode\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.PP
Definition at line 40 of file InflateBlocks\&.cs\&.
.SS "enum \fBOrg\&.BouncyCastle\&.Utilities\&.Zlib\&.InflateBlockMode\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.PP
Definition at line 40 of file InflateBlocks\&.cs\&.
.SS "enum \fBOrg\&.BouncyCastle\&.Utilities\&.Zlib\&.InflateBlockMode\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.PP
Definition at line 40 of file InfBlocks\&.cs\&.
.SS "enum \fBOrg\&.BouncyCastle\&.Utilities\&.Zlib\&.InflateBlockMode\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.PP
Definition at line 40 of file InflateBlocks\&.cs\&.
.SS "enum \fBOrg\&.BouncyCastle\&.Utilities\&.Zlib\&.InflateBlockMode\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.PP
Definition at line 40 of file InflateBlocks\&.cs\&.
.SS "enum \fBOrg\&.BouncyCastle\&.Utilities\&.Zlib\&.InflateBlockMode\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.PP
Definition at line 40 of file InflateBlocks\&.cs\&.
.SS "enum \fBOrg\&.BouncyCastle\&.Utilities\&.Zlib\&.InflateBlockMode\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.PP
Definition at line 40 of file InflateBlocks\&.cs\&.
.SS "enum \fBOrg\&.BouncyCastle\&.Utilities\&.Zlib\&.InflateBlockMode\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.PP
Definition at line 40 of file InflateBlocks\&.cs\&.
.SS "enum \fBOrg\&.BouncyCastle\&.Utilities\&.Zlib\&.InflateBlockMode\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.TP
\fB\fITYPE \fP\fP
get type bits (3, including end bit) 
.TP
\fB\fILENS \fP\fP
get lengths for stored 
.TP
\fB\fISTORED \fP\fP
cessing stored block 
.TP
\fB\fITABLE \fP\fP
get table lengths 
.TP
\fB\fIBTREE \fP\fP
get bit lengths tree for a dynamic block 
.TP
\fB\fIDTREE \fP\fP
get length, distance trees for a dynamic block 
.TP
\fB\fICODES \fP\fP
processing fixed or dynamic block 
.TP
\fB\fIDRY \fP\fP
output remaining window bytes 
.TP
\fB\fIDONE \fP\fP
finished last block, done 
.TP
\fB\fIBAD \fP\fP
ot a data error--stuck here 
.PP
Definition at line 40 of file InflateBlocks\&.cs\&.
.SS "enum \fBOrg\&.BouncyCastle\&.Utilities\&.Zlib\&.InflateCodeMode\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.PP
Definition at line 39 of file InfCodes\&.cs\&.
.SS "enum \fBOrg\&.BouncyCastle\&.Utilities\&.Zlib\&.InflateCodeMode\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.PP
Definition at line 40 of file InflateCodes\&.cs\&.
.SS "enum \fBOrg\&.BouncyCastle\&.Utilities\&.Zlib\&.InflateCodeMode\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.PP
Definition at line 40 of file InflateCodes\&.cs\&.
.SS "enum \fBOrg\&.BouncyCastle\&.Utilities\&.Zlib\&.InflateCodeMode\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.PP
Definition at line 40 of file InflateCodes\&.cs\&.
.SS "enum \fBOrg\&.BouncyCastle\&.Utilities\&.Zlib\&.InflateCodeMode\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.PP
Definition at line 40 of file InflateCodes\&.cs\&.
.SS "enum \fBOrg\&.BouncyCastle\&.Utilities\&.Zlib\&.InflateCodeMode\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.PP
Definition at line 40 of file InflateCodes\&.cs\&.
.SS "enum \fBOrg\&.BouncyCastle\&.Utilities\&.Zlib\&.InflateCodeMode\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.PP
Definition at line 40 of file InflateCodes\&.cs\&.
.SS "enum \fBOrg\&.BouncyCastle\&.Utilities\&.Zlib\&.InflateCodeMode\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.PP
Definition at line 40 of file InflateCodes\&.cs\&.
.SS "enum \fBOrg\&.BouncyCastle\&.Utilities\&.Zlib\&.InflateCodeMode\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.PP
Definition at line 40 of file InflateCodes\&.cs\&.
.SS "enum \fBOrg\&.BouncyCastle\&.Utilities\&.Zlib\&.InflateCodeMode\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.PP
Definition at line 40 of file InflateCodes\&.cs\&.
.SS "enum \fBOrg\&.BouncyCastle\&.Utilities\&.Zlib\&.InflateCodeMode\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.PP
Definition at line 40 of file InflateCodes\&.cs\&.
.SS "enum \fBOrg\&.BouncyCastle\&.Utilities\&.Zlib\&.InflateCodeMode\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.TP
\fB\fISTART \fP\fP
x: set up for InflateCodeMode\&.LEN 
.TP
\fB\fILEN \fP\fP
i: get length/literal/eob next 
.TP
\fB\fILENEXT \fP\fP
i: getting length extra (have base) 
.TP
\fB\fIDIST \fP\fP
i: get distance next 
.TP
\fB\fIDISTEXT \fP\fP
: getting distance extra 
.TP
\fB\fICOPY \fP\fP
o: copying bytes in window, waiting for space 
.TP
\fB\fILIT \fP\fP
o: got literal, waiting for output space 
.TP
\fB\fIWASH \fP\fP
o: got eob, possibly still output waiting 
.TP
\fB\fIEND \fP\fP
x: got eob and all data flushed 
.TP
\fB\fIBADCODE \fP\fP
x: got error 
.PP
Definition at line 84 of file InfBlocks\&.cs\&.
.SS "enum \fBOrg\&.BouncyCastle\&.Utilities\&.Zlib\&.InflateMode\fP : int"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.PP
Definition at line 40 of file Inflate\&.cs\&.
.SS "enum \fBOrg\&.BouncyCastle\&.Utilities\&.Zlib\&.InflateMode\fP : int"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.PP
Definition at line 40 of file Inflate\&.cs\&.
.SS "enum \fBOrg\&.BouncyCastle\&.Utilities\&.Zlib\&.InflateMode\fP : int"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.PP
Definition at line 40 of file Inflate\&.cs\&.
.SS "enum \fBOrg\&.BouncyCastle\&.Utilities\&.Zlib\&.InflateMode\fP : int"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.PP
Definition at line 40 of file Inflate\&.cs\&.
.SS "enum \fBOrg\&.BouncyCastle\&.Utilities\&.Zlib\&.InflateMode\fP : int"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.PP
Definition at line 40 of file Inflate\&.cs\&.
.SS "enum \fBOrg\&.BouncyCastle\&.Utilities\&.Zlib\&.InflateMode\fP : int"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.PP
Definition at line 40 of file Inflate\&.cs\&.
.SS "enum \fBOrg\&.BouncyCastle\&.Utilities\&.Zlib\&.InflateMode\fP : int"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.PP
Definition at line 40 of file Inflate\&.cs\&.
.SS "enum \fBOrg\&.BouncyCastle\&.Utilities\&.Zlib\&.InflateMode\fP : int"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.PP
Definition at line 40 of file Inflate\&.cs\&.
.SS "enum \fBOrg\&.BouncyCastle\&.Utilities\&.Zlib\&.InflateMode\fP : int"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.PP
Definition at line 40 of file Inflate\&.cs\&.
.SS "enum \fBOrg\&.BouncyCastle\&.Utilities\&.Zlib\&.InflateMode\fP : int"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.TP
\fB\fIMETHOD \fP\fP
waiting for method byte 
.TP
\fB\fIFLAG \fP\fP
waiting for flag byte 
.TP
\fB\fIDICT4 \fP\fP
four dictionary check bytes to go 
.TP
\fB\fIDICT3 \fP\fP
three dictionary check bytes to go 
.TP
\fB\fIDICT2 \fP\fP
two dictionary check bytes to go 
.TP
\fB\fIDICT1 \fP\fP
one dictionary check byte to go 
.TP
\fB\fIDICT0 \fP\fP
waiting for inflateSetDictionary 
.TP
\fB\fIBLOCKS \fP\fP
decompressing blocks 
.TP
\fB\fICHECK4 \fP\fP
four check bytes to go 
.TP
\fB\fICHECK3 \fP\fP
three check bytes to go 
.TP
\fB\fICHECK2 \fP\fP
two check bytes to go 
.TP
\fB\fICHECK1 \fP\fP
one check byte to go 
.TP
\fB\fIDONE \fP\fP
finished check, done 
.TP
\fB\fIBAD \fP\fP
got an error--stay here 
.PP
Definition at line 40 of file Inflate\&.cs\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for HSA\&.InfoSys from the source code\&.
