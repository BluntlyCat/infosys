.TH "NHibernate.Event" 3 "Fri Jul 5 2013" "Version 1.0" "HSA.InfoSys" \" -*- nroff -*-
.ad l
.nh
.SH NAME
NHibernate.Event \- 
.SH SYNOPSIS
.br
.PP
.SS "Namespaces"

.in +1c
.ti -1c
.RI "package \fBDefault\fP"
.br
.in -1c
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBAbstractCollectionEvent\fP"
.br
.RI "\fIDefines a base class for events involving collections\&. \fP"
.ti -1c
.RI "class \fBAbstractEvent\fP"
.br
.RI "\fIDefines a base class for Session generated events\&. \fP"
.ti -1c
.RI "class \fBAbstractPostDatabaseOperationEvent\fP"
.br
.RI "\fIRepresents an operation we performed against the database\&. \fP"
.ti -1c
.RI "class \fBAbstractPreDatabaseOperationEvent\fP"
.br
.RI "\fIRepresents an operation we are about to perform against the database\&. \fP"
.ti -1c
.RI "class \fBAutoFlushEvent\fP"
.br
.RI "\fIDefines an event class for the auto-flushing of a session\&. \fP"
.ti -1c
.RI "class \fBDeleteEvent\fP"
.br
.RI "\fIDefines an event class for the deletion of an entity\&. \fP"
.ti -1c
.RI "class \fBDirtyCheckEvent\fP"
.br
.RI "\fIDefines an event class for the dirty-checking of a session\&. \fP"
.ti -1c
.RI "class \fBEventListeners\fP"
.br
.RI "\fIA convience holder for all defined session event listeners\&. \fP"
.ti -1c
.RI "class \fBEvictEvent\fP"
.br
.RI "\fIDefines an event class for the evicting of an entity\&. \fP"
.ti -1c
.RI "class \fBFlushEntityEvent\fP"
.br
.ti -1c
.RI "class \fBFlushEvent\fP"
.br
.RI "\fIDefines an event class for the flushing of a session\&. \fP"
.ti -1c
.RI "interface \fBIAutoFlushEventListener\fP"
.br
.RI "\fIDefines the contract for handling of session auto-flush events\&. \fP"
.ti -1c
.RI "interface \fBIDatabaseEventArgs\fP"
.br
.ti -1c
.RI "interface \fBIDeleteEventListener\fP"
.br
.RI "\fIDefines the contract for handling of deletion events generated from a session\&. \fP"
.ti -1c
.RI "interface \fBIDestructible\fP"
.br
.RI "\fIContract for listeners which require notification of SessionFactory closing, presumably to destroy internal state\&. \fP"
.ti -1c
.RI "interface \fBIDirtyCheckEventListener\fP"
.br
.RI "\fIDefines the contract for handling of session dirty-check events\&.\fP"
.ti -1c
.RI "interface \fBIEventSource\fP"
.br
.ti -1c
.RI "interface \fBIEvictEventListener\fP"
.br
.RI "\fIDefines the contract for handling of evict events generated from a session\&. \fP"
.ti -1c
.RI "interface \fBIFlushEntityEventListener\fP"
.br
.ti -1c
.RI "interface \fBIFlushEventListener\fP"
.br
.RI "\fIDefines the contract for handling of session flush events\&. \fP"
.ti -1c
.RI "interface \fBIInitializable\fP"
.br
.RI "\fIAn event listener that requires access to mappings to initialize state at initialization time\&. \fP"
.ti -1c
.RI "interface \fBIInitializeCollectionEventListener\fP"
.br
.RI "\fIDefines the contract for handling of collection initialization events generated by a session\&. \fP"
.ti -1c
.RI "interface \fBILoadEventListener\fP"
.br
.RI "\fIDefines the contract for handling of load events generated from a session\&. \fP"
.ti -1c
.RI "interface \fBILockEventListener\fP"
.br
.RI "\fIDefines the contract for handling of lock events generated from a session\&. \fP"
.ti -1c
.RI "interface \fBIMergeEventListener\fP"
.br
.RI "\fIDefines the contract for handling of merge events generated from a session\&. \fP"
.ti -1c
.RI "class \fBInitializeCollectionEvent\fP"
.br
.RI "\fIAn event that occurs when a collection wants to be initialized \fP"
.ti -1c
.RI "interface \fBIPersistEventListener\fP"
.br
.RI "\fIDefines the contract for handling of create events generated from a session\&. \fP"
.ti -1c
.RI "interface \fBIPostCollectionRecreateEventListener\fP"
.br
.RI "\fICalled after recreating a collection \fP"
.ti -1c
.RI "interface \fBIPostCollectionRemoveEventListener\fP"
.br
.RI "\fICalled after removing a collection \fP"
.ti -1c
.RI "interface \fBIPostCollectionUpdateEventListener\fP"
.br
.RI "\fICalled after updating a collection \fP"
.ti -1c
.RI "interface \fBIPostDatabaseOperationEventArgs\fP"
.br
.RI "\fIRepresents an operation we performed against the database\&. \fP"
.ti -1c
.RI "interface \fBIPostDeleteEventListener\fP"
.br
.RI "\fICalled after deleting an item from the datastore \fP"
.ti -1c
.RI "interface \fBIPostInsertEventListener\fP"
.br
.RI "\fICalled after inserting an item in the datastore \fP"
.ti -1c
.RI "interface \fBIPostLoadEventListener\fP"
.br
.RI "\fIOccurs after an an entity instance is fully loaded\&. \fP"
.ti -1c
.RI "interface \fBIPostUpdateEventListener\fP"
.br
.RI "\fICalled after updating the datastore \fP"
.ti -1c
.RI "interface \fBIPreCollectionRecreateEventListener\fP"
.br
.RI "\fICalled before recreating a collection \fP"
.ti -1c
.RI "interface \fBIPreCollectionRemoveEventListener\fP"
.br
.RI "\fICalled before removing a collection \fP"
.ti -1c
.RI "interface \fBIPreCollectionUpdateEventListener\fP"
.br
.RI "\fICalled before updating a collection \fP"
.ti -1c
.RI "interface \fBIPreDatabaseOperationEventArgs\fP"
.br
.ti -1c
.RI "interface \fBIPreDeleteEventListener\fP"
.br
.RI "\fICalled before deleting an item from the datastore \fP"
.ti -1c
.RI "interface \fBIPreInsertEventListener\fP"
.br
.RI "\fICalled before inserting an item in the datastore \fP"
.ti -1c
.RI "interface \fBIPreLoadEventListener\fP"
.br
.RI "\fICalled before injecting property values into a newly loaded entity instance\&. \fP"
.ti -1c
.RI "interface \fBIPreUpdateEventListener\fP"
.br
.RI "\fICalled before updating the datastore \fP"
.ti -1c
.RI "interface \fBIRefreshEventListener\fP"
.br
.RI "\fIDefines the contract for handling of refresh events generated from a session\&. \fP"
.ti -1c
.RI "interface \fBIReplicateEventListener\fP"
.br
.RI "\fIDefines the contract for handling of replicate events generated from a session\&. \fP"
.ti -1c
.RI "interface \fBISaveOrUpdateEventListener\fP"
.br
.RI "\fIDefines the contract for handling of update events generated from a session\&. \fP"
.ti -1c
.RI "class \fBLoadEvent\fP"
.br
.RI "\fIDefines an event class for the loading of an entity\&. \fP"
.ti -1c
.RI "class \fBLoadEventListener\fP"
.br
.ti -1c
.RI "class \fBLoadType\fP"
.br
.ti -1c
.RI "class \fBLockEvent\fP"
.br
.RI "\fIDefines an event class for the locking of an entity\&. \fP"
.ti -1c
.RI "class \fBMergeEvent\fP"
.br
.RI "\fIAn event class for merge() and saveOrUpdateCopy() \fP"
.ti -1c
.RI "class \fBPersistEvent\fP"
.br
.RI "\fIAn event class for persist() \fP"
.ti -1c
.RI "class \fBPostCollectionRecreateEvent\fP"
.br
.RI "\fIAn event that occurs after a collection is recreated \fP"
.ti -1c
.RI "class \fBPostCollectionRemoveEvent\fP"
.br
.RI "\fIAn event that occurs after a collection is removed \fP"
.ti -1c
.RI "class \fBPostCollectionUpdateEvent\fP"
.br
.RI "\fIAn event that occurs after a collection is updated \fP"
.ti -1c
.RI "class \fBPostDeleteEvent\fP"
.br
.RI "\fIOccurs after deleting an item from the datastore \fP"
.ti -1c
.RI "class \fBPostInsertEvent\fP"
.br
.RI "\fIOccurs after inserting an item in the datastore \fP"
.ti -1c
.RI "class \fBPostLoadEvent\fP"
.br
.RI "\fIOccurs after an an entity instance is fully loaded\&. \fP"
.ti -1c
.RI "class \fBPostUpdateEvent\fP"
.br
.RI "\fIOccurs after the datastore is updated \fP"
.ti -1c
.RI "class \fBPreCollectionRecreateEvent\fP"
.br
.RI "\fIAn event that occurs before a collection is recreated \fP"
.ti -1c
.RI "class \fBPreCollectionRemoveEvent\fP"
.br
.RI "\fIAn event that occurs before a collection is removed \fP"
.ti -1c
.RI "class \fBPreCollectionUpdateEvent\fP"
.br
.RI "\fIAn event that occurs before a collection is updated \fP"
.ti -1c
.RI "class \fBPreDeleteEvent\fP"
.br
.RI "\fIRepresents a \fCpre-delete\fP event, which occurs just prior to performing the deletion of an entity from the database\&. \fP"
.ti -1c
.RI "class \fBPreInsertEvent\fP"
.br
.RI "\fIRepresents a \fCpre-insert\fP event, which occurs just prior to performing the insert of an entity into the database\&. \fP"
.ti -1c
.RI "class \fBPreLoadEvent\fP"
.br
.RI "\fICalled before injecting property values into a newly loaded entity instance\&. \fP"
.ti -1c
.RI "class \fBPreUpdateEvent\fP"
.br
.RI "\fIRepresents a \fCpre-update\fP event, which occurs just prior to performing the update of an entity in the database\&. \fP"
.ti -1c
.RI "class \fBRefreshEvent\fP"
.br
.RI "\fIDefines an event class for the refreshing of an object\&. \fP"
.ti -1c
.RI "class \fBReplicateEvent\fP"
.br
.RI "\fIDefines an event class for the replication of an entity\&. \fP"
.ti -1c
.RI "class \fBSaveOrUpdateEvent\fP"
.br
.RI "\fIAn event class for saveOrUpdate() \fP"
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBListenerType\fP { \fBListenerType\&.NotValidType\fP, \fBListenerType\&.Autoflush\fP, \fBListenerType\&.Merge\fP, \fBListenerType\&.Create\fP, \fBListenerType\&.CreateOnFlush\fP, \fBListenerType\&.Delete\fP, \fBListenerType\&.DirtyCheck\fP, \fBListenerType\&.Evict\fP, \fBListenerType\&.Flush\fP, \fBListenerType\&.FlushEntity\fP, \fBListenerType\&.Load\fP, \fBListenerType\&.LoadCollection\fP, \fBListenerType\&.Lock\fP, \fBListenerType\&.Refresh\fP, \fBListenerType\&.Replicate\fP, \fBListenerType\&.SaveUpdate\fP, \fBListenerType\&.Save\fP, \fBListenerType\&.PreUpdate\fP, \fBListenerType\&.Update\fP, \fBListenerType\&.PreLoad\fP, \fBListenerType\&.PreDelete\fP, \fBListenerType\&.PreInsert\fP, \fBListenerType\&.PreCollectionRecreate\fP, \fBListenerType\&.PreCollectionRemove\fP, \fBListenerType\&.PreCollectionUpdate\fP, \fBListenerType\&.PostLoad\fP, \fBListenerType\&.PostInsert\fP, \fBListenerType\&.PostUpdate\fP, \fBListenerType\&.PostDelete\fP, \fBListenerType\&.PostCommitUpdate\fP, \fBListenerType\&.PostCommitInsert\fP, \fBListenerType\&.PostCommitDelete\fP, \fBListenerType\&.PostCollectionRecreate\fP, \fBListenerType\&.PostCollectionRemove\fP, \fBListenerType\&.PostCollectionUpdate\fP }"
.br
.RI "\fIValues for listener type property\&. \fP"
.in -1c
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBNHibernate\&.Event\&.ListenerType\fP"

.PP
Values for listener type property\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fINotValidType \fP\fP
Not allowed in Xml\&. It represents the default value when an explicit type is assigned\&.
.TP
\fB\fIAutoflush \fP\fP
Xml value: auto-flush
.TP
\fB\fIMerge \fP\fP
Xml value: merge
.TP
\fB\fICreate \fP\fP
Xml value: create
.TP
\fB\fICreateOnFlush \fP\fP
Xml value: create-onflush
.TP
\fB\fIDelete \fP\fP
Xml value: delete
.TP
\fB\fIDirtyCheck \fP\fP
Xml value: dirty-check
.TP
\fB\fIEvict \fP\fP
Xml value: evict
.TP
\fB\fIFlush \fP\fP
Xml value: flush
.TP
\fB\fIFlushEntity \fP\fP
Xml value: flush-entity
.TP
\fB\fILoad \fP\fP
Xml value: load
.TP
\fB\fILoadCollection \fP\fP
Xml value: load-collection
.TP
\fB\fILock \fP\fP
Xml value: lock
.TP
\fB\fIRefresh \fP\fP
Xml value: refresh
.TP
\fB\fIReplicate \fP\fP
Xml value: replicate
.TP
\fB\fISaveUpdate \fP\fP
Xml value: save-update
.TP
\fB\fISave \fP\fP
Xml value: save
.TP
\fB\fIPreUpdate \fP\fP
Xml value: pre-update
.TP
\fB\fIUpdate \fP\fP
Xml value: update
.TP
\fB\fIPreLoad \fP\fP
Xml value: pre-load
.TP
\fB\fIPreDelete \fP\fP
Xml value: pre-delete
.TP
\fB\fIPreInsert \fP\fP
Xml value: pre-insert
.TP
\fB\fIPreCollectionRecreate \fP\fP
Xml value: pre-collection-recreate 
.TP
\fB\fIPreCollectionRemove \fP\fP
Xml value: pre-collection-remove 
.TP
\fB\fIPreCollectionUpdate \fP\fP
Xml value: pre-collection-update 
.TP
\fB\fIPostLoad \fP\fP
Xml value: post-load
.TP
\fB\fIPostInsert \fP\fP
Xml value: post-insert
.TP
\fB\fIPostUpdate \fP\fP
Xml value: post-update
.TP
\fB\fIPostDelete \fP\fP
Xml value: post-delete
.TP
\fB\fIPostCommitUpdate \fP\fP
Xml value: post-commit-update
.TP
\fB\fIPostCommitInsert \fP\fP
Xml value: post-commit-insert
.TP
\fB\fIPostCommitDelete \fP\fP
Xml value: post-commit-delete
.TP
\fB\fIPostCollectionRecreate \fP\fP
Xml value: post-collection-recreate 
.TP
\fB\fIPostCollectionRemove \fP\fP
Xml value: post-collection-remove 
.TP
\fB\fIPostCollectionUpdate \fP\fP
Xml value: post-collection-update 
.PP
Definition at line 6 of file ListenerType\&.cs\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for HSA\&.InfoSys from the source code\&.
