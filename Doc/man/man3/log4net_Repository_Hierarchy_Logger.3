.TH "log4net.Repository.Hierarchy.Logger" 3 "Fri Jul 5 2013" "Version 1.0" "HSA.InfoSys" \" -*- nroff -*-
.ad l
.nh
.SH NAME
log4net.Repository.Hierarchy.Logger \- 
.PP
Implementation of ILogger used by \fBHierarchy\fP  

.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBlog4net\&.Core\&.IAppenderAttachable\fP, and \fBlog4net\&.Core\&.ILogger\fP\&.
.PP
Inherited by log4net\&.Repository\&.Hierarchy\&.DefaultLoggerFactory\&.LoggerImpl, and \fBlog4net\&.Repository\&.Hierarchy\&.RootLogger\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual void \fBAddAppender\fP (\fBIAppender\fP newAppender)"
.br
.RI "\fIAdd \fInewAppender\fP  to the list of appenders of this \fBLogger\fP instance\&. \fP"
.ti -1c
.RI "virtual \fBIAppender\fP \fBGetAppender\fP (string name)"
.br
.RI "\fILook for the appender named as \fCname\fP \fP"
.ti -1c
.RI "virtual void \fBRemoveAllAppenders\fP ()"
.br
.RI "\fIRemove all previously added appenders from this \fBLogger\fP instance\&. \fP"
.ti -1c
.RI "virtual \fBIAppender\fP \fBRemoveAppender\fP (\fBIAppender\fP appender)"
.br
.RI "\fIRemove the appender passed as parameter form the list of appenders\&. \fP"
.ti -1c
.RI "virtual \fBIAppender\fP \fBRemoveAppender\fP (string name)"
.br
.RI "\fIRemove the appender passed as parameter form the list of appenders\&. \fP"
.ti -1c
.RI "virtual void \fBLog\fP (Type callerStackBoundaryDeclaringType, \fBLevel\fP level, object message, Exception exception)"
.br
.RI "\fIThis generic form is intended to be used by wrappers\&. \fP"
.ti -1c
.RI "virtual void \fBLog\fP (\fBLoggingEvent\fP logEvent)"
.br
.RI "\fIThis is the most generic printing method that is intended to be used by wrappers\&. \fP"
.ti -1c
.RI "virtual bool \fBIsEnabledFor\fP (\fBLevel\fP level)"
.br
.RI "\fIChecks if this logger is enabled for a given \fBLevel\fP passed as parameter\&. \fP"
.ti -1c
.RI "virtual void \fBCloseNestedAppenders\fP ()"
.br
.RI "\fICloses all attached appenders implementing the IAppenderAttachable interface\&. \fP"
.ti -1c
.RI "virtual void \fBLog\fP (\fBLevel\fP level, object message, Exception exception)"
.br
.RI "\fIThis is the most generic printing method\&. This generic form is intended to be used by wrappers \fP"
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBLogger\fP (string name)"
.br
.RI "\fIThis constructor created a new \fBLogger\fP instance and sets its name\&. \fP"
.ti -1c
.RI "virtual void \fBCallAppenders\fP (\fBLoggingEvent\fP loggingEvent)"
.br
.RI "\fIDeliver the LoggingEvent to the attached appenders\&. \fP"
.ti -1c
.RI "virtual void \fBForcedLog\fP (Type callerStackBoundaryDeclaringType, \fBLevel\fP level, object message, Exception exception)"
.br
.RI "\fICreates a new logging event and logs the event without further checks\&. \fP"
.ti -1c
.RI "virtual void \fBForcedLog\fP (\fBLoggingEvent\fP logEvent)"
.br
.RI "\fICreates a new logging event and logs the event without further checks\&. \fP"
.in -1c
.SS "Properties"

.in +1c
.ti -1c
.RI "virtual \fBLogger\fP \fBParent\fP\fC [get, set]\fP"
.br
.RI "\fIGets or sets the parent logger in the hierarchy\&. \fP"
.ti -1c
.RI "virtual bool \fBAdditivity\fP\fC [get, set]\fP"
.br
.RI "\fIGets or sets a value indicating if child loggers inherit their parent's appenders\&. \fP"
.ti -1c
.RI "virtual \fBLevel\fP \fBEffectiveLevel\fP\fC [get]\fP"
.br
.RI "\fIGets the effective level for this logger\&. \fP"
.ti -1c
.RI "virtual \fBHierarchy\fP \fBHierarchy\fP\fC [get, set]\fP"
.br
.RI "\fIGets or sets the \fBHierarchy\fP where this \fC\fBLogger\fP\fP instance is attached to\&. \fP"
.ti -1c
.RI "virtual \fBLevel\fP \fBLevel\fP\fC [get, set]\fP"
.br
.RI "\fIGets or sets the assigned \fBLevel\fP, if any, for this \fBLogger\fP\&. \fP"
.ti -1c
.RI "virtual \fBAppenderCollection\fP \fBAppenders\fP\fC [get]\fP"
.br
.RI "\fIGet the appenders contained in this logger as an System\&.Collections\&.ICollection\&. \fP"
.ti -1c
.RI "virtual string \fBName\fP\fC [get]\fP"
.br
.RI "\fIGets the logger name\&. \fP"
.ti -1c
.RI "\fBILoggerRepository\fP \fBRepository\fP\fC [get]\fP"
.br
.RI "\fIGets the \fBILoggerRepository\fP where this \fC\fBLogger\fP\fP instance is attached to\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Implementation of ILogger used by \fBHierarchy\fP 

Internal class used to provide implementation of ILogger interface\&. Applications should use \fBLogManager\fP to get logger instances\&. 
.PP
This is one of the central classes in the \fBlog4net\fP implementation\&. One of the distinctive features of \fBlog4net\fP are hierarchical loggers and their evaluation\&. The \fBHierarchy\fP organizes the \fBLogger\fP instances into a rooted tree hierarchy\&. 
.PP
The \fBLogger\fP class is abstract\&. Only concrete subclasses of \fBLogger\fP can be created\&. The \fBILoggerFactory\fP is used to create instances of this type for the \fBHierarchy\fP\&. 
.PP
<author>Nicko Cadell</author> <author>Gert Driesen</author> <author>Aspi Havewala</author> <author>Douglas de la Torre</author> 
.PP
Definition at line 54 of file Logger\&.cs\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "log4net\&.Repository\&.Hierarchy\&.Logger\&.Logger (stringname)\fC [protected]\fP"

.PP
This constructor created a new \fBLogger\fP instance and sets its name\&. 
.PP
\fBParameters:\fP
.RS 4
\fIname\fP The name of the \fBLogger\fP\&.
.RE
.PP
.PP
This constructor is protected and designed to be used by a subclass that is not abstract\&. 
.PP
Loggers are constructed by \fBILoggerFactory\fP objects\&. See DefaultLoggerFactory for the default logger creator\&. 
.PP
Definition at line 74 of file Logger\&.cs\&.
.SH "Member Function Documentation"
.PP 
.SS "virtual void log4net\&.Repository\&.Hierarchy\&.Logger\&.AddAppender (\fBIAppender\fPnewAppender)\fC [virtual]\fP"

.PP
Add \fInewAppender\fP  to the list of appenders of this \fBLogger\fP instance\&. 
.PP
\fBParameters:\fP
.RS 4
\fInewAppender\fP An appender to add to this logger
.RE
.PP
.PP
Add \fInewAppender\fP  to the list of appenders of this \fBLogger\fP instance\&. 
.PP
If \fInewAppender\fP  is already in the list of appenders, then it won't be added again\&. 
.PP
Implements \fBlog4net\&.Core\&.IAppenderAttachable\fP\&.
.PP
Definition at line 212 of file Logger\&.cs\&.
.SS "virtual void log4net\&.Repository\&.Hierarchy\&.Logger\&.CallAppenders (\fBLoggingEvent\fPloggingEvent)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Deliver the LoggingEvent to the attached appenders\&. 
.PP
\fBParameters:\fP
.RS 4
\fIloggingEvent\fP The event to log\&.
.RE
.PP
.PP
Call the appenders in the hierarchy starting at \fCthis\fP\&. If no appenders could be found, emit a warning\&. 
.PP
This method calls all the appenders inherited from the hierarchy circumventing any evaluation of whether to log or not to log the particular log request\&. 
.PP
Definition at line 557 of file Logger\&.cs\&.
.SS "virtual void log4net\&.Repository\&.Hierarchy\&.Logger\&.CloseNestedAppenders ()\fC [virtual]\fP"

.PP
Closes all attached appenders implementing the IAppenderAttachable interface\&. Used to ensure that the appenders are correctly shutdown\&. 
.PP
Definition at line 629 of file Logger\&.cs\&.
.SS "virtual void log4net\&.Repository\&.Hierarchy\&.Logger\&.ForcedLog (TypecallerStackBoundaryDeclaringType, \fBLevel\fPlevel, objectmessage, Exceptionexception)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Creates a new logging event and logs the event without further checks\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcallerStackBoundaryDeclaringType\fP The declaring type of the method that is the stack boundary into the logging system for this call\&.
.br
\fIlevel\fP The level of the message to be logged\&.
.br
\fImessage\fP The message object to log\&.
.br
\fIexception\fP The exception to log, including its stack trace\&.
.RE
.PP
.PP
Generates a logging event and delivers it to the attached appenders\&. 
.PP
Definition at line 686 of file Logger\&.cs\&.
.SS "virtual void log4net\&.Repository\&.Hierarchy\&.Logger\&.ForcedLog (\fBLoggingEvent\fPlogEvent)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Creates a new logging event and logs the event without further checks\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlogEvent\fP The event being logged\&.
.RE
.PP
.PP
Delivers the logging event to the attached appenders\&. 
.PP
Definition at line 700 of file Logger\&.cs\&.
.SS "virtual \fBIAppender\fP log4net\&.Repository\&.Hierarchy\&.Logger\&.GetAppender (stringname)\fC [virtual]\fP"

.PP
Look for the appender named as \fCname\fP 
.PP
\fBParameters:\fP
.RS 4
\fIname\fP The name of the appender to lookup
.RE
.PP
\fBReturns:\fP
.RS 4
The appender with the name specified, or \fCnull\fP\&.
.RE
.PP
.PP
Returns the named appender, or null if the appender is not found\&. 
.PP
Implements \fBlog4net\&.Core\&.IAppenderAttachable\fP\&.
.PP
Definition at line 279 of file Logger\&.cs\&.
.SS "virtual bool log4net\&.Repository\&.Hierarchy\&.Logger\&.IsEnabledFor (\fBLevel\fPlevel)\fC [virtual]\fP"

.PP
Checks if this logger is enabled for a given \fBLevel\fP passed as parameter\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlevel\fP The level to check\&.
.RE
.PP
\fBReturns:\fP
.RS 4
\fCtrue\fP if this logger is enabled for \fClevel\fP, otherwise \fCfalse\fP\&. 
.RE
.PP
.PP
Test if this logger is going to log events of the specified \fIlevel\fP \&. 
.PP
This method must not throw any exception to the caller\&. 
.PP
Implements \fBlog4net\&.Core\&.ILogger\fP\&.
.PP
Definition at line 495 of file Logger\&.cs\&.
.SS "virtual void log4net\&.Repository\&.Hierarchy\&.Logger\&.Log (TypecallerStackBoundaryDeclaringType, \fBLevel\fPlevel, objectmessage, Exceptionexception)\fC [virtual]\fP"

.PP
This generic form is intended to be used by wrappers\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcallerStackBoundaryDeclaringType\fP The declaring type of the method that is the stack boundary into the logging system for this call\&.
.br
\fIlevel\fP The level of the message to be logged\&.
.br
\fImessage\fP The message object to log\&.
.br
\fIexception\fP The exception to log, including its stack trace\&.
.RE
.PP
.PP
Generate a logging event for the specified \fIlevel\fP  using the \fImessage\fP  and \fIexception\fP \&. 
.PP
This method must not throw any exception to the caller\&. 
.PP
Implements \fBlog4net\&.Core\&.ILogger\fP\&.
.PP
Definition at line 422 of file Logger\&.cs\&.
.SS "virtual void log4net\&.Repository\&.Hierarchy\&.Logger\&.Log (\fBLoggingEvent\fPlogEvent)\fC [virtual]\fP"

.PP
This is the most generic printing method that is intended to be used by wrappers\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlogEvent\fP The event being logged\&.
.RE
.PP
.PP
Logs the specified logging event through this logger\&. 
.PP
This method must not throw any exception to the caller\&. 
.PP
Implements \fBlog4net\&.Core\&.ILogger\fP\&.
.PP
Definition at line 456 of file Logger\&.cs\&.
.SS "virtual void log4net\&.Repository\&.Hierarchy\&.Logger\&.Log (\fBLevel\fPlevel, objectmessage, Exceptionexception)\fC [virtual]\fP"

.PP
This is the most generic printing method\&. This generic form is intended to be used by wrappers 
.PP
\fBParameters:\fP
.RS 4
\fIlevel\fP The level of the message to be logged\&.
.br
\fImessage\fP The message object to log\&.
.br
\fIexception\fP The exception to log, including its stack trace\&.
.RE
.PP
.PP
Generate a logging event for the specified \fIlevel\fP  using the \fImessage\fP \&. 
.PP
Definition at line 664 of file Logger\&.cs\&.
.SS "virtual void log4net\&.Repository\&.Hierarchy\&.Logger\&.RemoveAllAppenders ()\fC [virtual]\fP"

.PP
Remove all previously added appenders from this \fBLogger\fP instance\&. Remove all previously added appenders from this \fBLogger\fP instance\&. 
.PP
This is useful when re-reading configuration information\&. 
.PP
Implements \fBlog4net\&.Core\&.IAppenderAttachable\fP\&.
.PP
Definition at line 308 of file Logger\&.cs\&.
.SS "virtual \fBIAppender\fP log4net\&.Repository\&.Hierarchy\&.Logger\&.RemoveAppender (\fBIAppender\fPappender)\fC [virtual]\fP"

.PP
Remove the appender passed as parameter form the list of appenders\&. 
.PP
\fBParameters:\fP
.RS 4
\fIappender\fP The appender to remove
.RE
.PP
\fBReturns:\fP
.RS 4
The appender removed from the list
.RE
.PP
.PP
Remove the appender passed as parameter form the list of appenders\&. The appender removed is not closed\&. If you are discarding the appender you must call IAppender\&.Close on the appender removed\&. 
.PP
Implements \fBlog4net\&.Core\&.IAppenderAttachable\fP\&.
.PP
Definition at line 338 of file Logger\&.cs\&.
.SS "virtual \fBIAppender\fP log4net\&.Repository\&.Hierarchy\&.Logger\&.RemoveAppender (stringname)\fC [virtual]\fP"

.PP
Remove the appender passed as parameter form the list of appenders\&. 
.PP
\fBParameters:\fP
.RS 4
\fIname\fP The name of the appender to remove
.RE
.PP
\fBReturns:\fP
.RS 4
The appender removed from the list
.RE
.PP
.PP
Remove the named appender passed as parameter form the list of appenders\&. The appender removed is not closed\&. If you are discarding the appender you must call IAppender\&.Close on the appender removed\&. 
.PP
Implements \fBlog4net\&.Core\&.IAppenderAttachable\fP\&.
.PP
Definition at line 368 of file Logger\&.cs\&.
.SH "Property Documentation"
.PP 
.SS "virtual bool log4net\&.Repository\&.Hierarchy\&.Logger\&.Additivity\fC [get]\fP, \fC [set]\fP"

.PP
Gets or sets a value indicating if child loggers inherit their parent's appenders\&. \fCtrue\fP if child loggers inherit their parent's appenders\&. 
.PP
Additivity is set to \fCtrue\fP by default, that is children inherit the appenders of their ancestors by default\&. If this variable is set to \fCfalse\fP then the appenders found in the ancestors of this logger are not used\&. However, the children of this logger will inherit its appenders, unless the children have their additivity flag set to \fCfalse\fP too\&. See the user manual for more details\&. 
.PP
Definition at line 124 of file Logger\&.cs\&.
.SS "virtual \fBAppenderCollection\fP log4net\&.Repository\&.Hierarchy\&.Logger\&.Appenders\fC [get]\fP"

.PP
Get the appenders contained in this logger as an System\&.Collections\&.ICollection\&. 
.PP
\fBReturns:\fP
.RS 4
A collection of the appenders in this logger
.RE
.PP
.PP
Get the appenders contained in this logger as an System\&.Collections\&.ICollection\&. If no appenders can be found, then a EmptyCollection is returned\&. 
.PP
Definition at line 247 of file Logger\&.cs\&.
.SS "virtual \fBLevel\fP log4net\&.Repository\&.Hierarchy\&.Logger\&.EffectiveLevel\fC [get]\fP"

.PP
Gets the effective level for this logger\&. 
.PP
\fBReturns:\fP
.RS 4
The nearest level in the logger hierarchy\&.
.RE
.PP
.PP
Starting from this logger, searches the logger hierarchy for a non-null level and returns it\&. Otherwise, returns the level of the root logger\&. 
.PP
The \fBLogger\fP class is designed so that this method executes as quickly as possible\&.
.PP
Definition at line 143 of file Logger\&.cs\&.
.SS "virtual \fBHierarchy\fP log4net\&.Repository\&.Hierarchy\&.Logger\&.Hierarchy\fC [get]\fP, \fC [set]\fP"

.PP
Gets or sets the \fBHierarchy\fP where this \fC\fBLogger\fP\fP instance is attached to\&. The hierarchy that this logger belongs to\&.
.PP
This logger must be attached to a single \fBHierarchy\fP\&. 
.PP
Definition at line 171 of file Logger\&.cs\&.
.SS "virtual \fBLevel\fP log4net\&.Repository\&.Hierarchy\&.Logger\&.Level\fC [get]\fP, \fC [set]\fP"

.PP
Gets or sets the assigned \fBLevel\fP, if any, for this \fBLogger\fP\&. The \fBLevel\fP of this logger\&. 
.PP
The assigned \fBLevel\fP can be \fCnull\fP\&. 
.PP
Definition at line 188 of file Logger\&.cs\&.
.SS "virtual string log4net\&.Repository\&.Hierarchy\&.Logger\&.Name\fC [get]\fP"

.PP
Gets the logger name\&. The name of the logger\&. 
.PP
The name of this logger 
.PP
Definition at line 401 of file Logger\&.cs\&.
.SS "virtual \fBLogger\fP log4net\&.Repository\&.Hierarchy\&.Logger\&.Parent\fC [get]\fP, \fC [set]\fP"

.PP
Gets or sets the parent logger in the hierarchy\&. The parent logger in the hierarchy\&. 
.PP
Part of the Composite pattern that makes the hierarchy\&. The hierarchy is parent linked rather than child linked\&. 
.PP
Definition at line 101 of file Logger\&.cs\&.
.SS "\fBILoggerRepository\fP log4net\&.Repository\&.Hierarchy\&.Logger\&.Repository\fC [get]\fP"

.PP
Gets the \fBILoggerRepository\fP where this \fC\fBLogger\fP\fP instance is attached to\&. The \fBILoggerRepository\fP that this logger belongs to\&. 
.PP
Gets the \fBILoggerRepository\fP where this \fC\fBLogger\fP\fP instance is attached to\&. 
.PP
Definition at line 535 of file Logger\&.cs\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for HSA\&.InfoSys from the source code\&.
