.TH "log4net.Util.EmptyCollection" 3 "Fri Jul 5 2013" "Version 1.0" "HSA.InfoSys" \" -*- nroff -*-
.ad l
.nh
.SH NAME
log4net.Util.EmptyCollection \- 
.PP
An always empty ICollection\&.  

.SH SYNOPSIS
.br
.PP
.PP
Inherits ICollection\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBCopyTo\fP (System\&.Array array, int index)"
.br
.RI "\fICopies the elements of the ICollection to an Array, starting at a particular Array index\&. \fP"
.ti -1c
.RI "IEnumerator \fBGetEnumerator\fP ()"
.br
.RI "\fIReturns an enumerator that can iterate through a collection\&. \fP"
.in -1c
.SS "Properties"

.in +1c
.ti -1c
.RI "static \fBEmptyCollection\fP \fBInstance\fP\fC [get]\fP"
.br
.RI "\fIGets the singleton instance of the empty collection\&. \fP"
.ti -1c
.RI "bool \fBIsSynchronized\fP\fC [get]\fP"
.br
.RI "\fIGets a value indicating if access to the ICollection is synchronized (thread-safe)\&. \fP"
.ti -1c
.RI "int \fBCount\fP\fC [get]\fP"
.br
.RI "\fIGets the number of elements contained in the ICollection\&. \fP"
.ti -1c
.RI "object \fBSyncRoot\fP\fC [get]\fP"
.br
.RI "\fIGets an object that can be used to synchronize access to the ICollection\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
An always empty ICollection\&. 

A singleton implementation of the ICollection interface that always represents an empty collection\&. 
.PP
<author>Nicko Cadell</author> <author>Gert Driesen</author> 
.PP
Definition at line 39 of file EmptyCollection\&.cs\&.
.SH "Member Function Documentation"
.PP 
.SS "void log4net\&.Util\&.EmptyCollection\&.CopyTo (System\&.Arrayarray, intindex)"

.PP
Copies the elements of the ICollection to an Array, starting at a particular Array index\&. 
.PP
\fBParameters:\fP
.RS 4
\fIarray\fP The one-dimensional Array that is the destination of the elements copied from ICollection\&. The Array must have zero-based indexing\&.
.br
\fIindex\fP The zero-based index in array at which copying begins\&.
.RE
.PP
.PP
As the collection is empty no values are copied into the array\&. 
.PP
Definition at line 92 of file EmptyCollection\&.cs\&.
.SS "IEnumerator log4net\&.Util\&.EmptyCollection\&.GetEnumerator ()"

.PP
Returns an enumerator that can iterate through a collection\&. 
.PP
\fBReturns:\fP
.RS 4
An IEnumerator that can be used to iterate through the collection\&. 
.RE
.PP
.PP
As the collection is empty a \fBNullEnumerator\fP is returned\&. 
.PP
Definition at line 162 of file EmptyCollection\&.cs\&.
.SH "Property Documentation"
.PP 
.SS "int log4net\&.Util\&.EmptyCollection\&.Count\fC [get]\fP"

.PP
Gets the number of elements contained in the ICollection\&. The number of elements contained in the ICollection\&. 
.PP
As the collection is empty the \fBCount\fP is always \fC0\fP\&. 
.PP
Definition at line 125 of file EmptyCollection\&.cs\&.
.SS "\fBEmptyCollection\fP log4net\&.Util\&.EmptyCollection\&.Instance\fC [static]\fP, \fC [get]\fP"

.PP
Gets the singleton instance of the empty collection\&. 
.PP
\fBReturns:\fP
.RS 4
The singleton instance of the empty collection\&.
.RE
.PP
.PP
Gets the singleton instance of the empty collection\&. 
.PP
Definition at line 69 of file EmptyCollection\&.cs\&.
.SS "bool log4net\&.Util\&.EmptyCollection\&.IsSynchronized\fC [get]\fP"

.PP
Gets a value indicating if access to the ICollection is synchronized (thread-safe)\&. \fBtrue\fP if access to the ICollection is synchronized (thread-safe); otherwise, \fBfalse\fP\&. 
.PP
For the \fBEmptyCollection\fP this property is always \fCtrue\fP\&. 
.PP
Definition at line 109 of file EmptyCollection\&.cs\&.
.SS "object log4net\&.Util\&.EmptyCollection\&.SyncRoot\fC [get]\fP"

.PP
Gets an object that can be used to synchronize access to the ICollection\&. An object that can be used to synchronize access to the ICollection\&. 
.PP
As the collection is empty and thread safe and synchronized this instance is also the \fBSyncRoot\fP object\&. 
.PP
Definition at line 142 of file EmptyCollection\&.cs\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for HSA\&.InfoSys from the source code\&.
