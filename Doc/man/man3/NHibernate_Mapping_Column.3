.TH "NHibernate.Mapping.Column" 3 "Fri Jul 5 2013" "Version 1.0" "HSA.InfoSys" \" -*- nroff -*-
.ad l
.nh
.SH NAME
NHibernate.Mapping.Column \- 
.PP
Represents the mapping to a column in a database\&.  

.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBNHibernate\&.Mapping\&.ISelectable\fP, and ICloneable\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBColumn\fP ()"
.br
.RI "\fIInitializes a new instance of \fBColumn\fP\&. \fP"
.ti -1c
.RI "\fBColumn\fP (string columnName)"
.br
.RI "\fIInitializes a new instance of \fBColumn\fP\&. \fP"
.ti -1c
.RI "string \fBGetQuotedName\fP (\fBDialect\&.Dialect\fP d)"
.br
.RI "\fIGets the name of this \fBColumn\fP in quoted form if it is necessary\&. \fP"
.ti -1c
.RI "string \fBGetAlias\fP (\fBDialect\&.Dialect\fP dialect)"
.br
.ti -1c
.RI "string \fBGetAlias\fP (\fBDialect\&.Dialect\fP dialect, \fBTable\fP table)"
.br
.ti -1c
.RI "string \fBGetSqlType\fP (\fBDialect\&.Dialect\fP dialect, \fBIMapping\fP mapping)"
.br
.RI "\fIGets the name of the data type for the column\&. \fP"
.ti -1c
.RI "override bool \fBEquals\fP (object obj)"
.br
.RI "\fIDetermines if this instance of \fBColumn\fP and a specified object, which must be a \fB\fBColumn\fP\fP can be considered the same\&. \fP"
.ti -1c
.RI "bool \fBEquals\fP (\fBColumn\fP column)"
.br
.RI "\fIDetermines if this instance of \fBColumn\fP and the specified \fBColumn\fP can be considered the same\&. \fP"
.ti -1c
.RI "override int \fBGetHashCode\fP ()"
.br
.RI "\fIReturns the hash code for this instance\&. \fP"
.ti -1c
.RI "string \fBGetText\fP (\fBDialect\&.Dialect\fP dialect)"
.br
.ti -1c
.RI "string \fBGetTemplate\fP (\fBDialect\&.Dialect\fP dialect, \fBSQLFunctionRegistry\fP functionRegistry)"
.br
.ti -1c
.RI "override string \fBToString\fP ()"
.br
.ti -1c
.RI "\fBSqlType\fP \fBGetSqlTypeCode\fP (\fBIMapping\fP mapping)"
.br
.ti -1c
.RI "string \fBGetQuotedName\fP ()"
.br
.RI "\fIreturns quoted name as it would be in the mapping file\&. \fP"
.ti -1c
.RI "bool \fBIsCaracteristicsDefined\fP ()"
.br
.ti -1c
.RI "bool \fBIsPrecisionDefined\fP ()"
.br
.ti -1c
.RI "bool \fBIsLengthDefined\fP ()"
.br
.ti -1c
.RI "object \fBClone\fP ()"
.br
.RI "\fIShallow copy, the value is not copied\fP"
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "const int \fBDefaultLength\fP = 255"
.br
.ti -1c
.RI "const int \fBDefaultPrecision\fP = 19"
.br
.ti -1c
.RI "const int \fBDefaultScale\fP = 2"
.br
.in -1c
.SS "Properties"

.in +1c
.ti -1c
.RI "int \fBLength\fP\fC [get, set]\fP"
.br
.RI "\fIGets or sets the length of the datatype in the database\&. \fP"
.ti -1c
.RI "string \fBName\fP\fC [get, set]\fP"
.br
.RI "\fIGets or sets the name of the column in the database\&. \fP"
.ti -1c
.RI "string \fBCanonicalName\fP\fC [get]\fP"
.br
.ti -1c
.RI "bool \fBIsNullable\fP\fC [get, set]\fP"
.br
.RI "\fIGets or sets if the column can have null values in it\&. \fP"
.ti -1c
.RI "int \fBTypeIndex\fP\fC [get, set]\fP"
.br
.RI "\fIGets or sets the index of the column in the IType\&. \fP"
.ti -1c
.RI "bool \fBIsUnique\fP\fC [get, set]\fP"
.br
.RI "\fIGets or sets if the column contains unique values\&. \fP"
.ti -1c
.RI "string \fBSqlType\fP\fC [get, set]\fP"
.br
.RI "\fIGets or sets the sql data type name of the column\&. \fP"
.ti -1c
.RI "bool \fBIsQuoted\fP\fC [get, set]\fP"
.br
.RI "\fIGets or sets if the column needs to be quoted in SQL statements\&. \fP"
.ti -1c
.RI "bool \fBUnique\fP\fC [get, set]\fP"
.br
.RI "\fIGets or sets whether the column is unique\&. \fP"
.ti -1c
.RI "string \fBCheckConstraint\fP\fC [get, set]\fP"
.br
.RI "\fIGets or sets a check constraint on the column \fP"
.ti -1c
.RI "bool \fBHasCheckConstraint\fP\fC [get]\fP"
.br
.RI "\fIDo we have a check constraint? \fP"
.ti -1c
.RI "string \fBText\fP\fC [get]\fP"
.br
.ti -1c
.RI "bool \fBIsFormula\fP\fC [get]\fP"
.br
.ti -1c
.RI "int \fBPrecision\fP\fC [get, set]\fP"
.br
.ti -1c
.RI "int \fBScale\fP\fC [get, set]\fP"
.br
.ti -1c
.RI "\fBIValue\fP \fBValue\fP\fC [get, set]\fP"
.br
.ti -1c
.RI "\fBSqlType\fP \fBSqlTypeCode\fP\fC [get, set]\fP"
.br
.RI "\fIThe underlying columns SqlType\&. \fP"
.ti -1c
.RI "string \fBComment\fP\fC [get, set]\fP"
.br
.ti -1c
.RI "string \fBDefaultValue\fP\fC [get, set]\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Represents the mapping to a column in a database\&. 


.PP
Definition at line 14 of file Column\&.cs\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "NHibernate\&.Mapping\&.Column\&.Column ()"

.PP
Initializes a new instance of \fBColumn\fP\&. 
.PP
Definition at line 39 of file Column\&.cs\&.
.SS "NHibernate\&.Mapping\&.Column\&.Column (stringcolumnName)"

.PP
Initializes a new instance of \fBColumn\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcolumnName\fP The name of the column\&.
.RE
.PP

.PP
Definition at line 47 of file Column\&.cs\&.
.SH "Member Function Documentation"
.PP 
.SS "object NHibernate\&.Mapping\&.Column\&.Clone ()"

.PP
Shallow copy, the value is not copied
.PP
Definition at line 432 of file Column\&.cs\&.
.SS "override bool NHibernate\&.Mapping\&.Column\&.Equals (objectobj)"

.PP
Determines if this instance of \fBColumn\fP and a specified object, which must be a \fB\fBColumn\fP\fP can be considered the same\&. 
.PP
\fBParameters:\fP
.RS 4
\fIobj\fP An Object that should be a \fBColumn\fP\&.
.RE
.PP
\fBReturns:\fP
.RS 4
if the name of this \fBColumn\fP and the other \fBColumn\fP are the same, otherwise \&. 
.RE
.PP

.PP
Definition at line 233 of file Column\&.cs\&.
.SS "bool NHibernate\&.Mapping\&.Column\&.Equals (\fBColumn\fPcolumn)"

.PP
Determines if this instance of \fBColumn\fP and the specified \fBColumn\fP can be considered the same\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcolumn\fP A \fBColumn\fP to compare to this \fBColumn\fP\&.
.RE
.PP
\fBReturns:\fP
.RS 4
if the name of this \fBColumn\fP and the other \fBColumn\fP are the same, otherwise \&. 
.RE
.PP

.PP
Definition at line 248 of file Column\&.cs\&.
.SS "string NHibernate\&.Mapping\&.Column\&.GetAlias (\fBDialect\&.Dialect\fPdialect)"
For any column name, generate an alias that is unique to that column name, and also 10 characters or less in length\&. 
.PP
Implements \fBNHibernate\&.Mapping\&.ISelectable\fP\&.
.PP
Definition at line 124 of file Column\&.cs\&.
.SS "override int NHibernate\&.Mapping\&.Column\&.GetHashCode ()"

.PP
Returns the hash code for this instance\&. 
.PP
Definition at line 262 of file Column\&.cs\&.
.SS "string NHibernate\&.Mapping\&.Column\&.GetQuotedName (\fBDialect\&.Dialect\fPd)"

.PP
Gets the name of this \fBColumn\fP in quoted form if it is necessary\&. 
.PP
\fBParameters:\fP
.RS 4
\fId\fP The \fBDialect\&.Dialect\fP that knows how to quote the column name\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The column name in a form that is safe to use inside of a SQL statement\&. Quoted if it needs to be, not quoted if it does not need to be\&. 
.RE
.PP

.PP
Definition at line 113 of file Column\&.cs\&.
.SS "string NHibernate\&.Mapping\&.Column\&.GetQuotedName ()"

.PP
returns quoted name as it would be in the mapping file\&. 
.PP
Definition at line 410 of file Column\&.cs\&.
.SS "string NHibernate\&.Mapping\&.Column\&.GetSqlType (\fBDialect\&.Dialect\fPdialect, \fBIMapping\fPmapping)"

.PP
Gets the name of the data type for the column\&. 
.PP
\fBParameters:\fP
.RS 4
\fIdialect\fP The \fBDialect\&.Dialect\fP to use to get the valid data types\&.
.br
\fImapping\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
The name of the data type for the column\&. 
.RE
.PP
.PP
If the mapping file contains a value of the attribute \fCsql-type\fP this will return the string contained in that attribute\&. Otherwise it will use the typename from the \fBDialect\&.Dialect\fP of the \fBSqlType\fP object\&. 
.PP
Definition at line 206 of file Column\&.cs\&.
.SH "Property Documentation"
.PP 
.SS "string NHibernate\&.Mapping\&.Column\&.CheckConstraint\fC [get]\fP, \fC [set]\fP"

.PP
Gets or sets a check constraint on the column 
.PP
Definition at line 307 of file Column\&.cs\&.
.SS "bool NHibernate\&.Mapping\&.Column\&.HasCheckConstraint\fC [get]\fP"

.PP
Do we have a check constraint? 
.PP
Definition at line 316 of file Column\&.cs\&.
.SS "bool NHibernate\&.Mapping\&.Column\&.IsNullable\fC [get]\fP, \fC [set]\fP"

.PP
Gets or sets if the column can have null values in it\&. if the column can have a null value in it\&.
.PP
Definition at line 166 of file Column\&.cs\&.
.SS "bool NHibernate\&.Mapping\&.Column\&.IsQuoted\fC [get]\fP, \fC [set]\fP"

.PP
Gets or sets if the column needs to be quoted in SQL statements\&. if the column is quoted\&.
.PP
Definition at line 289 of file Column\&.cs\&.
.SS "bool NHibernate\&.Mapping\&.Column\&.IsUnique\fC [get]\fP, \fC [set]\fP"

.PP
Gets or sets if the column contains unique values\&. if the column contains unique values\&.
.PP
Definition at line 188 of file Column\&.cs\&.
.SS "int NHibernate\&.Mapping\&.Column\&.Length\fC [get]\fP, \fC [set]\fP"

.PP
Gets or sets the length of the datatype in the database\&. The length of the datatype in the database\&.
.PP
Definition at line 57 of file Column\&.cs\&.
.SS "string NHibernate\&.Mapping\&.Column\&.Name\fC [get]\fP, \fC [set]\fP"

.PP
Gets or sets the name of the column in the database\&. The name of the column in the database\&. The get does not return a Quoted column name\&. 
.PP
If a value is passed in that is wrapped by \fC`\fP then \fBNHibernate\fP will Quote the column whenever SQL is generated for it\&. How the column is quoted depends on the \fBDialect\fP\&. 
.PP
The value returned by the getter is not Quoted\&. To get the column name in quoted form use GetQuotedName(Dialect\&.Dialect)\&. 
.PP
Definition at line 81 of file Column\&.cs\&.
.SS "string NHibernate\&.Mapping\&.Column\&.SqlType\fC [get]\fP, \fC [set]\fP"

.PP
Gets or sets the sql data type name of the column\&. The sql data type name of the column\&. 
.PP
This is usually read from the \fCsql-type\fP attribute\&. 
.PP
Definition at line 279 of file Column\&.cs\&.
.SS "\fBSqlType\fP NHibernate\&.Mapping\&.Column\&.SqlTypeCode\fC [get]\fP, \fC [set]\fP"

.PP
The underlying columns SqlType\&. If null, it is because the sqltype code is unknown\&.
.PP
Use GetSqlTypeCode(IMapping) to retreive the sqltypecode used for the columns associated Value/Type\&. 
.PP
Definition at line 363 of file Column\&.cs\&.
.SS "int NHibernate\&.Mapping\&.Column\&.TypeIndex\fC [get]\fP, \fC [set]\fP"

.PP
Gets or sets the index of the column in the IType\&. The index of the column in the IType\&. 
.PP
Definition at line 178 of file Column\&.cs\&.
.SS "bool NHibernate\&.Mapping\&.Column\&.Unique\fC [get]\fP, \fC [set]\fP"

.PP
Gets or sets whether the column is unique\&. 
.PP
Definition at line 298 of file Column\&.cs\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for HSA\&.InfoSys from the source code\&.
