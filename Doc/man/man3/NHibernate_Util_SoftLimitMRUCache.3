.TH "NHibernate.Util.SoftLimitMRUCache" 3 "Fri Jul 5 2013" "Version 1.0" "HSA.InfoSys" \" -*- nroff -*-
.ad l
.nh
.SH NAME
NHibernate.Util.SoftLimitMRUCache \- 
.PP
\fBCache\fP following a 'Most Recently Used' (MRY) algorithm for maintaining a bounded in-memory size; the 'Least Recently Used' (LRU) entry is the first available for removal from the cache\&.  

.SH SYNOPSIS
.br
.PP
.PP
Inherits IDeserializationCallback\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBSoftLimitMRUCache\fP (int strongReferenceCount)"
.br
.ti -1c
.RI "void \fBPut\fP (object key, object value)"
.br
.ti -1c
.RI "void \fBClear\fP ()"
.br
.in -1c
.SS "Properties"

.in +1c
.ti -1c
.RI "object \fBthis[object key]\fP\fC [get]\fP"
.br
.ti -1c
.RI "int \fBCount\fP\fC [get]\fP"
.br
.ti -1c
.RI "int \fBSoftCount\fP\fC [get]\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
\fBCache\fP following a 'Most Recently Used' (MRY) algorithm for maintaining a bounded in-memory size; the 'Least Recently Used' (LRU) entry is the first available for removal from the cache\&. 

This implementation uses a 'soft limit' to the in-memory size of the cache, meaning that all cache entries are kept within a completely \fBjava\&.lang\&.ref\&.SoftReference\fP-based map with the most recently utilized entries additionally kept in a hard-reference manner to prevent those cache entries soft references from becoming enqueued by the garbage collector\&. Thus the actual size of this cache impl can actually grow beyond the stated max size bound as long as GC is not actively seeking soft references for enqueuement\&. 
.PP
Definition at line 25 of file SoftLimitMRUCache\&.cs\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for HSA\&.InfoSys from the source code\&.
