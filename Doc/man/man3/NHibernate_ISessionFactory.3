.TH "NHibernate.ISessionFactory" 3 "Fri Jul 5 2013" "Version 1.0" "HSA.InfoSys" \" -*- nroff -*-
.ad l
.nh
.SH NAME
NHibernate.ISessionFactory \- 
.PP
Creates \fC\fBISession\fP\fPs\&.  

.SH SYNOPSIS
.br
.PP
.PP
Inherits IDisposable\&.
.PP
Inherited by \fBNHibernate\&.Engine\&.ISessionFactoryImplementor\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBISession\fP \fBOpenSession\fP (IDbConnection conn)"
.br
.RI "\fIOpen a \fC\fBISession\fP\fP on the given connection \fP"
.ti -1c
.RI "\fBISession\fP \fBOpenSession\fP (\fBIInterceptor\fP sessionLocalInterceptor)"
.br
.RI "\fICreate database connection and open a \fC\fBISession\fP\fP on it, specifying an interceptor \fP"
.ti -1c
.RI "\fBISession\fP \fBOpenSession\fP (IDbConnection conn, \fBIInterceptor\fP sessionLocalInterceptor)"
.br
.RI "\fIOpen a \fC\fBISession\fP\fP on the given connection, specifying an interceptor \fP"
.ti -1c
.RI "\fBISession\fP \fBOpenSession\fP ()"
.br
.RI "\fICreate a database connection and open a \fC\fBISession\fP\fP on it \fP"
.ti -1c
.RI "\fBIClassMetadata\fP \fBGetClassMetadata\fP (System\&.Type persistentClass)"
.br
.RI "\fIGet the IClassMetadata associated with the given entity class \fP"
.ti -1c
.RI "\fBIClassMetadata\fP \fBGetClassMetadata\fP (string entityName)"
.br
.RI "\fIGet the IClassMetadata associated with the given entity name \fP"
.ti -1c
.RI "\fBICollectionMetadata\fP \fBGetCollectionMetadata\fP (string roleName)"
.br
.RI "\fIGet the \fCCollectionMetadata\fP associated with the named collection role \fP"
.ti -1c
.RI "IDictionary< string, 
.br
\fBIClassMetadata\fP > \fBGetAllClassMetadata\fP ()"
.br
.RI "\fIGet all IClassMetadata as a IDictionary from entityname  to metadata object \fP"
.ti -1c
.RI "IDictionary< string, 
.br
\fBICollectionMetadata\fP > \fBGetAllCollectionMetadata\fP ()"
.br
.RI "\fIGet all \fCCollectionMetadata\fP as a \fCIDictionary\fP from role name to metadata object \fP"
.ti -1c
.RI "void \fBClose\fP ()"
.br
.RI "\fIDestroy this \fCSessionFactory\fP and release all resources connection pools, etc)\&. It is the responsibility of the application to ensure that there are no open \fCSession\fPs before calling \fCclose()\fP\&. \fP"
.ti -1c
.RI "void \fBEvict\fP (System\&.Type persistentClass)"
.br
.RI "\fIEvict all entries from the process-level cache\&. This method occurs outside of any transaction; it performs an immediate 'hard' remove, so does not respect any transaction isolation semantics of the usage strategy\&. Use with care\&. \fP"
.ti -1c
.RI "void \fBEvict\fP (System\&.Type persistentClass, object id)"
.br
.RI "\fIEvict an entry from the process-level cache\&. This method occurs outside of any transaction; it performs an immediate 'hard' remove, so does not respect any transaction isolation semantics of the usage strategy\&. Use with care\&. \fP"
.ti -1c
.RI "void \fBEvictEntity\fP (string entityName)"
.br
.RI "\fIEvict all entries from the second-level cache\&. This method occurs outside of any transaction; it performs an immediate 'hard' remove, so does not respect any transaction isolation semantics of the usage strategy\&. Use with care\&. \fP"
.ti -1c
.RI "void \fBEvictEntity\fP (string entityName, object id)"
.br
.RI "\fIEvict an entry from the second-level cache\&. This method occurs outside of any transaction; it performs an immediate 'hard' remove, so does not respect any transaction isolation semantics of the usage strategy\&. Use with care\&. \fP"
.ti -1c
.RI "void \fBEvictCollection\fP (string roleName)"
.br
.RI "\fIEvict all entries from the process-level cache\&. This method occurs outside of any transaction; it performs an immediate 'hard' remove, so does not respect any transaction isolation semantics of the usage strategy\&. Use with care\&. \fP"
.ti -1c
.RI "void \fBEvictCollection\fP (string roleName, object id)"
.br
.RI "\fIEvict an entry from the process-level cache\&. This method occurs outside of any transaction; it performs an immediate 'hard' remove, so does not respect any transaction isolation semantics of the usage strategy\&. Use with care\&. \fP"
.ti -1c
.RI "void \fBEvictQueries\fP ()"
.br
.RI "\fIEvict any query result sets cached in the default query cache region\&. \fP"
.ti -1c
.RI "void \fBEvictQueries\fP (string cacheRegion)"
.br
.RI "\fIEvict any query result sets cached in the named query cache region\&. \fP"
.ti -1c
.RI "\fBIStatelessSession\fP \fBOpenStatelessSession\fP ()"
.br
.RI "\fIGet a new stateless session\&.\fP"
.ti -1c
.RI "\fBIStatelessSession\fP \fBOpenStatelessSession\fP (IDbConnection connection)"
.br
.RI "\fIGet a new stateless session for the given ADO\&.NET connection\&.\fP"
.ti -1c
.RI "\fBFilterDefinition\fP \fBGetFilterDefinition\fP (string filterName)"
.br
.RI "\fIObtain the definition of a filter by name\&. \fP"
.ti -1c
.RI "\fBISession\fP \fBGetCurrentSession\fP ()"
.br
.RI "\fIObtains the current session\&. \fP"
.in -1c
.SS "Properties"

.in +1c
.ti -1c
.RI "\fBIStatistics\fP \fBStatistics\fP\fC [get]\fP"
.br
.RI "\fIGet the statistics for this session factory\fP"
.ti -1c
.RI "bool \fBIsClosed\fP\fC [get]\fP"
.br
.RI "\fIWas this \fBISessionFactory\fP already closed?\fP"
.ti -1c
.RI "ICollection< string > \fBDefinedFilterNames\fP\fC [get]\fP"
.br
.RI "\fIObtain a set of the names of all filters defined on this SessionFactory\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Creates \fC\fBISession\fP\fPs\&. 

Usually an application has a single \fCSessionFactory\fP\&. Threads servicing client requests obtain \fC\fBISession\fP\fPs from the factory\&. Implementors must be threadsafe\&. 
.PP
\fC\fBISessionFactory\fP\fPs are immutable\&. The behaviour of a \fCSessionFactory\fP is controlled by properties supplied at configuration time\&. These properties are defined on \fCEnvironment\fP 
.PP
Definition at line 26 of file ISessionFactory\&.cs\&.
.SH "Member Function Documentation"
.PP 
.SS "void NHibernate\&.ISessionFactory\&.Close ()"

.PP
Destroy this \fCSessionFactory\fP and release all resources connection pools, etc)\&. It is the responsibility of the application to ensure that there are no open \fCSession\fPs before calling \fCclose()\fP\&. 
.PP
Implemented in \fBNHibernate\&.Impl\&.SessionFactoryImpl\fP\&.
.SS "void NHibernate\&.ISessionFactory\&.Evict (System\&.TypepersistentClass)"

.PP
Evict all entries from the process-level cache\&. This method occurs outside of any transaction; it performs an immediate 'hard' remove, so does not respect any transaction isolation semantics of the usage strategy\&. Use with care\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpersistentClass\fP 
.RE
.PP

.PP
Implemented in \fBNHibernate\&.Impl\&.SessionFactoryImpl\fP\&.
.SS "void NHibernate\&.ISessionFactory\&.Evict (System\&.TypepersistentClass, objectid)"

.PP
Evict an entry from the process-level cache\&. This method occurs outside of any transaction; it performs an immediate 'hard' remove, so does not respect any transaction isolation semantics of the usage strategy\&. Use with care\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpersistentClass\fP 
.br
\fIid\fP 
.RE
.PP

.PP
Implemented in \fBNHibernate\&.Impl\&.SessionFactoryImpl\fP\&.
.SS "void NHibernate\&.ISessionFactory\&.EvictCollection (stringroleName)"

.PP
Evict all entries from the process-level cache\&. This method occurs outside of any transaction; it performs an immediate 'hard' remove, so does not respect any transaction isolation semantics of the usage strategy\&. Use with care\&. 
.PP
\fBParameters:\fP
.RS 4
\fIroleName\fP 
.RE
.PP

.PP
Implemented in \fBNHibernate\&.Impl\&.SessionFactoryImpl\fP\&.
.SS "void NHibernate\&.ISessionFactory\&.EvictCollection (stringroleName, objectid)"

.PP
Evict an entry from the process-level cache\&. This method occurs outside of any transaction; it performs an immediate 'hard' remove, so does not respect any transaction isolation semantics of the usage strategy\&. Use with care\&. 
.PP
\fBParameters:\fP
.RS 4
\fIroleName\fP 
.br
\fIid\fP 
.RE
.PP

.PP
Implemented in \fBNHibernate\&.Impl\&.SessionFactoryImpl\fP\&.
.SS "void NHibernate\&.ISessionFactory\&.EvictEntity (stringentityName)"

.PP
Evict all entries from the second-level cache\&. This method occurs outside of any transaction; it performs an immediate 'hard' remove, so does not respect any transaction isolation semantics of the usage strategy\&. Use with care\&. 
.PP
Implemented in \fBNHibernate\&.Impl\&.SessionFactoryImpl\fP\&.
.SS "void NHibernate\&.ISessionFactory\&.EvictEntity (stringentityName, objectid)"

.PP
Evict an entry from the second-level cache\&. This method occurs outside of any transaction; it performs an immediate 'hard' remove, so does not respect any transaction isolation semantics of the usage strategy\&. Use with care\&. 
.PP
Implemented in \fBNHibernate\&.Impl\&.SessionFactoryImpl\fP\&.
.SS "void NHibernate\&.ISessionFactory\&.EvictQueries ()"

.PP
Evict any query result sets cached in the default query cache region\&. 
.PP
Implemented in \fBNHibernate\&.Impl\&.SessionFactoryImpl\fP\&.
.SS "void NHibernate\&.ISessionFactory\&.EvictQueries (stringcacheRegion)"

.PP
Evict any query result sets cached in the named query cache region\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcacheRegion\fP 
.RE
.PP

.PP
Implemented in \fBNHibernate\&.Impl\&.SessionFactoryImpl\fP\&.
.SS "IDictionary<string, \fBIClassMetadata\fP> NHibernate\&.ISessionFactory\&.GetAllClassMetadata ()"

.PP
Get all IClassMetadata as a IDictionary from entityname  to metadata object 
.PP
\fBReturns:\fP
.RS 4
A dictionary from  an entity name to IClassMetadata 
.RE
.PP

.PP
Implemented in \fBNHibernate\&.Impl\&.SessionFactoryImpl\fP\&.
.SS "IDictionary<string, \fBICollectionMetadata\fP> NHibernate\&.ISessionFactory\&.GetAllCollectionMetadata ()"

.PP
Get all \fCCollectionMetadata\fP as a \fCIDictionary\fP from role name to metadata object 
.PP
\fBReturns:\fP
.RS 4

.RE
.PP

.PP
Implemented in \fBNHibernate\&.Impl\&.SessionFactoryImpl\fP\&.
.SS "\fBIClassMetadata\fP NHibernate\&.ISessionFactory\&.GetClassMetadata (System\&.TypepersistentClass)"

.PP
Get the IClassMetadata associated with the given entity class 
.PP
\fBParameters:\fP
.RS 4
\fIpersistentClass\fP the given entity type\&.
.RE
.PP
\fBReturns:\fP
.RS 4
The class metadata or  if not found\&.
.RE
.PP
\fBSee Also:\fP
.RS 4
IClassMetadata
.PP
.RE
.PP

.PP
Implemented in \fBNHibernate\&.Impl\&.SessionFactoryImpl\fP\&.
.SS "\fBIClassMetadata\fP NHibernate\&.ISessionFactory\&.GetClassMetadata (stringentityName)"

.PP
Get the IClassMetadata associated with the given entity name 
.PP
\fBParameters:\fP
.RS 4
\fIentityName\fP the given entity name\&.
.RE
.PP
\fBReturns:\fP
.RS 4
The class metadata or  if not found\&.
.RE
.PP
\fBSee Also:\fP
.RS 4
IClassMetadata
.PP
.RE
.PP

.PP
Implemented in \fBNHibernate\&.Impl\&.SessionFactoryImpl\fP\&.
.SS "\fBICollectionMetadata\fP NHibernate\&.ISessionFactory\&.GetCollectionMetadata (stringroleName)"

.PP
Get the \fCCollectionMetadata\fP associated with the named collection role 
.PP
\fBParameters:\fP
.RS 4
\fIroleName\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
.RE
.PP

.PP
Implemented in \fBNHibernate\&.Impl\&.SessionFactoryImpl\fP\&.
.SS "\fBISession\fP NHibernate\&.ISessionFactory\&.GetCurrentSession ()"

.PP
Obtains the current session\&. The definition of what exactly 'current' means is controlled by the \fBNHibernate\&.Context\&.ICurrentSessionContext\fP implementation configured for use\&. 
.PP
\fBReturns:\fP
.RS 4
The current session\&.
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBHibernateException\fP\fP Indicates an issue locating a suitable current session\&.
.RE
.PP

.PP
Implemented in \fBNHibernate\&.Impl\&.SessionFactoryImpl\fP\&.
.SS "\fBFilterDefinition\fP NHibernate\&.ISessionFactory\&.GetFilterDefinition (stringfilterName)"

.PP
Obtain the definition of a filter by name\&. 
.PP
\fBParameters:\fP
.RS 4
\fIfilterName\fP The name of the filter for which to obtain the definition\&.
.RE
.PP
<return>The filter definition\&.</return> 
.PP
Implemented in \fBNHibernate\&.Impl\&.SessionFactoryImpl\fP\&.
.SS "\fBISession\fP NHibernate\&.ISessionFactory\&.OpenSession (IDbConnectionconn)"

.PP
Open a \fC\fBISession\fP\fP on the given connection 
.PP
\fBParameters:\fP
.RS 4
\fIconn\fP A connection provided by the application
.RE
.PP
\fBReturns:\fP
.RS 4
A session
.RE
.PP
.PP
Note that the second-level cache will be disabled if you supply a ADO\&.NET connection\&. \fBNHibernate\fP will not be able to track any statements you might have executed in the same transaction\&. Consider implementing your own IConnectionProvider\&. 
.PP
Implemented in \fBNHibernate\&.Impl\&.SessionFactoryImpl\fP\&.
.SS "\fBISession\fP NHibernate\&.ISessionFactory\&.OpenSession (\fBIInterceptor\fPsessionLocalInterceptor)"

.PP
Create database connection and open a \fC\fBISession\fP\fP on it, specifying an interceptor 
.PP
\fBParameters:\fP
.RS 4
\fIsessionLocalInterceptor\fP A session-scoped interceptor
.RE
.PP
\fBReturns:\fP
.RS 4
A session
.RE
.PP

.PP
Implemented in \fBNHibernate\&.Impl\&.SessionFactoryImpl\fP\&.
.SS "\fBISession\fP NHibernate\&.ISessionFactory\&.OpenSession (IDbConnectionconn, \fBIInterceptor\fPsessionLocalInterceptor)"

.PP
Open a \fC\fBISession\fP\fP on the given connection, specifying an interceptor 
.PP
\fBParameters:\fP
.RS 4
\fIconn\fP A connection provided by the application
.br
\fIsessionLocalInterceptor\fP A session-scoped interceptor
.RE
.PP
\fBReturns:\fP
.RS 4
A session
.RE
.PP
.PP
Note that the second-level cache will be disabled if you supply a ADO\&.NET connection\&. \fBNHibernate\fP will not be able to track any statements you might have executed in the same transaction\&. Consider implementing your own IConnectionProvider\&. 
.PP
Implemented in \fBNHibernate\&.Impl\&.SessionFactoryImpl\fP\&.
.SS "\fBISession\fP NHibernate\&.ISessionFactory\&.OpenSession ()"

.PP
Create a database connection and open a \fC\fBISession\fP\fP on it 
.PP
\fBReturns:\fP
.RS 4

.RE
.PP

.PP
Implemented in \fBNHibernate\&.Impl\&.SessionFactoryImpl\fP\&.
.SS "\fBIStatelessSession\fP NHibernate\&.ISessionFactory\&.OpenStatelessSession ()"

.PP
Get a new stateless session\&.
.PP
Implemented in \fBNHibernate\&.Impl\&.SessionFactoryImpl\fP\&.
.SS "\fBIStatelessSession\fP NHibernate\&.ISessionFactory\&.OpenStatelessSession (IDbConnectionconnection)"

.PP
Get a new stateless session for the given ADO\&.NET connection\&.
.PP
Implemented in \fBNHibernate\&.Impl\&.SessionFactoryImpl\fP\&.
.SH "Property Documentation"
.PP 
.SS "ICollection<string> NHibernate\&.ISessionFactory\&.DefinedFilterNames\fC [get]\fP"

.PP
Obtain a set of the names of all filters defined on this SessionFactory\&. <return>The set of filter names\&.</return> 
.PP
Definition at line 206 of file ISessionFactory\&.cs\&.
.SS "bool NHibernate\&.ISessionFactory\&.IsClosed\fC [get]\fP"

.PP
Was this \fBISessionFactory\fP already closed?
.PP
Definition at line 200 of file ISessionFactory\&.cs\&.
.SS "\fBIStatistics\fP NHibernate\&.ISessionFactory\&.Statistics\fC [get]\fP"

.PP
Get the statistics for this session factory
.PP
Definition at line 197 of file ISessionFactory\&.cs\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for HSA\&.InfoSys from the source code\&.
