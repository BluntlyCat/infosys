.TH "NHibernate.EmptyInterceptor" 3 "Fri Jul 5 2013" "Version 1.0" "HSA.InfoSys" \" -*- nroff -*-
.ad l
.nh
.SH NAME
NHibernate.EmptyInterceptor \- 
.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBNHibernate\&.IInterceptor\fP\&.
.PP
Inherited by \fBNHibernate\&.Test\&.DynamicEntity\&.Interceptor\&.ProxyInterceptor\fP, \fBNHibernate\&.Test\&.DynamicEntity\&.Tuplizer\&.EntityNameInterceptor\fP, \fBNHibernate\&.Test\&.Interceptor\&.CollectionInterceptor\fP, NHibernate\&.Test\&.Interceptor\&.InterceptorFixture\&.HHH1921Interceptor, NHibernate\&.Test\&.Interceptor\&.InterceptorFixture\&.MyComponentInterceptor, \fBNHibernate\&.Test\&.Interceptor\&.PropertyInterceptor\fP, \fBNHibernate\&.Test\&.Interceptor\&.StatefulInterceptor\fP, \fBNHibernate\&.Test\&.NHSpecificTest\&.NH1159\&.HibernateInterceptor\fP, \fBNHibernate\&.Test\&.NHSpecificTest\&.NH2043\&.Fixture\&.Namer\fP, \fBNHibernate\&.Test\&.NHSpecificTest\&.NH901\&.InterceptorStub\fP, \fBNHibernate\&.Test\&.SystemTransactions\&.TransactionNotificationFixture\&.RecordingInterceptor\fP, and \fBNHibernate\&.Test\&.TransactionTest\&.TransactionNotificationFixture\&.RecordingInterceptor\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual void \fBOnDelete\fP (object entity, object id, object[] state, string[] propertyNames, \fBIType\fP[] types)"
.br
.RI "\fICalled before an object is deleted \fP"
.ti -1c
.RI "virtual void \fBOnCollectionRecreate\fP (object collection, object key)"
.br
.RI "\fICalled before a collection is (re)created\&.\fP"
.ti -1c
.RI "virtual void \fBOnCollectionRemove\fP (object collection, object key)"
.br
.RI "\fICalled before a collection is deleted\&.\fP"
.ti -1c
.RI "virtual void \fBOnCollectionUpdate\fP (object collection, object key)"
.br
.RI "\fICalled before a collection is updated\&.\fP"
.ti -1c
.RI "virtual bool \fBOnFlushDirty\fP (object entity, object id, object[] currentState, object[] previousState, string[] propertyNames, \fBIType\fP[] types)"
.br
.RI "\fICalled when an object is detected to be dirty, during a flush\&. \fP"
.ti -1c
.RI "virtual bool \fBOnLoad\fP (object entity, object id, object[] state, string[] propertyNames, \fBIType\fP[] types)"
.br
.RI "\fICalled just before an object is initialized \fP"
.ti -1c
.RI "virtual bool \fBOnSave\fP (object entity, object id, object[] state, string[] propertyNames, \fBIType\fP[] types)"
.br
.RI "\fICalled before an object is saved \fP"
.ti -1c
.RI "virtual void \fBPostFlush\fP (ICollection entities)"
.br
.RI "\fICalled after a flush that actually ends in execution of the SQL statements required to synchronize in-memory state with the database\&. \fP"
.ti -1c
.RI "virtual void \fBPreFlush\fP (ICollection entitites)"
.br
.RI "\fICalled before a flush \fP"
.ti -1c
.RI "virtual bool \fBIsTransient\fP (object entity)"
.br
.RI "\fICalled when a transient entity is passed to \fCSaveOrUpdate\fP\&. \fP"
.ti -1c
.RI "virtual object \fBInstantiate\fP (string clazz, \fBEntityMode\fP entityMode, object id)"
.br
.ti -1c
.RI "virtual string \fBGetEntityName\fP (object entity)"
.br
.RI "\fIGet the entity name for a persistent or transient instance\fP"
.ti -1c
.RI "virtual object \fBGetEntity\fP (string entityName, object id)"
.br
.RI "\fIGet a fully loaded entity instance that is cached externally\fP"
.ti -1c
.RI "virtual int[] \fBFindDirty\fP (object entity, object id, object[] currentState, object[] previousState, string[] propertyNames, \fBIType\fP[] types)"
.br
.RI "\fICalled from \fCFlush()\fP\&. The return value determines whether the entity is updated \fP"
.ti -1c
.RI "virtual void \fBAfterTransactionBegin\fP (\fBITransaction\fP tx)"
.br
.RI "\fICalled when a \fBNHibernate\fP transaction is begun via the \fBNHibernate\fP \fBITransaction\fP API\&. Will not be called if transactions are being controlled via some other mechanism\&. \fP"
.ti -1c
.RI "virtual void \fBBeforeTransactionCompletion\fP (\fBITransaction\fP tx)"
.br
.RI "\fICalled before a transaction is committed (but not before rollback)\&. \fP"
.ti -1c
.RI "virtual void \fBAfterTransactionCompletion\fP (\fBITransaction\fP tx)"
.br
.RI "\fICalled after a transaction is committed or rolled back\&. \fP"
.ti -1c
.RI "virtual void \fBSetSession\fP (\fBISession\fP session)"
.br
.RI "\fICalled when a session-scoped (and \fBonly\fP session scoped) interceptor is attached to a session \fP"
.ti -1c
.RI "virtual \fBSqlString\fP \fBOnPrepareStatement\fP (\fBSqlString\fP sql)"
.br
.RI "\fICalled when sql string is being prepared\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Definition at line 9 of file EmptyInterceptor\&.cs\&.
.SH "Member Function Documentation"
.PP 
.SS "virtual void NHibernate\&.EmptyInterceptor\&.AfterTransactionBegin (\fBITransaction\fPtx)\fC [virtual]\fP"

.PP
Called when a \fBNHibernate\fP transaction is begun via the \fBNHibernate\fP \fBITransaction\fP API\&. Will not be called if transactions are being controlled via some other mechanism\&. 
.PP
Implements \fBNHibernate\&.IInterceptor\fP\&.
.PP
Reimplemented in \fBNHibernate\&.Test\&.SystemTransactions\&.TransactionNotificationFixture\&.RecordingInterceptor\fP, and \fBNHibernate\&.Test\&.TransactionTest\&.TransactionNotificationFixture\&.RecordingInterceptor\fP\&.
.PP
Definition at line 77 of file EmptyInterceptor\&.cs\&.
.SS "virtual void NHibernate\&.EmptyInterceptor\&.AfterTransactionCompletion (\fBITransaction\fPtx)\fC [virtual]\fP"

.PP
Called after a transaction is committed or rolled back\&. 
.PP
Implements \fBNHibernate\&.IInterceptor\fP\&.
.PP
Reimplemented in \fBNHibernate\&.Test\&.SystemTransactions\&.TransactionNotificationFixture\&.RecordingInterceptor\fP, and \fBNHibernate\&.Test\&.TransactionTest\&.TransactionNotificationFixture\&.RecordingInterceptor\fP\&.
.PP
Definition at line 85 of file EmptyInterceptor\&.cs\&.
.SS "virtual void NHibernate\&.EmptyInterceptor\&.BeforeTransactionCompletion (\fBITransaction\fPtx)\fC [virtual]\fP"

.PP
Called before a transaction is committed (but not before rollback)\&. 
.PP
Implements \fBNHibernate\&.IInterceptor\fP\&.
.PP
Reimplemented in \fBNHibernate\&.Test\&.SystemTransactions\&.TransactionNotificationFixture\&.RecordingInterceptor\fP, and \fBNHibernate\&.Test\&.TransactionTest\&.TransactionNotificationFixture\&.RecordingInterceptor\fP\&.
.PP
Definition at line 81 of file EmptyInterceptor\&.cs\&.
.SS "virtual int [] NHibernate\&.EmptyInterceptor\&.FindDirty (objectentity, objectid, object[]currentState, object[]previousState, string[]propertyNames, \fBIType\fP[]types)\fC [virtual]\fP"

.PP
Called from \fCFlush()\fP\&. The return value determines whether the entity is updated 
.PD 0

.IP "\(bu" 2
an array of property indicies - the entity is dirty 
.IP "\(bu" 2
an empty array - the entity is not dirty 
.IP "\(bu" 2
- use Hibernate's default dirty-checking algorithm 
.PP
.PP
\fBParameters:\fP
.RS 4
\fIentity\fP A persistent entity
.br
\fIcurrentState\fP 
.br
\fIid\fP 
.br
\fIpreviousState\fP 
.br
\fIpropertyNames\fP 
.br
\fItypes\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
An array of dirty property indicies or  to choose default behavior
.RE
.PP

.PP
Implements \fBNHibernate\&.IInterceptor\fP\&.
.PP
Definition at line 71 of file EmptyInterceptor\&.cs\&.
.SS "virtual object NHibernate\&.EmptyInterceptor\&.GetEntity (stringentityName, objectid)\fC [virtual]\fP"

.PP
Get a fully loaded entity instance that is cached externally
.PP
\fBParameters:\fP
.RS 4
\fIentityName\fP the name of the entity 
.br
\fIid\fP the instance identifier 
.RE
.PP
\fBReturns:\fP
.RS 4
a fully initialized entity 
.RE
.PP

.PP
Implements \fBNHibernate\&.IInterceptor\fP\&.
.PP
Definition at line 66 of file EmptyInterceptor\&.cs\&.
.SS "virtual string NHibernate\&.EmptyInterceptor\&.GetEntityName (objectentity)\fC [virtual]\fP"

.PP
Get the entity name for a persistent or transient instance
.PP
\fBParameters:\fP
.RS 4
\fIentity\fP an entity instance 
.RE
.PP
\fBReturns:\fP
.RS 4
the name of the entity 
.RE
.PP

.PP
Implements \fBNHibernate\&.IInterceptor\fP\&.
.PP
Reimplemented in \fBNHibernate\&.Test\&.NHSpecificTest\&.NH2043\&.Fixture\&.Namer\fP, \fBNHibernate\&.Test\&.DynamicEntity\&.Interceptor\&.ProxyInterceptor\fP, and \fBNHibernate\&.Test\&.DynamicEntity\&.Tuplizer\&.EntityNameInterceptor\fP\&.
.PP
Definition at line 61 of file EmptyInterceptor\&.cs\&.
.SS "virtual bool NHibernate\&.EmptyInterceptor\&.IsTransient (objectentity)\fC [virtual]\fP"

.PP
Called when a transient entity is passed to \fCSaveOrUpdate\fP\&. The return value determines if the object is saved 
.PD 0

.IP "\(bu" 2
- the entity is passed to \fCSave()\fP, resulting in an \fCINSERT\fP 
.IP "\(bu" 2
- the entity is passed to \fCUpdate()\fP, resulting in an \fCUPDATE\fP 
.IP "\(bu" 2
- Hibernate uses the \fCunsaved-value\fP mapping to determine if the object is unsaved 
.PP
.PP
\fBParameters:\fP
.RS 4
\fIentity\fP A transient entity
.RE
.PP
\fBReturns:\fP
.RS 4
Boolean or  to choose default behaviour
.RE
.PP

.PP
Implements \fBNHibernate\&.IInterceptor\fP\&.
.PP
Definition at line 51 of file EmptyInterceptor\&.cs\&.
.SS "virtual void NHibernate\&.EmptyInterceptor\&.OnCollectionRecreate (objectcollection, objectkey)\fC [virtual]\fP"

.PP
Called before a collection is (re)created\&.
.PP
Implements \fBNHibernate\&.IInterceptor\fP\&.
.PP
Definition at line 15 of file EmptyInterceptor\&.cs\&.
.SS "virtual void NHibernate\&.EmptyInterceptor\&.OnCollectionRemove (objectcollection, objectkey)\fC [virtual]\fP"

.PP
Called before a collection is deleted\&.
.PP
Implements \fBNHibernate\&.IInterceptor\fP\&.
.PP
Definition at line 19 of file EmptyInterceptor\&.cs\&.
.SS "virtual void NHibernate\&.EmptyInterceptor\&.OnCollectionUpdate (objectcollection, objectkey)\fC [virtual]\fP"

.PP
Called before a collection is updated\&.
.PP
Implements \fBNHibernate\&.IInterceptor\fP\&.
.PP
Definition at line 23 of file EmptyInterceptor\&.cs\&.
.SS "virtual void NHibernate\&.EmptyInterceptor\&.OnDelete (objectentity, objectid, object[]state, string[]propertyNames, \fBIType\fP[]types)\fC [virtual]\fP"

.PP
Called before an object is deleted 
.PP
\fBParameters:\fP
.RS 4
\fIentity\fP 
.br
\fIid\fP 
.br
\fIpropertyNames\fP 
.br
\fIstate\fP 
.br
\fItypes\fP 
.RE
.PP
.PP
It is not recommended that the interceptor modify the \fCstate\fP\&. 
.PP
Implements \fBNHibernate\&.IInterceptor\fP\&.
.PP
Definition at line 11 of file EmptyInterceptor\&.cs\&.
.SS "virtual bool NHibernate\&.EmptyInterceptor\&.OnFlushDirty (objectentity, objectid, object[]currentState, object[]previousState, string[]propertyNames, \fBIType\fP[]types)\fC [virtual]\fP"

.PP
Called when an object is detected to be dirty, during a flush\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcurrentState\fP 
.br
\fIentity\fP 
.br
\fIid\fP 
.br
\fIpreviousState\fP 
.br
\fIpropertyNames\fP 
.br
\fItypes\fP 
.RE
.PP
.PP
The interceptor may modify the detected \fCcurrentState\fP, which will be propagated to both the database and the persistent object\&. Note that all flushes end in an actual synchronization with the database, in which as the new \fCcurrentState\fP will be propagated to the object, but not necessarily (immediately) to the database\&. It is strongly recommended that the interceptor \fBnot\fP modify the \fCpreviousState\fP\&. 
.PP
\fBReturns:\fP
.RS 4
if the user modified the \fCcurrentState\fP in any way
.RE
.PP

.PP
Implements \fBNHibernate\&.IInterceptor\fP\&.
.PP
Reimplemented in \fBNHibernate\&.Test\&.NHSpecificTest\&.NH901\&.InterceptorStub\fP, \fBNHibernate\&.Test\&.Interceptor\&.StatefulInterceptor\fP, \fBNHibernate\&.Test\&.NHSpecificTest\&.NH1159\&.HibernateInterceptor\fP, \fBNHibernate\&.Test\&.Interceptor\&.PropertyInterceptor\fP, and \fBNHibernate\&.Test\&.Interceptor\&.CollectionInterceptor\fP\&.
.PP
Definition at line 27 of file EmptyInterceptor\&.cs\&.
.SS "virtual bool NHibernate\&.EmptyInterceptor\&.OnLoad (objectentity, objectid, object[]state, string[]propertyNames, \fBIType\fP[]types)\fC [virtual]\fP"

.PP
Called just before an object is initialized 
.PP
\fBParameters:\fP
.RS 4
\fIentity\fP 
.br
\fIid\fP 
.br
\fIpropertyNames\fP 
.br
\fIstate\fP 
.br
\fItypes\fP 
.RE
.PP
.PP
The interceptor may change the \fCstate\fP, which will be propagated to the persistent object\&. Note that when this method is called, \fCentity\fP will be an empty uninitialized instance of the class\&.
.PP
\fBReturns:\fP
.RS 4
if the user modified the \fCstate\fP in any way
.RE
.PP

.PP
Implements \fBNHibernate\&.IInterceptor\fP\&.
.PP
Definition at line 33 of file EmptyInterceptor\&.cs\&.
.SS "virtual \fBSqlString\fP NHibernate\&.EmptyInterceptor\&.OnPrepareStatement (\fBSqlString\fPsql)\fC [virtual]\fP"

.PP
Called when sql string is being prepared\&. 
.PP
\fBParameters:\fP
.RS 4
\fIsql\fP sql to be prepared 
.RE
.PP
\fBReturns:\fP
.RS 4
original or modified sql 
.RE
.PP

.PP
Implements \fBNHibernate\&.IInterceptor\fP\&.
.PP
Definition at line 93 of file EmptyInterceptor\&.cs\&.
.SS "virtual bool NHibernate\&.EmptyInterceptor\&.OnSave (objectentity, objectid, object[]state, string[]propertyNames, \fBIType\fP[]types)\fC [virtual]\fP"

.PP
Called before an object is saved 
.PP
\fBParameters:\fP
.RS 4
\fIentity\fP 
.br
\fIid\fP 
.br
\fIpropertyNames\fP 
.br
\fIstate\fP 
.br
\fItypes\fP 
.RE
.PP
.PP
The interceptor may modify the \fCstate\fP, which will be used for the SQL \fCINSERT\fP and propagated to the persistent object 
.PP
\fBReturns:\fP
.RS 4
if the user modified the \fCstate\fP in any way
.RE
.PP

.PP
Implements \fBNHibernate\&.IInterceptor\fP\&.
.PP
Reimplemented in \fBNHibernate\&.Test\&.Interceptor\&.PropertyInterceptor\fP, \fBNHibernate\&.Test\&.Interceptor\&.CollectionInterceptor\fP, and \fBNHibernate\&.Test\&.Interceptor\&.StatefulInterceptor\fP\&.
.PP
Definition at line 38 of file EmptyInterceptor\&.cs\&.
.SS "virtual void NHibernate\&.EmptyInterceptor\&.PostFlush (ICollectionentities)\fC [virtual]\fP"

.PP
Called after a flush that actually ends in execution of the SQL statements required to synchronize in-memory state with the database\&. 
.PP
\fBParameters:\fP
.RS 4
\fIentities\fP The entitites
.RE
.PP

.PP
Implements \fBNHibernate\&.IInterceptor\fP\&.
.PP
Reimplemented in \fBNHibernate\&.Test\&.Interceptor\&.StatefulInterceptor\fP\&.
.PP
Definition at line 43 of file EmptyInterceptor\&.cs\&.
.SS "virtual void NHibernate\&.EmptyInterceptor\&.PreFlush (ICollectionentities)\fC [virtual]\fP"

.PP
Called before a flush 
.PP
\fBParameters:\fP
.RS 4
\fIentities\fP The entities
.RE
.PP

.PP
Implements \fBNHibernate\&.IInterceptor\fP\&.
.PP
Definition at line 47 of file EmptyInterceptor\&.cs\&.
.SS "virtual void NHibernate\&.EmptyInterceptor\&.SetSession (\fBISession\fPsession)\fC [virtual]\fP"

.PP
Called when a session-scoped (and \fBonly\fP session scoped) interceptor is attached to a session session-scoped-interceptor is an instance of the interceptor used only for one session\&. The use of singleton-interceptor may cause problems in multi-thread scenario\&. 
.PP
\fBSee Also:\fP
.RS 4
\fBISessionFactory\&.OpenSession(IInterceptor)\fP, \fBISessionFactory\&.OpenSession(IDbConnection,IInterceptor)\fP
.PP
.RE
.PP

.PP
Implements \fBNHibernate\&.IInterceptor\fP\&.
.PP
Reimplemented in \fBNHibernate\&.Test\&.Interceptor\&.StatefulInterceptor\fP\&.
.PP
Definition at line 89 of file EmptyInterceptor\&.cs\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for HSA\&.InfoSys from the source code\&.
