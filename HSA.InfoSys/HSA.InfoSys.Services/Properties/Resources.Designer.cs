//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.18047
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HSA.InfoSys.Common.Services.Properties {
    using System;
    
    
    /// <summary>
    ///   Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
    /// </summary>
    // Diese Klasse wurde von der StronglyTypedResourceBuilder automatisch generiert
    // -Klasse über ein Tool wie ResGen oder Visual Studio automatisch generiert.
    // Um einen Member hinzuzufügen oder zu entfernen, bearbeiten Sie die .ResX-Datei und führen dann ResGen
    // mit der /str-Option erneut aus, oder Sie erstellen Ihr VS-Projekt neu.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("HSA.InfoSys.Common.Services.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
        ///   Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Countdown time: [{0}], source: [{1}] ähnelt.
        /// </summary>
        internal static string COUNTDOWN_TO_STRING {
            get {
                return ResourceManager.GetString("COUNTDOWN_TO_STRING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Shutdown Services. ähnelt.
        /// </summary>
        internal static string CRAWL_CONTROLLER_SHUTDOWN {
            get {
                return ResourceManager.GetString("CRAWL_CONTROLLER_SHUTDOWN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Start crawl controller ähnelt.
        /// </summary>
        internal static string CRAWL_CONTROLLER_START {
            get {
                return ResourceManager.GetString("CRAWL_CONTROLLER_START", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Instance saved successfully in database. ähnelt.
        /// </summary>
        internal static string DBMANAGER_ADD_ENTITY {
            get {
                return ResourceManager.GetString("DBMANAGER_ADD_ENTITY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die New component [{0}] created. ähnelt.
        /// </summary>
        internal static string DBMANAGER_CREATE_COMPONENT {
            get {
                return ResourceManager.GetString("DBMANAGER_CREATE_COMPONENT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die New org unit [{0}] created. ähnelt.
        /// </summary>
        internal static string DBMANAGER_CREATE_ORGUNIT {
            get {
                return ResourceManager.GetString("DBMANAGER_CREATE_ORGUNIT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die New org unit configuration [{0}] created. ähnelt.
        /// </summary>
        internal static string DBMANAGER_CREATE_ORGUNITCONFIG {
            get {
                return ResourceManager.GetString("DBMANAGER_CREATE_ORGUNITCONFIG", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die New result [{0}] created. ähnelt.
        /// </summary>
        internal static string DBMANAGER_CREATE_RESULT {
            get {
                return ResourceManager.GetString("DBMANAGER_CREATE_RESULT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die New scheduler [{0}] created. ähnelt.
        /// </summary>
        internal static string DBMANAGER_CREATE_SCHEDULER {
            get {
                return ResourceManager.GetString("DBMANAGER_CREATE_SCHEDULER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die New source [{0}] created. ähnelt.
        /// </summary>
        internal static string DBMANAGER_CREATE_SOURCE {
            get {
                return ResourceManager.GetString("DBMANAGER_CREATE_SOURCE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die New systemservice [{0}] created. ähnelt.
        /// </summary>
        internal static string DBMANAGER_CREATE_SYSTEMSERVICE {
            get {
                return ResourceManager.GetString("DBMANAGER_CREATE_SYSTEMSERVICE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Deleted entity [{0}] ähnelt.
        /// </summary>
        internal static string DBMANAGER_DELETE_ENTITY {
            get {
                return ResourceManager.GetString("DBMANAGER_DELETE_ENTITY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Load this entities [{0}] eager from database. ähnelt.
        /// </summary>
        internal static string DBMANAGER_EAGER_LOAD_THIS_ENTITIES {
            get {
                return ResourceManager.GetString("DBMANAGER_EAGER_LOAD_THIS_ENTITIES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Got components: [{0}] by GUID: [{1}]. ähnelt.
        /// </summary>
        internal static string DBMANAGER_GET_COMPONENT_BY_ORGUNIT_ID {
            get {
                return ResourceManager.GetString("DBMANAGER_GET_COMPONENT_BY_ORGUNIT_ID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Got entity of type [{0}] with values [{1}] by GUID [{2}] ähnelt.
        /// </summary>
        internal static string DBMANAGER_GET_ENTITY {
            get {
                return ResourceManager.GetString("DBMANAGER_GET_ENTITY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Got org unit [{0}] by id [{1}] ähnelt.
        /// </summary>
        internal static string DBMANAGER_GET_ORGUNIT_BY_USERID {
            get {
                return ResourceManager.GetString("DBMANAGER_GET_ORGUNIT_BY_USERID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Got results: [{0}] by GUID: [{1}]. ähnelt.
        /// </summary>
        internal static string DBMANAGER_GET_RESULTS_BY_COMPONENT_ID {
            get {
                return ResourceManager.GetString("DBMANAGER_GET_RESULTS_BY_COMPONENT_ID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die DBManager does not exist, create one. ähnelt.
        /// </summary>
        internal static string DBMANAGER_NO_MANAGER_FOUND {
            get {
                return ResourceManager.GetString("DBMANAGER_NO_MANAGER_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Instance updated successfully in database. ähnelt.
        /// </summary>
        internal static string DBMANAGER_UPDATE_ENTITY {
            get {
                return ResourceManager.GetString("DBMANAGER_UPDATE_ENTITY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die NHibernate successfully configured. ähnelt.
        /// </summary>
        internal static string DBSESSION_NHIBERNATE_CONFIG_READY {
            get {
                return ResourceManager.GetString("DBSESSION_NHIBERNATE_CONFIG_READY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Open new session. ähnelt.
        /// </summary>
        internal static string DBSESSION_OPEN_SESSION {
            get {
                return ResourceManager.GetString("DBSESSION_OPEN_SESSION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Add mail body: [{0}] ähnelt.
        /// </summary>
        internal static string EMAIL_NOTIFIER_ADD_MAILBODY {
            get {
                return ResourceManager.GetString("EMAIL_NOTIFIER_ADD_MAILBODY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Add mail recipient {0} for OrgUnit {1}. ähnelt.
        /// </summary>
        internal static string EMAIL_NOTIFIER_ADD_RECIPIENT {
            get {
                return ResourceManager.GetString("EMAIL_NOTIFIER_ADD_RECIPIENT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Build mail from [{0}] with subject: [{1}] ähnelt.
        /// </summary>
        internal static string EMAIL_NOTIFIER_BUID_MAIL {
            get {
                return ResourceManager.GetString("EMAIL_NOTIFIER_BUID_MAIL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Crawl failed for OrgUnit: [{0}] ähnelt.
        /// </summary>
        internal static string EMAIL_NOTIFIER_CRAWL_FAILED {
            get {
                return ResourceManager.GetString("EMAIL_NOTIFIER_CRAWL_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The crawl for {0} failed. ähnelt.
        /// </summary>
        internal static string EMAIL_NOTIFIER_CRAWL_FAILED_BODY {
            get {
                return ResourceManager.GetString("EMAIL_NOTIFIER_CRAWL_FAILED_BODY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Crawl failed. ähnelt.
        /// </summary>
        internal static string EMAIL_NOTIFIER_CRAWL_FAILED_SUBJECT {
            get {
                return ResourceManager.GetString("EMAIL_NOTIFIER_CRAWL_FAILED_SUBJECT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Deserializing of addresses [{0}] finished. ähnelt.
        /// </summary>
        internal static string EMAIL_NOTIFIER_DESERIALIZE_ADDESSSES {
            get {
                return ResourceManager.GetString("EMAIL_NOTIFIER_DESERIALIZE_ADDESSSES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Got org unit [{0}] for entity [{1}] ähnelt.
        /// </summary>
        internal static string EMAIL_NOTIFIER_GET_ORG_UNIT {
            get {
                return ResourceManager.GetString("EMAIL_NOTIFIER_GET_ORG_UNIT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die New issues for System {0} found. ähnelt.
        /// </summary>
        internal static string EMAIL_NOTIFIER_ISSUE_FOUND_SUBJECT {
            get {
                return ResourceManager.GetString("EMAIL_NOTIFIER_ISSUE_FOUND_SUBJECT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die No email addresses found. ähnelt.
        /// </summary>
        internal static string EMAIL_NOTIFIER_NO_ADDRESSES {
            get {
                return ResourceManager.GetString("EMAIL_NOTIFIER_NO_ADDRESSES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Search finished for OrgUnit: [{0}] ähnelt.
        /// </summary>
        internal static string EMAIL_NOTIFIER_SEARCH_FINISHED {
            get {
                return ResourceManager.GetString("EMAIL_NOTIFIER_SEARCH_FINISHED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Send mail from {0} with subject {1} to {2} ähnelt.
        /// </summary>
        internal static string EMAIL_NOTIFIER_SEND_MAIL {
            get {
                return ResourceManager.GetString("EMAIL_NOTIFIER_SEND_MAIL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Send mail: entity: [{0}], subject: [{1}], body: [{2}] ähnelt.
        /// </summary>
        internal static string EMAIL_NOTIFIER_SEND_MAIL_TO_ENTITY_OWNER {
            get {
                return ResourceManager.GetString("EMAIL_NOTIFIER_SEND_MAIL_TO_ENTITY_OWNER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Error during time initialisation, error was:\n{0} ähnelt.
        /// </summary>
        internal static string ERROR_TIME_INIT {
            get {
                return ResourceManager.GetString("ERROR_TIME_INIT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Common error: {0} ähnelt.
        /// </summary>
        internal static string LOG_COMMON_ERROR {
            get {
                return ResourceManager.GetString("LOG_COMMON_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Initialize a new instance of Countdown ähnelt.
        /// </summary>
        internal static string LOG_COUNTDOWN_INITIALIZE {
            get {
                return ResourceManager.GetString("LOG_COUNTDOWN_INITIALIZE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Set new repeat time. ähnelt.
        /// </summary>
        internal static string LOG_COUNTDOWN_SET_REPEAT_TIME {
            get {
                return ResourceManager.GetString("LOG_COUNTDOWN_SET_REPEAT_TIME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Start new countdown. ähnelt.
        /// </summary>
        internal static string LOG_COUNTDOWN_START_COUNTDOWN {
            get {
                return ResourceManager.GetString("LOG_COUNTDOWN_START_COUNTDOWN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Thread left while loop. ähnelt.
        /// </summary>
        internal static string LOG_COUNTDOWN_THREAD_ENDS {
            get {
                return ResourceManager.GetString("LOG_COUNTDOWN_THREAD_ENDS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Thread is running. ähnelt.
        /// </summary>
        internal static string LOG_COUNTDOWN_THREAD_IS_RUNNING {
            get {
                return ResourceManager.GetString("LOG_COUNTDOWN_THREAD_IS_RUNNING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The directory {0} could not be created. ähnelt.
        /// </summary>
        internal static string LOG_DIRECTORY_CREATION_ERROR {
            get {
                return ResourceManager.GetString("LOG_DIRECTORY_CREATION_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Job dispatcher timer reached zero. ähnelt.
        /// </summary>
        internal static string LOG_DISPATCHER_ZERO {
            get {
                return ResourceManager.GetString("LOG_DISPATCHER_ZERO", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Fetch jobs from database. ähnelt.
        /// </summary>
        internal static string LOG_FETCH_JOBS_FROM_DB {
            get {
                return ResourceManager.GetString("LOG_FETCH_JOBS_FROM_DB", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die File {0} at {1} successfully created. ähnelt.
        /// </summary>
        internal static string LOG_FILE_CREATION_SUCCESS {
            get {
                return ResourceManager.GetString("LOG_FILE_CREATION_SUCCESS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Error while reading from file {0}, error was: {1} ähnelt.
        /// </summary>
        internal static string LOG_FILE_READING_ERROR {
            get {
                return ResourceManager.GetString("LOG_FILE_READING_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die File {0} successfully read. ähnelt.
        /// </summary>
        internal static string LOG_FILE_READING_SUCCESS {
            get {
                return ResourceManager.GetString("LOG_FILE_READING_SUCCESS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Error while writing to file {0}, error was: {1}. ähnelt.
        /// </summary>
        internal static string LOG_FILE_WRITING_ERROR {
            get {
                return ResourceManager.GetString("LOG_FILE_WRITING_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Url {0} successfully written. ähnelt.
        /// </summary>
        internal static string LOG_FILE_WRITING_SUCCESS {
            get {
                return ResourceManager.GetString("LOG_FILE_WRITING_SUCCESS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Got SchdulerTimer from database:[{0}] ähnelt.
        /// </summary>
        internal static string LOG_GOT_SCHEDULER_LIST_FROM_DB {
            get {
                return ResourceManager.GetString("LOG_GOT_SCHEDULER_LIST_FROM_DB", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Instanciate a new scheduler. ähnelt.
        /// </summary>
        internal static string LOG_INSTANCIATE_NEW_SCHEDULER {
            get {
                return ResourceManager.GetString("LOG_INSTANCIATE_NEW_SCHEDULER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die New prefix {0} added. ähnelt.
        /// </summary>
        internal static string LOG_PREFIX_ADDED {
            get {
                return ResourceManager.GetString("LOG_PREFIX_ADDED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Prefix file does not exist, create it. ähnelt.
        /// </summary>
        internal static string LOG_PREFIX_FILE_NOT_FOUND {
            get {
                return ResourceManager.GetString("LOG_PREFIX_FILE_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Job dispatcher timer restarted. ähnelt.
        /// </summary>
        internal static string LOG_RESTART_DISPATCHER {
            get {
                return ResourceManager.GetString("LOG_RESTART_DISPATCHER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Add SchedulerTimer [{0}] ähnelt.
        /// </summary>
        internal static string LOG_SCHEDULER_ADD {
            get {
                return ResourceManager.GetString("LOG_SCHEDULER_ADD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The SchedulerTimer already exists. ähnelt.
        /// </summary>
        internal static string LOG_SCHEDULER_ALREADY_EXIST {
            get {
                return ResourceManager.GetString("LOG_SCHEDULER_ALREADY_EXIST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Remove OrgUnitConfig [{0}]. ähnelt.
        /// </summary>
        internal static string LOG_SCHEDULER_REMOVE {
            get {
                return ResourceManager.GetString("LOG_SCHEDULER_REMOVE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Start service {0}. ähnelt.
        /// </summary>
        internal static string LOG_START_SERVICE {
            get {
                return ResourceManager.GetString("LOG_START_SERVICE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Stop service {0}. ähnelt.
        /// </summary>
        internal static string LOG_STOP_SERVICE {
            get {
                return ResourceManager.GetString("LOG_STOP_SERVICE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die An error occured in countdown [{0}], message was: [{1}]. ähnelt.
        /// </summary>
        internal static string LOG_TIME_VALIDATION_ERROR {
            get {
                return ResourceManager.GetString("LOG_TIME_VALIDATION_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Crawl process was created: {0} ähnelt.
        /// </summary>
        internal static string NUTCH_CONTROLLER_CLIENT_CRAWL_PROCESS_CREATED {
            get {
                return ResourceManager.GetString("NUTCH_CONTROLLER_CLIENT_CRAWL_PROCESS_CREATED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Crawling [{0}] finished. ähnelt.
        /// </summary>
        internal static string NUTCH_CONTROLLER_CRAWL_FINISHED {
            get {
                return ResourceManager.GetString("NUTCH_CONTROLLER_CRAWL_FINISHED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Set pending job for urls: {0} ähnelt.
        /// </summary>
        internal static string NUTCH_CONTROLLER_SET_PENDING_CRAWL {
            get {
                return ResourceManager.GetString("NUTCH_CONTROLLER_SET_PENDING_CRAWL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die New crawl jobs received, set as running crawls. ähnelt.
        /// </summary>
        internal static string NUTCH_CONTROLLER_SET_RUNNING_CRAWLS {
            get {
                return ResourceManager.GetString("NUTCH_CONTROLLER_SET_RUNNING_CRAWLS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die NutchManager does not exist, create one ähnelt.
        /// </summary>
        internal static string NUTCHMANAGER_NO_MANAGER_FOUND {
            get {
                return ResourceManager.GetString("NUTCHMANAGER_NO_MANAGER_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Issue {0} found on website: {1}, content: {2} at {3} ähnelt.
        /// </summary>
        internal static string RESULT_TO_STRING {
            get {
                return ResourceManager.GetString("RESULT_TO_STRING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Can not set job for OrgUnitConfig [{0}]. ähnelt.
        /// </summary>
        internal static string SCHEDULER_CANT_SET_JOB {
            get {
                return ResourceManager.GetString("SCHEDULER_CANT_SET_JOB", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The crawl failed: OrgUnit [{0}]. ähnelt.
        /// </summary>
        internal static string SCHEDULER_CRAWL_FAILED {
            get {
                return ResourceManager.GetString("SCHEDULER_CRAWL_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Scheduler starts new timer for crawl job. ähnelt.
        /// </summary>
        internal static string SCHEDULER_CRAWL_RESTART {
            get {
                return ResourceManager.GetString("SCHEDULER_CRAWL_RESTART", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The crawl finished without errors. ähnelt.
        /// </summary>
        internal static string SCHEDULER_CRAWL_SUCCEEDED {
            get {
                return ResourceManager.GetString("SCHEDULER_CRAWL_SUCCEEDED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Create new job for OrgUnitConfig [{0}]. ähnelt.
        /// </summary>
        internal static string SCHEDULER_CREATE_NEW_JOB {
            get {
                return ResourceManager.GetString("SCHEDULER_CREATE_NEW_JOB", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Countdown [{0}] has remaintime: [{1}]. ähnelt.
        /// </summary>
        internal static string SCHEDULER_ON_TICK {
            get {
                return ResourceManager.GetString("SCHEDULER_ON_TICK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Recall for OrgUnit [{0}] ähnelt.
        /// </summary>
        internal static string SEARCH_RECALL {
            get {
                return ResourceManager.GetString("SEARCH_RECALL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die New search started, running searches: [{0}] ähnelt.
        /// </summary>
        internal static string SEARCH_RECALL_START_SERVICE {
            get {
                return ResourceManager.GetString("SEARCH_RECALL_START_SERVICE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Current thread state running: {0}, running searches: {1}, timeout: {2} ähnelt.
        /// </summary>
        internal static string SEARCH_RECALL_THREAD_STATE {
            get {
                return ResourceManager.GetString("SEARCH_RECALL_THREAD_STATE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Thread state at end running: {0}, running searches: {1}, timeout: {2} ähnelt.
        /// </summary>
        internal static string SEARCH_RECALL_THREAD_STATE_END {
            get {
                return ResourceManager.GetString("SEARCH_RECALL_THREAD_STATE_END", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Close Connection ähnelt.
        /// </summary>
        internal static string SOLR_CLIENT_CLOSE_CONNECTION {
            get {
                return ResourceManager.GetString("SOLR_CLIENT_CLOSE_CONNECTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Connection Established to host: [{0}] ähnelt.
        /// </summary>
        internal static string SOLR_CLIENT_CONNECTION_ESTABLISHED {
            get {
                return ResourceManager.GetString("SOLR_CLIENT_CONNECTION_ESTABLISHED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Message was send: [{0}] ähnelt.
        /// </summary>
        internal static string SOLR_CLIENT_MESSAGE_SENT {
            get {
                return ResourceManager.GetString("SOLR_CLIENT_MESSAGE_SENT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Received a request for a solr query: [{0}] ähnelt.
        /// </summary>
        internal static string SOLR_CLIENT_REQUEST_RECEIVED {
            get {
                return ResourceManager.GetString("SOLR_CLIENT_REQUEST_RECEIVED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Message from host: [{0}] received with content: [{1}] ähnelt.
        /// </summary>
        internal static string SOLR_CLIENT_RESULT_RECEIVED {
            get {
                return ResourceManager.GetString("SOLR_CLIENT_RESULT_RECEIVED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Socket to host: [{0}] closed. ähnelt.
        /// </summary>
        internal static string SOLR_CLIENT_SOCKET_CLOSED {
            get {
                return ResourceManager.GetString("SOLR_CLIENT_SOCKET_CLOSED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Waiting for response from Solr. ähnelt.
        /// </summary>
        internal static string SOLR_CLIENT_TRY_GET_RESPONSE {
            get {
                return ResourceManager.GetString("SOLR_CLIENT_TRY_GET_RESPONSE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Unable to Connect to host: [{0}] ähnelt.
        /// </summary>
        internal static string SOLR_CLIENT_UNABLE_TO_CONNECT {
            get {
                return ResourceManager.GetString("SOLR_CLIENT_UNABLE_TO_CONNECT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Search for component {0} finished. ähnelt.
        /// </summary>
        internal static string SOLR_SEARCH_COMPONENT_FINISHED {
            get {
                return ResourceManager.GetString("SOLR_SEARCH_COMPONENT_FINISHED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Search for component {0} started. ähnelt.
        /// </summary>
        internal static string SOLR_SEARCH_COMPONENT_STARTED {
            get {
                return ResourceManager.GetString("SOLR_SEARCH_COMPONENT_STARTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die No new results found for {0}. ähnelt.
        /// </summary>
        internal static string SOLR_SEARCH_CONTROLLER_NO_NEW_RESULTS {
            get {
                return ResourceManager.GetString("SOLR_SEARCH_CONTROLLER_NO_NEW_RESULTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die No results for {0} found. ähnelt.
        /// </summary>
        internal static string SOLR_SEARCH_NO_RESULTS {
            get {
                return ResourceManager.GetString("SOLR_SEARCH_NO_RESULTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Search for OrgUnit {0} finished. ähnelt.
        /// </summary>
        internal static string SOLR_SEARCH_ORGUNIT_FINISHED {
            get {
                return ResourceManager.GetString("SOLR_SEARCH_ORGUNIT_FINISHED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Response for query [{0}] is: [{1}] ähnelt.
        /// </summary>
        internal static string SOLR_SEARCH_RESULT {
            get {
                return ResourceManager.GetString("SOLR_SEARCH_RESULT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Remaining time: [ID: {0} - {1}D : {2}H : {3}m : {4}s] ähnelt.
        /// </summary>
        internal static string TIME_TO_STRING {
            get {
                return ResourceManager.GetString("TIME_TO_STRING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Communication error: {0} ähnelt.
        /// </summary>
        internal static string WCF_COMMUNICATION_ERROR {
            get {
                return ResourceManager.GetString("WCF_COMMUNICATION_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die WCF service host {0} closed. ähnelt.
        /// </summary>
        internal static string WCF_CONTROLLER_WCF_HOST_CLOSED {
            get {
                return ResourceManager.GetString("WCF_CONTROLLER_WCF_HOST_CLOSED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die WCF service host {0} opened. ähnelt.
        /// </summary>
        internal static string WCF_CONTROLLER_WCF_HOST_OPENED {
            get {
                return ResourceManager.GetString("WCF_CONTROLLER_WCF_HOST_OPENED", resourceCulture);
            }
        }
    }
}
