.TH "NHibernate.IQuery" 3 "Fri Jul 5 2013" "Version 1.0" "HSA.InfoSys" \" -*- nroff -*-
.ad l
.nh
.SH NAME
NHibernate.IQuery \- 
.PP
An object-oriented representation of a \fBNHibernate\fP query\&.  

.SH SYNOPSIS
.br
.PP
.PP
Inherited by \fBNHibernate\&.Impl\&.AbstractQueryImpl\fP, and \fBNHibernate\&.ISQLQuery\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "IEnumerable \fBEnumerable\fP ()"
.br
.RI "\fIReturn the query results as an IEnumerable\&. If the query contains multiple results per row, the results are returned in an instance of \fCobject[]\fP\&. \fP"
.ti -1c
.RI "IEnumerable< T > \fBEnumerable< T >\fP ()"
.br
.RI "\fIStrongly-typed version of \fBEnumerable()\fP\&. \fP"
.ti -1c
.RI "IList \fBList\fP ()"
.br
.RI "\fIReturn the query results as an IList\&. If the query contains multiple results per row, the results are returned in an instance of \fCobject[]\fP\&. \fP"
.ti -1c
.RI "void \fBList\fP (IList results)"
.br
.RI "\fIReturn the query results an place them into the IList\&. \fP"
.ti -1c
.RI "IList< T > \fBList< T >\fP ()"
.br
.RI "\fIStrongly-typed version of \fBList()\fP\&. \fP"
.ti -1c
.RI "object \fBUniqueResult\fP ()"
.br
.RI "\fIConvenience method to return a single instance that matches the query, or null if the query returns no results\&. \fP"
.ti -1c
.RI "T \fBUniqueResult< T >\fP ()"
.br
.RI "\fIStrongly-typed version of \fBUniqueResult()\fP\&. \fP"
.ti -1c
.RI "int \fBExecuteUpdate\fP ()"
.br
.RI "\fIExecute the update or delete statement\&. \fP"
.ti -1c
.RI "\fBIQuery\fP \fBSetMaxResults\fP (int maxResults)"
.br
.RI "\fISet the maximum number of rows to retrieve\&. \fP"
.ti -1c
.RI "\fBIQuery\fP \fBSetFirstResult\fP (int firstResult)"
.br
.RI "\fISets the first row to retrieve\&. \fP"
.ti -1c
.RI "\fBIQuery\fP \fBSetReadOnly\fP (bool readOnly)"
.br
.RI "\fISet the read-only mode for entities (and proxies) loaded by this query\&. This setting overrides the default setting for the session (see \fBISession\&.DefaultReadOnly\fP)\&. \fP"
.ti -1c
.RI "\fBIQuery\fP \fBSetCacheable\fP (bool cacheable)"
.br
.RI "\fIEnable caching of this query result set\&. \fP"
.ti -1c
.RI "\fBIQuery\fP \fBSetCacheRegion\fP (string cacheRegion)"
.br
.ti -1c
.RI "\fBIQuery\fP \fBSetTimeout\fP (int timeout)"
.br
.RI "\fIThe timeout for the underlying ADO query \fP"
.ti -1c
.RI "\fBIQuery\fP \fBSetFetchSize\fP (int fetchSize)"
.br
.RI "\fISet a fetch size for the underlying ADO query\&.\fP"
.ti -1c
.RI "\fBIQuery\fP \fBSetLockMode\fP (string alias, \fBLockMode\fP lockMode)"
.br
.RI "\fISet the lockmode for the objects idententified by the given alias that appears in the \fCFROM\fP clause\&. \fP"
.ti -1c
.RI "\fBIQuery\fP \fBSetComment\fP (string comment)"
.br
.RI "\fIAdd a comment to the generated SQL\&.\fP"
.ti -1c
.RI "\fBIQuery\fP \fBSetFlushMode\fP (\fBFlushMode\fP flushMode)"
.br
.RI "\fIOverride the current session flush mode, just for this query\&. \fP"
.ti -1c
.RI "\fBIQuery\fP \fBSetCacheMode\fP (\fBCacheMode\fP cacheMode)"
.br
.RI "\fIOverride the current session cache mode, just for this query\&. \fP"
.ti -1c
.RI "\fBIQuery\fP \fBSetParameter\fP (int position, object val, \fBIType\fP type)"
.br
.RI "\fIBind a value to an indexed parameter\&. \fP"
.ti -1c
.RI "\fBIQuery\fP \fBSetParameter\fP (string name, object val, \fBIType\fP type)"
.br
.RI "\fIBind a value to a named query parameter \fP"
.ti -1c
.RI "\fBIQuery\fP \fBSetParameter< T >\fP (int position, T val)"
.br
.RI "\fIBind a value to an indexed parameter\&. \fP"
.ti -1c
.RI "\fBIQuery\fP \fBSetParameter< T >\fP (string name, T val)"
.br
.RI "\fIBind a value to a named query parameter \fP"
.ti -1c
.RI "\fBIQuery\fP \fBSetParameter\fP (int position, object val)"
.br
.RI "\fIBind a value to an indexed parameter, guessing the \fBNHibernate\fP type from the class of the given object\&. \fP"
.ti -1c
.RI "\fBIQuery\fP \fBSetParameter\fP (string name, object val)"
.br
.RI "\fIBind a value to a named query parameter, guessing the \fBNHibernate\fP IType from the class of the given object\&. \fP"
.ti -1c
.RI "\fBIQuery\fP \fBSetParameterList\fP (string name, IEnumerable vals, \fBIType\fP type)"
.br
.RI "\fIBind multiple values to a named query parameter\&. This is useful for binding a list of values to an expression such as \fCfoo\&.bar in (:value_list)\fP \fP"
.ti -1c
.RI "\fBIQuery\fP \fBSetParameterList\fP (string name, IEnumerable vals)"
.br
.RI "\fIBind multiple values to a named query parameter, guessing the \fBNHibernate\fP type from the class of the first object in the collection\&. This is useful for binding a list of values to an expression such as \fCfoo\&.bar in (:value_list)\fP \fP"
.ti -1c
.RI "\fBIQuery\fP \fBSetProperties\fP (object obj)"
.br
.RI "\fIBind the property values of the given object to named parameters of the query, matching property names with parameter names and mapping property types to \fBNHibernate\fP types using heuristics\&. \fP"
.ti -1c
.RI "\fBIQuery\fP \fBSetAnsiString\fP (int position, string val)"
.br
.RI "\fIBind an instance of a String to an indexed parameter using an \fBNHibernate\fP AnsiStringType\&. \fP"
.ti -1c
.RI "\fBIQuery\fP \fBSetAnsiString\fP (string name, string val)"
.br
.RI "\fIBind an instance of a String to a named parameter using an \fBNHibernate\fP AnsiStringType\&. \fP"
.ti -1c
.RI "\fBIQuery\fP \fBSetBinary\fP (int position, byte[] val)"
.br
.RI "\fIBind an instance of a Byte array to an indexed parameter using an \fBNHibernate\fP BinaryType\&. \fP"
.ti -1c
.RI "\fBIQuery\fP \fBSetBinary\fP (string name, byte[] val)"
.br
.RI "\fIBind an instance of a Byte array to a named parameter using an \fBNHibernate\fP BinaryType\&. \fP"
.ti -1c
.RI "\fBIQuery\fP \fBSetBoolean\fP (int position, bool val)"
.br
.RI "\fIBind an instance of a Boolean to an indexed parameter using an \fBNHibernate\fP BooleanType\&. \fP"
.ti -1c
.RI "\fBIQuery\fP \fBSetBoolean\fP (string name, bool val)"
.br
.RI "\fIBind an instance of a Boolean to a named parameter using an \fBNHibernate\fP BooleanType\&. \fP"
.ti -1c
.RI "\fBIQuery\fP \fBSetByte\fP (int position, byte val)"
.br
.RI "\fIBind an instance of a Byte to an indexed parameter using an \fBNHibernate\fP ByteType\&. \fP"
.ti -1c
.RI "\fBIQuery\fP \fBSetByte\fP (string name, byte val)"
.br
.RI "\fIBind an instance of a Byte to a named parameter using an \fBNHibernate\fP ByteType\&. \fP"
.ti -1c
.RI "\fBIQuery\fP \fBSetCharacter\fP (int position, char val)"
.br
.RI "\fIBind an instance of a Char to an indexed parameter using an \fBNHibernate\fP CharType\&. \fP"
.ti -1c
.RI "\fBIQuery\fP \fBSetCharacter\fP (string name, char val)"
.br
.RI "\fIBind an instance of a Char to a named parameter using an \fBNHibernate\fP CharType\&. \fP"
.ti -1c
.RI "\fBIQuery\fP \fBSetDateTime\fP (int position, DateTime val)"
.br
.RI "\fIBind an instance of a DateTime to an indexed parameter using an \fBNHibernate\fP DateTimeType\&. \fP"
.ti -1c
.RI "\fBIQuery\fP \fBSetDateTime\fP (string name, DateTime val)"
.br
.RI "\fIBind an instance of a DateTime to a named parameter using an \fBNHibernate\fP DateTimeType\&. \fP"
.ti -1c
.RI "\fBIQuery\fP \fBSetDateTime2\fP (int position, DateTime val)"
.br
.ti -1c
.RI "\fBIQuery\fP \fBSetDateTime2\fP (string name, DateTime val)"
.br
.ti -1c
.RI "\fBIQuery\fP \fBSetTimeSpan\fP (int position, TimeSpan val)"
.br
.ti -1c
.RI "\fBIQuery\fP \fBSetTimeSpan\fP (string name, TimeSpan val)"
.br
.ti -1c
.RI "\fBIQuery\fP \fBSetTimeAsTimeSpan\fP (int position, TimeSpan val)"
.br
.ti -1c
.RI "\fBIQuery\fP \fBSetTimeAsTimeSpan\fP (string name, TimeSpan val)"
.br
.ti -1c
.RI "\fBIQuery\fP \fBSetDateTimeOffset\fP (int position, DateTimeOffset val)"
.br
.ti -1c
.RI "\fBIQuery\fP \fBSetDateTimeOffset\fP (string name, DateTimeOffset val)"
.br
.ti -1c
.RI "\fBIQuery\fP \fBSetDecimal\fP (int position, decimal val)"
.br
.RI "\fIBind an instance of a Decimal to an indexed parameter using an \fBNHibernate\fP DecimalType\&. \fP"
.ti -1c
.RI "\fBIQuery\fP \fBSetDecimal\fP (string name, decimal val)"
.br
.RI "\fIBind an instance of a Decimal to a named parameter using an \fBNHibernate\fP DecimalType\&. \fP"
.ti -1c
.RI "\fBIQuery\fP \fBSetDouble\fP (int position, double val)"
.br
.RI "\fIBind an instance of a Double to an indexed parameter using an \fBNHibernate\fP DoubleType\&. \fP"
.ti -1c
.RI "\fBIQuery\fP \fBSetDouble\fP (string name, double val)"
.br
.RI "\fIBind an instance of a Double to a named parameter using an \fBNHibernate\fP DoubleType\&. \fP"
.ti -1c
.RI "\fBIQuery\fP \fBSetEnum\fP (int position, Enum val)"
.br
.RI "\fIBind an instance of a persistent enumeration class to an indexed parameter using an \fBNHibernate\fP PersistentEnumType\&. \fP"
.ti -1c
.RI "\fBIQuery\fP \fBSetEnum\fP (string name, Enum val)"
.br
.RI "\fIBind an instance of a persistent enumeration class to a named parameter using an \fBNHibernate\fP PersistentEnumType\&. \fP"
.ti -1c
.RI "\fBIQuery\fP \fBSetInt16\fP (int position, short val)"
.br
.RI "\fIBind an instance of a Int16 to an indexed parameter using an \fBNHibernate\fP Int16Type\&. \fP"
.ti -1c
.RI "\fBIQuery\fP \fBSetInt16\fP (string name, short val)"
.br
.RI "\fIBind an instance of a Int16 to a named parameter using an \fBNHibernate\fP Int16Type\&. \fP"
.ti -1c
.RI "\fBIQuery\fP \fBSetInt32\fP (int position, int val)"
.br
.RI "\fIBind an instance of a Int32 to an indexed parameter using an \fBNHibernate\fP Int32Type\&. \fP"
.ti -1c
.RI "\fBIQuery\fP \fBSetInt32\fP (string name, int val)"
.br
.RI "\fIBind an instance of a Int32 to a named parameter using an \fBNHibernate\fP Int32Type\&. \fP"
.ti -1c
.RI "\fBIQuery\fP \fBSetInt64\fP (int position, long val)"
.br
.RI "\fIBind an instance of a Int64 to an indexed parameter using an \fBNHibernate\fP Int64Type\&. \fP"
.ti -1c
.RI "\fBIQuery\fP \fBSetInt64\fP (string name, long val)"
.br
.RI "\fIBind an instance of a Int64 to a named parameter using an \fBNHibernate\fP Int64Type\&. \fP"
.ti -1c
.RI "\fBIQuery\fP \fBSetSingle\fP (int position, float val)"
.br
.RI "\fIBind an instance of a Single to an indexed parameter using an \fBNHibernate\fP SingleType\&. \fP"
.ti -1c
.RI "\fBIQuery\fP \fBSetSingle\fP (string name, float val)"
.br
.RI "\fIBind an instance of a Single to a named parameter using an \fBNHibernate\fP SingleType\&. \fP"
.ti -1c
.RI "\fBIQuery\fP \fBSetString\fP (int position, string val)"
.br
.RI "\fIBind an instance of a String to an indexed parameter using an \fBNHibernate\fP StringType\&. \fP"
.ti -1c
.RI "\fBIQuery\fP \fBSetString\fP (string name, string val)"
.br
.RI "\fIBind an instance of a String to a named parameter using an \fBNHibernate\fP StringType\&. \fP"
.ti -1c
.RI "\fBIQuery\fP \fBSetTime\fP (int position, DateTime val)"
.br
.RI "\fIBind an instance of a DateTime to an indexed parameter using an \fBNHibernate\fP DateTimeType\&. \fP"
.ti -1c
.RI "\fBIQuery\fP \fBSetTime\fP (string name, DateTime val)"
.br
.RI "\fIBind an instance of a DateTime to a named parameter using an \fBNHibernate\fP DateTimeType\&. \fP"
.ti -1c
.RI "\fBIQuery\fP \fBSetTimestamp\fP (int position, DateTime val)"
.br
.RI "\fIBind an instance of a DateTime to an indexed parameter using an \fBNHibernate\fP TimestampType\&. \fP"
.ti -1c
.RI "\fBIQuery\fP \fBSetTimestamp\fP (string name, DateTime val)"
.br
.RI "\fIBind an instance of a DateTime to a named parameter using an \fBNHibernate\fP TimestampType\&. \fP"
.ti -1c
.RI "\fBIQuery\fP \fBSetGuid\fP (int position, Guid val)"
.br
.RI "\fIBind an instance of a Guid to a named parameter using an \fBNHibernate\fP GuidType\&. \fP"
.ti -1c
.RI "\fBIQuery\fP \fBSetGuid\fP (string name, Guid val)"
.br
.RI "\fIBind an instance of a Guid to a named parameter using an \fBNHibernate\fP GuidType\&. \fP"
.ti -1c
.RI "\fBIQuery\fP \fBSetEntity\fP (int position, object val)"
.br
.RI "\fIBind an instance of a mapped persistent class to an indexed parameter\&. \fP"
.ti -1c
.RI "\fBIQuery\fP \fBSetEntity\fP (string name, object val)"
.br
.RI "\fIBind an instance of a mapped persistent class to a named parameter\&. \fP"
.ti -1c
.RI "\fBIQuery\fP \fBSetResultTransformer\fP (\fBIResultTransformer\fP resultTransformer)"
.br
.RI "\fISet a strategy for handling the query results\&. This can be used to change 'shape' of the query result\&. \fP"
.ti -1c
.RI "IEnumerable< T > \fBFuture< T >\fP ()"
.br
.RI "\fIGet a enumerable that when enumerated will execute a batch of queries in a single database roundtrip \fP"
.ti -1c
.RI "IFutureValue< T > \fBFutureValue< T >\fP ()"
.br
.RI "\fIGet an IFutureValue instance, whose value can be retrieved through its Value property\&. The query is not executed until the Value property is retrieved, which will execute other Future queries as well in a single roundtrip \fP"
.in -1c
.SS "Properties"

.in +1c
.ti -1c
.RI "string \fBQueryString\fP\fC [get]\fP"
.br
.RI "\fIThe query string \fP"
.ti -1c
.RI "\fBIType\fP[] \fBReturnTypes\fP\fC [get]\fP"
.br
.RI "\fIThe \fBNHibernate\fP types of the query result set\&. \fP"
.ti -1c
.RI "string[] \fBReturnAliases\fP\fC [get]\fP"
.br
.RI "\fIReturn the HQL select clause aliases (if any)\fP"
.ti -1c
.RI "string[] \fBNamedParameters\fP\fC [get]\fP"
.br
.RI "\fIThe names of all named parameters of the query \fP"
.ti -1c
.RI "bool \fBIsReadOnly\fP\fC [get]\fP"
.br
.RI "\fIWill entities (and proxies) returned by the query be loaded in read-only mode? \fP"
.in -1c
.SH "Detailed Description"
.PP 
An object-oriented representation of a \fBNHibernate\fP query\&. 

An \fC\fBIQuery\fP\fP instance is obtained by calling \fBISession\&.CreateQuery(string)\fP\&. Key features of this interface include: 
.PD 0

.IP "\(bu" 2
Paging: A particular page of the result set may be selected by calling \fBSetMaxResults(int)\fP, \fBSetFirstResult(int)\fP\&. The generated SQL depends on the capabilities of the \fBDialect\&.Dialect\fP\&. Some Dialects are for databases that have built in paging (LIMIT) and those capabilities will be used to limit the number of records returned by the SQL statement\&. If the database does not support LIMITs then all of the records will be returned, but the objects created will be limited to the specific results requested\&.  
.IP "\(bu" 2
Named parameters  
.IP "\(bu" 2
Ability to return 'read-only' entities  
.PP
.PP
Named query parameters are tokens of the form \fC:name\fP in the query string\&. For example, a value is bound to the \fCInt32\fP parameter \fC:foo\fP by calling: 
.PP
.nf
SetParameter("foo", foo, NHibernateUtil\&.Int32);

.fi
.PP
 A name may appear multiple times in the query string\&. 
.PP
Unnamed parameters \fC?\fP are also supported\&. To bind a value to an unnamed parameter use a Set method that accepts an \fCInt32\fP positional argument - numbered from zero\&. 
.PP
You may not mix and match unnamed parameters and named parameters in the same query\&. 
.PP
Queries are executed by calling \fBIQuery\&.List()\fP or \fBIQuery\&.Enumerable()\fP\&. A query may be re-executed by subsequent invocations\&. Its lifespan is, however, bounded by the lifespan of the \fC\fBISession\fP\fP that created it\&. 
.PP
Implementors are not intended to be threadsafe\&. 
.PP
Definition at line 57 of file IQuery\&.cs\&.
.SH "Member Function Documentation"
.PP 
.SS "IEnumerable NHibernate\&.IQuery\&.Enumerable ()"

.PP
Return the query results as an IEnumerable\&. If the query contains multiple results per row, the results are returned in an instance of \fCobject[]\fP\&. Entities returned as results are initialized on demand\&. The first SQL query returns identifiers only\&. 
.PP
This is a good strategy to use if you expect a high number of the objects returned to be already loaded in the \fBISession\fP or in the 2nd level cache\&. 
.PP
Implemented in \fBNHibernate\&.Impl\&.AbstractQueryImpl\fP, \fBNHibernate\&.Impl\&.SqlQueryImpl\fP, \fBNHibernate\&.Impl\&.AbstractQueryImpl2\fP, and \fBNHibernate\&.Impl\&.CollectionFilterImpl\fP\&.
.SS "IEnumerable<T> \fBNHibernate\&.IQuery\&.Enumerable\fP< T > ()"

.PP
Strongly-typed version of \fBEnumerable()\fP\&. 
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIT\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
.RE
.PP

.PP
Implemented in \fBNHibernate\&.Impl\&.AbstractQueryImpl\fP, \fBNHibernate\&.Impl\&.SqlQueryImpl\fP, \fBNHibernate\&.Impl\&.AbstractQueryImpl2\fP, and \fBNHibernate\&.Impl\&.CollectionFilterImpl\fP\&.
.SS "int NHibernate\&.IQuery\&.ExecuteUpdate ()"

.PP
Execute the update or delete statement\&. 
.PP
\fBReturns:\fP
.RS 4
The number of entities updated or deleted\&. 
.RE
.PP

.PP
Implemented in \fBNHibernate\&.Impl\&.AbstractQueryImpl\fP, \fBNHibernate\&.Impl\&.SqlQueryImpl\fP, and \fBNHibernate\&.Impl\&.AbstractQueryImpl2\fP\&.
.SS "IEnumerable<T> NHibernate\&.IQuery\&.Future< T > ()"

.PP
Get a enumerable that when enumerated will execute a batch of queries in a single database roundtrip 
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIT\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
.RE
.PP

.PP
Implemented in \fBNHibernate\&.Impl\&.AbstractQueryImpl\fP\&.
.SS "IFutureValue<T> NHibernate\&.IQuery\&.FutureValue< T > ()"

.PP
Get an IFutureValue instance, whose value can be retrieved through its Value property\&. The query is not executed until the Value property is retrieved, which will execute other Future queries as well in a single roundtrip 
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIT\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
.RE
.PP

.PP
Implemented in \fBNHibernate\&.Impl\&.AbstractQueryImpl\fP\&.
.SS "IList NHibernate\&.IQuery\&.List ()"

.PP
Return the query results as an IList\&. If the query contains multiple results per row, the results are returned in an instance of \fCobject[]\fP\&. 
.PP
\fBReturns:\fP
.RS 4
The IList filled with the results\&.
.RE
.PP
.PP
This is a good strategy to use if you expect few of the objects being returned are already loaded or if you want to fill the 2nd level cache\&. 
.PP
Implemented in \fBNHibernate\&.Impl\&.AbstractQueryImpl\fP, \fBNHibernate\&.Impl\&.SqlQueryImpl\fP, \fBNHibernate\&.Impl\&.AbstractQueryImpl2\fP, and \fBNHibernate\&.Impl\&.CollectionFilterImpl\fP\&.
.SS "void NHibernate\&.IQuery\&.List (IListresults)"

.PP
Return the query results an place them into the IList\&. 
.PP
\fBParameters:\fP
.RS 4
\fIresults\fP The IList to place the results in\&.
.RE
.PP

.PP
Implemented in \fBNHibernate\&.Impl\&.AbstractQueryImpl\fP, \fBNHibernate\&.Impl\&.SqlQueryImpl\fP, and \fBNHibernate\&.Impl\&.AbstractQueryImpl2\fP\&.
.SS "IList<T> \fBNHibernate\&.IQuery\&.List\fP< T > ()"

.PP
Strongly-typed version of \fBList()\fP\&. 
.PP
Implemented in \fBNHibernate\&.Impl\&.AbstractQueryImpl\fP, \fBNHibernate\&.Impl\&.SqlQueryImpl\fP, \fBNHibernate\&.Impl\&.AbstractQueryImpl2\fP, and \fBNHibernate\&.Impl\&.CollectionFilterImpl\fP\&.
.SS "\fBIQuery\fP NHibernate\&.IQuery\&.SetAnsiString (intposition, stringval)"

.PP
Bind an instance of a String to an indexed parameter using an \fBNHibernate\fP AnsiStringType\&. 
.PP
\fBParameters:\fP
.RS 4
\fIposition\fP The position of the parameter in the query string, numbered from \fC0\fP
.br
\fIval\fP A non-null instance of a String\&.
.RE
.PP

.PP
Implemented in \fBNHibernate\&.Impl\&.AbstractQueryImpl\fP\&.
.SS "\fBIQuery\fP NHibernate\&.IQuery\&.SetAnsiString (stringname, stringval)"

.PP
Bind an instance of a String to a named parameter using an \fBNHibernate\fP AnsiStringType\&. 
.PP
\fBParameters:\fP
.RS 4
\fIname\fP The name of the parameter
.br
\fIval\fP A non-null instance of a String\&.
.RE
.PP

.PP
Implemented in \fBNHibernate\&.Impl\&.AbstractQueryImpl\fP\&.
.SS "\fBIQuery\fP NHibernate\&.IQuery\&.SetBinary (intposition, byte[]val)"

.PP
Bind an instance of a Byte array to an indexed parameter using an \fBNHibernate\fP BinaryType\&. 
.PP
\fBParameters:\fP
.RS 4
\fIposition\fP The position of the parameter in the query string, numbered from \fC0\fP
.br
\fIval\fP A non-null instance of a Byte array\&.
.RE
.PP

.PP
Implemented in \fBNHibernate\&.Impl\&.AbstractQueryImpl\fP\&.
.SS "\fBIQuery\fP NHibernate\&.IQuery\&.SetBinary (stringname, byte[]val)"

.PP
Bind an instance of a Byte array to a named parameter using an \fBNHibernate\fP BinaryType\&. 
.PP
\fBParameters:\fP
.RS 4
\fIname\fP The name of the parameter
.br
\fIval\fP A non-null instance of a Byte array\&.
.RE
.PP

.PP
Implemented in \fBNHibernate\&.Impl\&.AbstractQueryImpl\fP\&.
.SS "\fBIQuery\fP NHibernate\&.IQuery\&.SetBoolean (intposition, boolval)"

.PP
Bind an instance of a Boolean to an indexed parameter using an \fBNHibernate\fP BooleanType\&. 
.PP
\fBParameters:\fP
.RS 4
\fIposition\fP The position of the parameter in the query string, numbered from \fC0\fP
.br
\fIval\fP A non-null instance of a Boolean\&.
.RE
.PP

.PP
Implemented in \fBNHibernate\&.Impl\&.AbstractQueryImpl\fP\&.
.SS "\fBIQuery\fP NHibernate\&.IQuery\&.SetBoolean (stringname, boolval)"

.PP
Bind an instance of a Boolean to a named parameter using an \fBNHibernate\fP BooleanType\&. 
.PP
\fBParameters:\fP
.RS 4
\fIname\fP The name of the parameter
.br
\fIval\fP A non-null instance of a Boolean\&.
.RE
.PP

.PP
Implemented in \fBNHibernate\&.Impl\&.AbstractQueryImpl\fP\&.
.SS "\fBIQuery\fP NHibernate\&.IQuery\&.SetByte (intposition, byteval)"

.PP
Bind an instance of a Byte to an indexed parameter using an \fBNHibernate\fP ByteType\&. 
.PP
\fBParameters:\fP
.RS 4
\fIposition\fP The position of the parameter in the query string, numbered from \fC0\fP
.br
\fIval\fP A non-null instance of a Byte\&.
.RE
.PP

.PP
Implemented in \fBNHibernate\&.Impl\&.AbstractQueryImpl\fP\&.
.SS "\fBIQuery\fP NHibernate\&.IQuery\&.SetByte (stringname, byteval)"

.PP
Bind an instance of a Byte to a named parameter using an \fBNHibernate\fP ByteType\&. 
.PP
\fBParameters:\fP
.RS 4
\fIname\fP The name of the parameter
.br
\fIval\fP A non-null instance of a Byte\&.
.RE
.PP

.PP
Implemented in \fBNHibernate\&.Impl\&.AbstractQueryImpl\fP\&.
.SS "\fBIQuery\fP NHibernate\&.IQuery\&.SetCacheable (boolcacheable)"

.PP
Enable caching of this query result set\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcacheable\fP Should the query results be cacheable?
.RE
.PP

.PP
Implemented in \fBNHibernate\&.Impl\&.AbstractQueryImpl\fP\&.
.SS "\fBIQuery\fP NHibernate\&.IQuery\&.SetCacheMode (\fBCacheMode\fPcacheMode)"

.PP
Override the current session cache mode, just for this query\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcacheMode\fP The cache mode to use\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
this (for method chaining) 
.RE
.PP

.PP
Implemented in \fBNHibernate\&.Impl\&.AbstractQueryImpl\fP\&.
.SS "\fBIQuery\fP NHibernate\&.IQuery\&.SetCacheRegion (stringcacheRegion)"
Set the name of the cache region\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcacheRegion\fP The name of a query cache region, or  for the default query cache
.RE
.PP

.PP
Implemented in \fBNHibernate\&.Impl\&.AbstractQueryImpl\fP\&.
.SS "\fBIQuery\fP NHibernate\&.IQuery\&.SetCharacter (intposition, charval)"

.PP
Bind an instance of a Char to an indexed parameter using an \fBNHibernate\fP CharType\&. 
.PP
\fBParameters:\fP
.RS 4
\fIposition\fP The position of the parameter in the query string, numbered from \fC0\fP
.br
\fIval\fP A non-null instance of a Char\&.
.RE
.PP

.PP
Implemented in \fBNHibernate\&.Impl\&.AbstractQueryImpl\fP\&.
.SS "\fBIQuery\fP NHibernate\&.IQuery\&.SetCharacter (stringname, charval)"

.PP
Bind an instance of a Char to a named parameter using an \fBNHibernate\fP CharType\&. 
.PP
\fBParameters:\fP
.RS 4
\fIname\fP The name of the parameter
.br
\fIval\fP A non-null instance of a Char\&.
.RE
.PP

.PP
Implemented in \fBNHibernate\&.Impl\&.AbstractQueryImpl\fP\&.
.SS "\fBIQuery\fP NHibernate\&.IQuery\&.SetComment (stringcomment)"

.PP
Add a comment to the generated SQL\&.
.PP
\fBParameters:\fP
.RS 4
\fIcomment\fP a human-readable string 
.RE
.PP

.PP
Implemented in \fBNHibernate\&.Impl\&.AbstractQueryImpl\fP\&.
.SS "\fBIQuery\fP NHibernate\&.IQuery\&.SetDateTime (intposition, DateTimeval)"

.PP
Bind an instance of a DateTime to an indexed parameter using an \fBNHibernate\fP DateTimeType\&. 
.PP
\fBParameters:\fP
.RS 4
\fIposition\fP The position of the parameter in the query string, numbered from \fC0\fP
.br
\fIval\fP A non-null instance of a DateTime\&.
.RE
.PP

.PP
Implemented in \fBNHibernate\&.Impl\&.AbstractQueryImpl\fP\&.
.SS "\fBIQuery\fP NHibernate\&.IQuery\&.SetDateTime (stringname, DateTimeval)"

.PP
Bind an instance of a DateTime to a named parameter using an \fBNHibernate\fP DateTimeType\&. 
.PP
\fBParameters:\fP
.RS 4
\fIval\fP A non-null instance of a DateTime\&.
.br
\fIname\fP The name of the parameter
.RE
.PP

.PP
Implemented in \fBNHibernate\&.Impl\&.AbstractQueryImpl\fP\&.
.SS "\fBIQuery\fP NHibernate\&.IQuery\&.SetDecimal (intposition, decimalval)"

.PP
Bind an instance of a Decimal to an indexed parameter using an \fBNHibernate\fP DecimalType\&. 
.PP
\fBParameters:\fP
.RS 4
\fIposition\fP The position of the parameter in the query string, numbered from \fC0\fP
.br
\fIval\fP A non-null instance of a Decimal\&.
.RE
.PP

.PP
Implemented in \fBNHibernate\&.Impl\&.AbstractQueryImpl\fP\&.
.SS "\fBIQuery\fP NHibernate\&.IQuery\&.SetDecimal (stringname, decimalval)"

.PP
Bind an instance of a Decimal to a named parameter using an \fBNHibernate\fP DecimalType\&. 
.PP
\fBParameters:\fP
.RS 4
\fIname\fP The name of the parameter
.br
\fIval\fP A non-null instance of a Decimal\&.
.RE
.PP

.PP
Implemented in \fBNHibernate\&.Impl\&.AbstractQueryImpl\fP\&.
.SS "\fBIQuery\fP NHibernate\&.IQuery\&.SetDouble (intposition, doubleval)"

.PP
Bind an instance of a Double to an indexed parameter using an \fBNHibernate\fP DoubleType\&. 
.PP
\fBParameters:\fP
.RS 4
\fIposition\fP The position of the parameter in the query string, numbered from \fC0\fP
.br
\fIval\fP A non-null instance of a Double\&.
.RE
.PP

.PP
Implemented in \fBNHibernate\&.Impl\&.AbstractQueryImpl\fP\&.
.SS "\fBIQuery\fP NHibernate\&.IQuery\&.SetDouble (stringname, doubleval)"

.PP
Bind an instance of a Double to a named parameter using an \fBNHibernate\fP DoubleType\&. 
.PP
\fBParameters:\fP
.RS 4
\fIname\fP The name of the parameter
.br
\fIval\fP A non-null instance of a Double\&.
.RE
.PP

.PP
Implemented in \fBNHibernate\&.Impl\&.AbstractQueryImpl\fP\&.
.SS "\fBIQuery\fP NHibernate\&.IQuery\&.SetEntity (intposition, objectval)"

.PP
Bind an instance of a mapped persistent class to an indexed parameter\&. 
.PP
\fBParameters:\fP
.RS 4
\fIposition\fP Position of the parameter in the query string, numbered from \fC0\fP
.br
\fIval\fP A non-null instance of a persistent class
.RE
.PP

.PP
Implemented in \fBNHibernate\&.Impl\&.AbstractQueryImpl\fP\&.
.SS "\fBIQuery\fP NHibernate\&.IQuery\&.SetEntity (stringname, objectval)"

.PP
Bind an instance of a mapped persistent class to a named parameter\&. 
.PP
\fBParameters:\fP
.RS 4
\fIname\fP The name of the parameter
.br
\fIval\fP A non-null instance of a persistent class
.RE
.PP

.PP
Implemented in \fBNHibernate\&.Impl\&.AbstractQueryImpl\fP\&.
.SS "\fBIQuery\fP NHibernate\&.IQuery\&.SetEnum (intposition, Enumval)"

.PP
Bind an instance of a persistent enumeration class to an indexed parameter using an \fBNHibernate\fP PersistentEnumType\&. 
.PP
\fBParameters:\fP
.RS 4
\fIposition\fP The position of the parameter in the query string, numbered from \fC0\fP
.br
\fIval\fP A non-null instance of a persistent enumeration
.RE
.PP

.PP
Implemented in \fBNHibernate\&.Impl\&.AbstractQueryImpl\fP\&.
.SS "\fBIQuery\fP NHibernate\&.IQuery\&.SetEnum (stringname, Enumval)"

.PP
Bind an instance of a persistent enumeration class to a named parameter using an \fBNHibernate\fP PersistentEnumType\&. 
.PP
\fBParameters:\fP
.RS 4
\fIname\fP The name of the parameter
.br
\fIval\fP A non-null instance of a persistent enumeration
.RE
.PP

.PP
Implemented in \fBNHibernate\&.Impl\&.AbstractQueryImpl\fP\&.
.SS "\fBIQuery\fP NHibernate\&.IQuery\&.SetFetchSize (intfetchSize)"

.PP
Set a fetch size for the underlying ADO query\&.
.PP
\fBParameters:\fP
.RS 4
\fIfetchSize\fP the fetch size 
.RE
.PP

.PP
Implemented in \fBNHibernate\&.Impl\&.AbstractQueryImpl\fP\&.
.SS "\fBIQuery\fP NHibernate\&.IQuery\&.SetFirstResult (intfirstResult)"

.PP
Sets the first row to retrieve\&. 
.PP
\fBParameters:\fP
.RS 4
\fIfirstResult\fP The first row to retreive\&.
.RE
.PP

.PP
Implemented in \fBNHibernate\&.Impl\&.AbstractQueryImpl\fP\&.
.SS "\fBIQuery\fP NHibernate\&.IQuery\&.SetFlushMode (\fBFlushMode\fPflushMode)"

.PP
Override the current session flush mode, just for this query\&. 
.PP
Implemented in \fBNHibernate\&.Impl\&.AbstractQueryImpl\fP\&.
.SS "\fBIQuery\fP NHibernate\&.IQuery\&.SetGuid (intposition, Guidval)"

.PP
Bind an instance of a Guid to a named parameter using an \fBNHibernate\fP GuidType\&. 
.PP
\fBParameters:\fP
.RS 4
\fIposition\fP The position of the parameter in the query string, numbered from \fC0\fP
.br
\fIval\fP An instance of a Guid\&.
.RE
.PP

.PP
Implemented in \fBNHibernate\&.Impl\&.AbstractQueryImpl\fP\&.
.SS "\fBIQuery\fP NHibernate\&.IQuery\&.SetGuid (stringname, Guidval)"

.PP
Bind an instance of a Guid to a named parameter using an \fBNHibernate\fP GuidType\&. 
.PP
\fBParameters:\fP
.RS 4
\fIname\fP The name of the parameter
.br
\fIval\fP An instance of a Guid\&.
.RE
.PP

.PP
Implemented in \fBNHibernate\&.Impl\&.AbstractQueryImpl\fP\&.
.SS "\fBIQuery\fP NHibernate\&.IQuery\&.SetInt16 (intposition, shortval)"

.PP
Bind an instance of a Int16 to an indexed parameter using an \fBNHibernate\fP Int16Type\&. 
.PP
\fBParameters:\fP
.RS 4
\fIposition\fP The position of the parameter in the query string, numbered from \fC0\fP
.br
\fIval\fP A non-null instance of a Int16\&.
.RE
.PP

.PP
Implemented in \fBNHibernate\&.Impl\&.AbstractQueryImpl\fP\&.
.SS "\fBIQuery\fP NHibernate\&.IQuery\&.SetInt16 (stringname, shortval)"

.PP
Bind an instance of a Int16 to a named parameter using an \fBNHibernate\fP Int16Type\&. 
.PP
\fBParameters:\fP
.RS 4
\fIname\fP The name of the parameter
.br
\fIval\fP A non-null instance of a Int16\&.
.RE
.PP

.PP
Implemented in \fBNHibernate\&.Impl\&.AbstractQueryImpl\fP\&.
.SS "\fBIQuery\fP NHibernate\&.IQuery\&.SetInt32 (intposition, intval)"

.PP
Bind an instance of a Int32 to an indexed parameter using an \fBNHibernate\fP Int32Type\&. 
.PP
\fBParameters:\fP
.RS 4
\fIposition\fP The position of the parameter in the query string, numbered from \fC0\fP
.br
\fIval\fP A non-null instance of a Int32\&.
.RE
.PP

.PP
Implemented in \fBNHibernate\&.Impl\&.AbstractQueryImpl\fP\&.
.SS "\fBIQuery\fP NHibernate\&.IQuery\&.SetInt32 (stringname, intval)"

.PP
Bind an instance of a Int32 to a named parameter using an \fBNHibernate\fP Int32Type\&. 
.PP
\fBParameters:\fP
.RS 4
\fIname\fP The name of the parameter
.br
\fIval\fP A non-null instance of a Int32\&.
.RE
.PP

.PP
Implemented in \fBNHibernate\&.Impl\&.AbstractQueryImpl\fP\&.
.SS "\fBIQuery\fP NHibernate\&.IQuery\&.SetInt64 (intposition, longval)"

.PP
Bind an instance of a Int64 to an indexed parameter using an \fBNHibernate\fP Int64Type\&. 
.PP
\fBParameters:\fP
.RS 4
\fIposition\fP The position of the parameter in the query string, numbered from \fC0\fP
.br
\fIval\fP A non-null instance of a Int64\&.
.RE
.PP

.PP
Implemented in \fBNHibernate\&.Impl\&.AbstractQueryImpl\fP\&.
.SS "\fBIQuery\fP NHibernate\&.IQuery\&.SetInt64 (stringname, longval)"

.PP
Bind an instance of a Int64 to a named parameter using an \fBNHibernate\fP Int64Type\&. 
.PP
\fBParameters:\fP
.RS 4
\fIname\fP The name of the parameter
.br
\fIval\fP A non-null instance of a Int64\&.
.RE
.PP

.PP
Implemented in \fBNHibernate\&.Impl\&.AbstractQueryImpl\fP\&.
.SS "\fBIQuery\fP NHibernate\&.IQuery\&.SetLockMode (stringalias, \fBLockMode\fPlockMode)"

.PP
Set the lockmode for the objects idententified by the given alias that appears in the \fCFROM\fP clause\&. 
.PP
\fBParameters:\fP
.RS 4
\fIalias\fP alias a query alias, or \fCthis\fP for a collection filter
.br
\fIlockMode\fP 
.RE
.PP

.PP
Implemented in \fBNHibernate\&.Impl\&.AbstractQueryImpl\fP, \fBNHibernate\&.Impl\&.SqlQueryImpl\fP, and \fBNHibernate\&.Impl\&.AbstractQueryImpl2\fP\&.
.SS "\fBIQuery\fP NHibernate\&.IQuery\&.SetMaxResults (intmaxResults)"

.PP
Set the maximum number of rows to retrieve\&. 
.PP
\fBParameters:\fP
.RS 4
\fImaxResults\fP The maximum number of rows to retreive\&.
.RE
.PP

.PP
Implemented in \fBNHibernate\&.Impl\&.AbstractQueryImpl\fP\&.
.SS "\fBIQuery\fP NHibernate\&.IQuery\&.SetParameter (intposition, objectval, \fBIType\fPtype)"

.PP
Bind a value to an indexed parameter\&. 
.PP
\fBParameters:\fP
.RS 4
\fIposition\fP Position of the parameter in the query, numbered from \fC0\fP
.br
\fIval\fP The possibly null parameter value
.br
\fItype\fP The \fBNHibernate\fP type
.RE
.PP

.PP
Implemented in \fBNHibernate\&.Impl\&.AbstractQueryImpl\fP\&.
.SS "\fBIQuery\fP NHibernate\&.IQuery\&.SetParameter (stringname, objectval, \fBIType\fPtype)"

.PP
Bind a value to a named query parameter 
.PP
\fBParameters:\fP
.RS 4
\fIname\fP The name of the parameter
.br
\fIval\fP The possibly null parameter value
.br
\fItype\fP The \fBNHibernate\fP IType\&.
.RE
.PP

.PP
Implemented in \fBNHibernate\&.Impl\&.AbstractQueryImpl\fP\&.
.SS "\fBIQuery\fP NHibernate\&.IQuery\&.SetParameter (intposition, objectval)"

.PP
Bind a value to an indexed parameter, guessing the \fBNHibernate\fP type from the class of the given object\&. 
.PP
\fBParameters:\fP
.RS 4
\fIposition\fP The position of the parameter in the query, numbered from \fC0\fP
.br
\fIval\fP The non-null parameter value
.RE
.PP

.PP
Implemented in \fBNHibernate\&.Impl\&.AbstractQueryImpl\fP\&.
.SS "\fBIQuery\fP NHibernate\&.IQuery\&.SetParameter (stringname, objectval)"

.PP
Bind a value to a named query parameter, guessing the \fBNHibernate\fP IType from the class of the given object\&. 
.PP
\fBParameters:\fP
.RS 4
\fIname\fP The name of the parameter
.br
\fIval\fP The non-null parameter value
.RE
.PP

.PP
Implemented in \fBNHibernate\&.Impl\&.AbstractQueryImpl\fP\&.
.SS "\fBIQuery\fP \fBNHibernate\&.IQuery\&.SetParameter\fP< T > (intposition, Tval)"

.PP
Bind a value to an indexed parameter\&. 
.PP
\fBParameters:\fP
.RS 4
\fIposition\fP Position of the parameter in the query, numbered from \fC0\fP
.br
\fIval\fP The possibly null parameter value
.RE
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIT\fP The parameter's \fBType\fP 
.RE
.PP

.PP
Implemented in \fBNHibernate\&.Impl\&.AbstractQueryImpl\fP\&.
.SS "\fBIQuery\fP \fBNHibernate\&.IQuery\&.SetParameter\fP< T > (stringname, Tval)"

.PP
Bind a value to a named query parameter 
.PP
\fBParameters:\fP
.RS 4
\fIname\fP The name of the parameter
.br
\fIval\fP The possibly null parameter value
.RE
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIT\fP The parameter's \fBType\fP 
.RE
.PP

.PP
Implemented in \fBNHibernate\&.Impl\&.AbstractQueryImpl\fP\&.
.SS "\fBIQuery\fP NHibernate\&.IQuery\&.SetParameterList (stringname, IEnumerablevals, \fBIType\fPtype)"

.PP
Bind multiple values to a named query parameter\&. This is useful for binding a list of values to an expression such as \fCfoo\&.bar in (:value_list)\fP 
.PP
\fBParameters:\fP
.RS 4
\fIname\fP The name of the parameter
.br
\fIvals\fP A collection of values to list
.br
\fItype\fP The \fBNHibernate\fP type of the values
.RE
.PP

.PP
Implemented in \fBNHibernate\&.Impl\&.AbstractQueryImpl\fP\&.
.SS "\fBIQuery\fP NHibernate\&.IQuery\&.SetParameterList (stringname, IEnumerablevals)"

.PP
Bind multiple values to a named query parameter, guessing the \fBNHibernate\fP type from the class of the first object in the collection\&. This is useful for binding a list of values to an expression such as \fCfoo\&.bar in (:value_list)\fP 
.PP
\fBParameters:\fP
.RS 4
\fIname\fP The name of the parameter
.br
\fIvals\fP A collection of values to list
.RE
.PP

.PP
Implemented in \fBNHibernate\&.Impl\&.AbstractQueryImpl\fP\&.
.SS "\fBIQuery\fP NHibernate\&.IQuery\&.SetProperties (objectobj)"

.PP
Bind the property values of the given object to named parameters of the query, matching property names with parameter names and mapping property types to \fBNHibernate\fP types using heuristics\&. 
.PP
\fBParameters:\fP
.RS 4
\fIobj\fP Any PONO
.RE
.PP

.PP
Implemented in \fBNHibernate\&.Impl\&.AbstractQueryImpl\fP\&.
.SS "\fBIQuery\fP NHibernate\&.IQuery\&.SetReadOnly (boolreadOnly)"

.PP
Set the read-only mode for entities (and proxies) loaded by this query\&. This setting overrides the default setting for the session (see \fBISession\&.DefaultReadOnly\fP)\&. Read-only entities can be modified, but changes are not persisted\&. They are not dirty-checked and snapshots of persistent state are not maintained\&. 
.PP
When a proxy is initialized, the loaded entity will have the same read-only setting as the uninitialized proxy, regardless of the session's current setting\&. 
.PP
The read-only setting has no impact on entities or proxies returned by the criteria that existed in the session before the criteria was executed\&. 
.PP
\fBParameters:\fP
.RS 4
\fIreadOnly\fP If \fCtrue\fP, entities (and proxies) loaded by the query will be read-only\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
\fCthis\fP (for method chaining)
.RE
.PP
\fBSee Also:\fP
.RS 4
\fBIsReadOnly\fP
.PP
.RE
.PP

.PP
Implemented in \fBNHibernate\&.Impl\&.AbstractQueryImpl\fP\&.
.SS "\fBIQuery\fP NHibernate\&.IQuery\&.SetResultTransformer (\fBIResultTransformer\fPresultTransformer)"

.PP
Set a strategy for handling the query results\&. This can be used to change 'shape' of the query result\&. 
.PP
Implemented in \fBNHibernate\&.Impl\&.AbstractQueryImpl\fP\&.
.SS "\fBIQuery\fP NHibernate\&.IQuery\&.SetSingle (intposition, floatval)"

.PP
Bind an instance of a Single to an indexed parameter using an \fBNHibernate\fP SingleType\&. 
.PP
\fBParameters:\fP
.RS 4
\fIposition\fP The position of the parameter in the query string, numbered from \fC0\fP
.br
\fIval\fP A non-null instance of a Single\&.
.RE
.PP

.PP
Implemented in \fBNHibernate\&.Impl\&.AbstractQueryImpl\fP\&.
.SS "\fBIQuery\fP NHibernate\&.IQuery\&.SetSingle (stringname, floatval)"

.PP
Bind an instance of a Single to a named parameter using an \fBNHibernate\fP SingleType\&. 
.PP
\fBParameters:\fP
.RS 4
\fIname\fP The name of the parameter
.br
\fIval\fP A non-null instance of a Single\&.
.RE
.PP

.PP
Implemented in \fBNHibernate\&.Impl\&.AbstractQueryImpl\fP\&.
.SS "\fBIQuery\fP NHibernate\&.IQuery\&.SetString (intposition, stringval)"

.PP
Bind an instance of a String to an indexed parameter using an \fBNHibernate\fP StringType\&. 
.PP
\fBParameters:\fP
.RS 4
\fIposition\fP The position of the parameter in the query string, numbered from \fC0\fP
.br
\fIval\fP A non-null instance of a String\&.
.RE
.PP

.PP
Implemented in \fBNHibernate\&.Impl\&.AbstractQueryImpl\fP\&.
.SS "\fBIQuery\fP NHibernate\&.IQuery\&.SetString (stringname, stringval)"

.PP
Bind an instance of a String to a named parameter using an \fBNHibernate\fP StringType\&. 
.PP
\fBParameters:\fP
.RS 4
\fIname\fP The name of the parameter
.br
\fIval\fP A non-null instance of a String\&.
.RE
.PP

.PP
Implemented in \fBNHibernate\&.Impl\&.AbstractQueryImpl\fP\&.
.SS "\fBIQuery\fP NHibernate\&.IQuery\&.SetTime (intposition, DateTimeval)"

.PP
Bind an instance of a DateTime to an indexed parameter using an \fBNHibernate\fP DateTimeType\&. 
.PP
\fBParameters:\fP
.RS 4
\fIposition\fP The position of the parameter in the query string, numbered from \fC0\fP
.br
\fIval\fP A non-null instance of a DateTime\&.
.RE
.PP

.PP
Implemented in \fBNHibernate\&.Impl\&.AbstractQueryImpl\fP\&.
.SS "\fBIQuery\fP NHibernate\&.IQuery\&.SetTime (stringname, DateTimeval)"

.PP
Bind an instance of a DateTime to a named parameter using an \fBNHibernate\fP DateTimeType\&. 
.PP
\fBParameters:\fP
.RS 4
\fIname\fP The name of the parameter
.br
\fIval\fP A non-null instance of a DateTime\&.
.RE
.PP

.PP
Implemented in \fBNHibernate\&.Impl\&.AbstractQueryImpl\fP\&.
.SS "\fBIQuery\fP NHibernate\&.IQuery\&.SetTimeout (inttimeout)"

.PP
The timeout for the underlying ADO query 
.PP
\fBParameters:\fP
.RS 4
\fItimeout\fP 
.RE
.PP

.PP
Implemented in \fBNHibernate\&.Impl\&.AbstractQueryImpl\fP\&.
.SS "\fBIQuery\fP NHibernate\&.IQuery\&.SetTimestamp (intposition, DateTimeval)"

.PP
Bind an instance of a DateTime to an indexed parameter using an \fBNHibernate\fP TimestampType\&. 
.PP
\fBParameters:\fP
.RS 4
\fIposition\fP The position of the parameter in the query string, numbered from \fC0\fP
.br
\fIval\fP A non-null instance of a DateTime\&.
.RE
.PP

.PP
Implemented in \fBNHibernate\&.Impl\&.AbstractQueryImpl\fP\&.
.SS "\fBIQuery\fP NHibernate\&.IQuery\&.SetTimestamp (stringname, DateTimeval)"

.PP
Bind an instance of a DateTime to a named parameter using an \fBNHibernate\fP TimestampType\&. 
.PP
\fBParameters:\fP
.RS 4
\fIname\fP The name of the parameter
.br
\fIval\fP A non-null instance of a DateTime\&.
.RE
.PP

.PP
Implemented in \fBNHibernate\&.Impl\&.AbstractQueryImpl\fP\&.
.SS "object NHibernate\&.IQuery\&.UniqueResult ()"

.PP
Convenience method to return a single instance that matches the query, or null if the query returns no results\&. 
.PP
\fBReturns:\fP
.RS 4
the single result or 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBHibernateException\fP\fP Thrown when there is more than one matching result\&. 
.RE
.PP

.PP
Implemented in \fBNHibernate\&.Impl\&.AbstractQueryImpl\fP\&.
.SS "T \fBNHibernate\&.IQuery\&.UniqueResult\fP< T > ()"

.PP
Strongly-typed version of \fBUniqueResult()\fP\&. 
.PP
Implemented in \fBNHibernate\&.Impl\&.AbstractQueryImpl\fP\&.
.SH "Property Documentation"
.PP 
.SS "bool NHibernate\&.IQuery\&.IsReadOnly\fC [get]\fP"

.PP
Will entities (and proxies) returned by the query be loaded in read-only mode? If the query's read-only setting is not initialized (with \fBSetReadOnly(bool)\fP), the value of the session's \fBISession\&.DefaultReadOnly\fP property is returned instead\&. 
.PP
The value of this property has no effect on entities or proxies returned by the query that existed in the session before the query was executed\&. 
.PP
\fBReturns:\fP
.RS 4
\fCtrue\fP if entities and proxies loaded by the query will be put in read-only mode, otherwise \fCfalse\fP\&. 
.RE
.PP
\fBSee Also:\fP
.RS 4
\fBIQuery\&.SetReadOnly(bool)\fP
.PP
.RE
.PP

.PP
Definition at line 97 of file IQuery\&.cs\&.
.SS "string [] NHibernate\&.IQuery\&.NamedParameters\fC [get]\fP"

.PP
The names of all named parameters of the query The parameter names, in no particular order
.PP
Definition at line 77 of file IQuery\&.cs\&.
.SS "string NHibernate\&.IQuery\&.QueryString\fC [get]\fP"

.PP
The query string 
.PP
Definition at line 62 of file IQuery\&.cs\&.
.SS "string [] NHibernate\&.IQuery\&.ReturnAliases\fC [get]\fP"

.PP
Return the HQL select clause aliases (if any)
.PP
\fBReturns:\fP
.RS 4
An array of aliases as strings 
.RE
.PP

.PP
Definition at line 71 of file IQuery\&.cs\&.
.SS "\fBIType\fP [] NHibernate\&.IQuery\&.ReturnTypes\fC [get]\fP"

.PP
The \fBNHibernate\fP types of the query result set\&. 
.PP
Definition at line 67 of file IQuery\&.cs\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for HSA\&.InfoSys from the source code\&.
