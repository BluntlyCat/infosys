.TH "NHibernate.Impl.AbstractSessionImpl" 3 "Fri Jul 5 2013" "Version 1.0" "HSA.InfoSys" \" -*- nroff -*-
.ad l
.nh
.SH NAME
NHibernate.Impl.AbstractSessionImpl \- 
.PP
Functionality common to stateless and stateful sessions  

.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBNHibernate\&.Engine\&.ISessionImplementor\fP\&.
.PP
Inherited by \fBNHibernate\&.Impl\&.SessionImpl\fP, and \fBNHibernate\&.Impl\&.StatelessSessionImpl\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBInitialize\fP ()"
.br
.RI "\fIInitialize the session after its construction was complete \fP"
.ti -1c
.RI "abstract void \fBInitializeCollection\fP (\fBIPersistentCollection\fP collection, bool writing)"
.br
.RI "\fIInitialize the collection (if not already initialized) \fP"
.ti -1c
.RI "abstract object \fBInternalLoad\fP (string entityName, object id, bool eager, bool isNullable)"
.br
.RI "\fILoad an instance without checking if it was deleted\&. If it does not exist and isn't nullable, throw an exception\&. This method may create a new proxy or return an existing proxy\&. \fP"
.ti -1c
.RI "abstract object \fBImmediateLoad\fP (string entityName, object id)"
.br
.RI "\fILoad an instance immediately\&. Do not return a proxy\&. \fP"
.ti -1c
.RI "\fBEntityKey\fP \fBGenerateEntityKey\fP (object id, \fBIEntityPersister\fP persister)"
.br
.ti -1c
.RI "\fBCacheKey\fP \fBGenerateCacheKey\fP (object id, \fBIType\fP type, string entityOrRoleName)"
.br
.ti -1c
.RI "abstract void \fBCloseSessionFromDistributedTransaction\fP ()"
.br
.ti -1c
.RI "virtual IList \fBList\fP (string query, \fBQueryParameters\fP parameters)"
.br
.RI "\fIExecute a \fC\fBList()\fP\fP query \fP"
.ti -1c
.RI "virtual void \fBList\fP (string query, \fBQueryParameters\fP queryParameters, IList results)"
.br
.ti -1c
.RI "virtual IList< T > \fBList< T >\fP (string query, \fBQueryParameters\fP queryParameters)"
.br
.RI "\fIStrongly-typed version of \fBList(string,QueryParameters)\fP \fP"
.ti -1c
.RI "virtual IList \fBList\fP (\fBIQueryExpression\fP queryExpression, \fBQueryParameters\fP parameters)"
.br
.RI "\fIExecute a \fC\fBList()\fP\fP expression query \fP"
.ti -1c
.RI "abstract void \fBList\fP (\fBIQueryExpression\fP queryExpression, \fBQueryParameters\fP queryParameters, IList results)"
.br
.ti -1c
.RI "virtual IList< T > \fBList< T >\fP (\fBIQueryExpression\fP query, \fBQueryParameters\fP parameters)"
.br
.RI "\fIStrongly-typed version of \fBList(IQueryExpression,QueryParameters)\fP \fP"
.ti -1c
.RI "virtual IList< T > \fBList< T >\fP (\fBCriteriaImpl\fP criteria)"
.br
.RI "\fIStrongly-typed version of List(CriteriaImpl) \fP"
.ti -1c
.RI "abstract void \fBList\fP (\fBCriteriaImpl\fP criteria, IList results)"
.br
.ti -1c
.RI "virtual IList \fBList\fP (\fBCriteriaImpl\fP criteria)"
.br
.ti -1c
.RI "abstract IList \fBListFilter\fP (object collection, string filter, \fBQueryParameters\fP parameters)"
.br
.RI "\fIExecute a filter \fP"
.ti -1c
.RI "abstract IList< T > \fBListFilter< T >\fP (object collection, string filter, \fBQueryParameters\fP parameters)"
.br
.RI "\fIExecute a filter (strongly-typed version)\&. \fP"
.ti -1c
.RI "abstract IEnumerable \fBEnumerableFilter\fP (object collection, string filter, \fBQueryParameters\fP parameters)"
.br
.RI "\fI\fBCollection\fP from a filter \fP"
.ti -1c
.RI "abstract IEnumerable< T > \fBEnumerableFilter< T >\fP (object collection, string filter, \fBQueryParameters\fP parameters)"
.br
.RI "\fIStrongly-typed version of \fBEnumerableFilter(object, string, QueryParameters)\fP \fP"
.ti -1c
.RI "abstract \fBIEntityPersister\fP \fBGetEntityPersister\fP (string entityName, object obj)"
.br
.RI "\fIGet the IEntityPersister for any instance\fP"
.ti -1c
.RI "abstract void \fBAfterTransactionBegin\fP (\fBITransaction\fP tx)"
.br
.RI "\fINotify the session that an \fBNHibernate\fP transaction has begun\&. \fP"
.ti -1c
.RI "abstract void \fBBeforeTransactionCompletion\fP (\fBITransaction\fP tx)"
.br
.RI "\fINotify the session that the transaction is about to complete \fP"
.ti -1c
.RI "abstract void \fBAfterTransactionCompletion\fP (bool successful, \fBITransaction\fP tx)"
.br
.RI "\fINotify the session that the transaction completed, so we no longer own the old locks\&. (Also we should release cache softlocks)\&. May be called multiple times during the transaction completion process\&. \fP"
.ti -1c
.RI "abstract object \fBGetContextEntityIdentifier\fP (object obj)"
.br
.RI "\fIReturn the identifier of the persistent object, or null if transient \fP"
.ti -1c
.RI "abstract object \fBInstantiate\fP (string clazz, object id)"
.br
.RI "\fIInstantiate the entity class, initializing with the given identifier \fP"
.ti -1c
.RI "virtual IList \fBList\fP (\fBNativeSQLQuerySpecification\fP spec, \fBQueryParameters\fP queryParameters)"
.br
.RI "\fIExecute an SQL Query \fP"
.ti -1c
.RI "virtual void \fBList\fP (\fBNativeSQLQuerySpecification\fP spec, \fBQueryParameters\fP queryParameters, IList results)"
.br
.ti -1c
.RI "virtual IList< T > \fBList< T >\fP (\fBNativeSQLQuerySpecification\fP spec, \fBQueryParameters\fP queryParameters)"
.br
.RI "\fIStrongly-typed version of \fBList(NativeSQLQuerySpecification, QueryParameters)\fP \fP"
.ti -1c
.RI "abstract void \fBListCustomQuery\fP (\fBICustomQuery\fP customQuery, \fBQueryParameters\fP queryParameters, IList results)"
.br
.RI "\fIExecute an SQL Query\fP"
.ti -1c
.RI "virtual IList< T > \fBListCustomQuery< T >\fP (\fBICustomQuery\fP customQuery, \fBQueryParameters\fP queryParameters)"
.br
.ti -1c
.RI "abstract object \fBGetFilterParameterValue\fP (string filterParameterName)"
.br
.RI "\fIRetrieve the currently set value for a filter parameter\&. \fP"
.ti -1c
.RI "abstract \fBIType\fP \fBGetFilterParameterType\fP (string filterParameterName)"
.br
.RI "\fIRetrieve the type for a given filter parameter\&. \fP"
.ti -1c
.RI "virtual \fBIQuery\fP \fBGetNamedSQLQuery\fP (string name)"
.br
.ti -1c
.RI "virtual \fBIQueryTranslator\fP[] \fBGetQueries\fP (string query, bool scalar)"
.br
.ti -1c
.RI "abstract \fBIQueryTranslator\fP[] \fBGetQueries\fP (\fBIQueryExpression\fP query, bool scalar)"
.br
.ti -1c
.RI "abstract object \fBGetEntityUsingInterceptor\fP (\fBEntityKey\fP key)"
.br
.RI "\fIGet the entity instance associated with the given \fCKey\fP, calling the Interceptor if necessary \fP"
.ti -1c
.RI "abstract string \fBBestGuessEntityName\fP (object entity)"
.br
.RI "\fIThe best guess entity name for an entity not in an association\fP"
.ti -1c
.RI "abstract string \fBGuessEntityName\fP (object entity)"
.br
.RI "\fIThe guessed entity name for an entity not in an association\fP"
.ti -1c
.RI "abstract int \fBExecuteNativeUpdate\fP (\fBNativeSQLQuerySpecification\fP specification, \fBQueryParameters\fP queryParameters)"
.br
.RI "\fIExecute a native SQL update or delete query\fP"
.ti -1c
.RI "virtual \fBIQuery\fP \fBGetNamedQuery\fP (string queryName)"
.br
.ti -1c
.RI "abstract void \fBFlush\fP ()"
.br
.ti -1c
.RI "virtual \fBIQuery\fP \fBCreateQuery\fP (\fBIQueryExpression\fP queryExpression)"
.br
.RI "\fICreate a new instance of \fCQuery\fP for the given query expression 
.PP
\fBParameters:\fP
.RS 4
\fIqueryExpression\fP A hibernate query expression
.RE
.PP
\fBReturns:\fP
.RS 4
The query
.RE
.PP
\fP"
.ti -1c
.RI "virtual \fBIQuery\fP \fBCreateQuery\fP (string queryString)"
.br
.ti -1c
.RI "virtual \fBISQLQuery\fP \fBCreateSQLQuery\fP (string sql)"
.br
.ti -1c
.RI "abstract IEnumerable \fBEnumerable\fP (\fBIQueryExpression\fP queryExpression, \fBQueryParameters\fP queryParameters)"
.br
.RI "\fIExecute an \fCIterate()\fP query \fP"
.ti -1c
.RI "virtual IEnumerable \fBEnumerable\fP (string query, \fBQueryParameters\fP queryParameters)"
.br
.RI "\fIExecute an \fCIterate()\fP query \fP"
.ti -1c
.RI "virtual IEnumerable< T > \fBEnumerable< T >\fP (string query, \fBQueryParameters\fP queryParameters)"
.br
.RI "\fIStrongly-typed version of \fBEnumerable(string, QueryParameters)\fP \fP"
.ti -1c
.RI "abstract IEnumerable< T > \fBEnumerable< T >\fP (\fBIQueryExpression\fP queryExpression, \fBQueryParameters\fP queryParameters)"
.br
.RI "\fIStrongly-typed version of \fBEnumerable(IQueryExpression, QueryParameters)\fP \fP"
.ti -1c
.RI "virtual int \fBExecuteUpdate\fP (string query, \fBQueryParameters\fP queryParameters)"
.br
.RI "\fIExecute a HQL update or delete query\fP"
.ti -1c
.RI "abstract int \fBExecuteUpdate\fP (\fBIQueryExpression\fP queryExpression, \fBQueryParameters\fP queryParameters)"
.br
.RI "\fIExecute a HQL update or delete query\fP"
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBEntityKey\fP \fBGenerateEntityKey\fP (object id, \fBIEntityPersister\fP persister, \fBEntityMode\fP entityMode)"
.br
.ti -1c
.RI "Exception \fBConvert\fP (Exception sqlException, string message)"
.br
.ti -1c
.RI "void \fBAfterOperation\fP (bool success)"
.br
.ti -1c
.RI "void \fBEnlistInAmbientTransactionIfNeeded\fP ()"
.br
.in -1c
.SS "Properties"

.in +1c
.ti -1c
.RI "\fBITransactionContext\fP \fBTransactionContext\fP\fC [get, set]\fP"
.br
.ti -1c
.RI "Guid \fBSessionId\fP\fC [get]\fP"
.br
.ti -1c
.RI "abstract long \fBTimestamp\fP\fC [get]\fP"
.br
.ti -1c
.RI "\fBISessionFactoryImplementor\fP \fBFactory\fP\fC [get, set]\fP"
.br
.ti -1c
.RI "abstract \fBEntityMode\fP \fBEntityMode\fP\fC [get]\fP"
.br
.ti -1c
.RI "abstract \fBIBatcher\fP \fBBatcher\fP\fC [get]\fP"
.br
.ti -1c
.RI "abstract IDictionary< string, 
.br
\fBIFilter\fP > \fBEnabledFilters\fP\fC [get]\fP"
.br
.ti -1c
.RI "abstract \fBIInterceptor\fP \fBInterceptor\fP\fC [get]\fP"
.br
.ti -1c
.RI "abstract \fBEventListeners\fP \fBListeners\fP\fC [get]\fP"
.br
.ti -1c
.RI "abstract int \fBDontFlushFromFind\fP\fC [get]\fP"
.br
.ti -1c
.RI "abstract \fBConnectionManager\fP \fBConnectionManager\fP\fC [get]\fP"
.br
.ti -1c
.RI "abstract bool \fBIsEventSource\fP\fC [get]\fP"
.br
.ti -1c
.RI "abstract \fBIPersistenceContext\fP \fBPersistenceContext\fP\fC [get]\fP"
.br
.ti -1c
.RI "abstract \fBCacheMode\fP \fBCacheMode\fP\fC [get, set]\fP"
.br
.ti -1c
.RI "abstract bool \fBIsOpen\fP\fC [get]\fP"
.br
.ti -1c
.RI "abstract bool \fBIsConnected\fP\fC [get]\fP"
.br
.ti -1c
.RI "abstract \fBFlushMode\fP \fBFlushMode\fP\fC [get, set]\fP"
.br
.ti -1c
.RI "abstract string \fBFetchProfile\fP\fC [get, set]\fP"
.br
.ti -1c
.RI "abstract IDbConnection \fBConnection\fP\fC [get]\fP"
.br
.ti -1c
.RI "abstract \fBFutureCriteriaBatch\fP \fBFutureCriteriaBatch\fP\fC [get, set]\fP"
.br
.ti -1c
.RI "abstract \fBFutureQueryBatch\fP \fBFutureQueryBatch\fP\fC [get, set]\fP"
.br
.ti -1c
.RI "bool \fBIsClosed\fP\fC [get]\fP"
.br
.ti -1c
.RI "bool \fBIsAlreadyDisposed\fP\fC [get, set]\fP"
.br
.ti -1c
.RI "abstract bool \fBTransactionInProgress\fP\fC [get]\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Functionality common to stateless and stateful sessions 


.PP
Definition at line 26 of file AbstractSessionImpl\&.cs\&.
.SH "Member Function Documentation"
.PP 
.SS "abstract void NHibernate\&.Impl\&.AbstractSessionImpl\&.AfterTransactionBegin (\fBITransaction\fPtx)\fC [pure virtual]\fP"

.PP
Notify the session that an \fBNHibernate\fP transaction has begun\&. 
.PP
Implements \fBNHibernate\&.Engine\&.ISessionImplementor\fP\&.
.PP
Implemented in \fBNHibernate\&.Impl\&.SessionImpl\fP, and \fBNHibernate\&.Impl\&.StatelessSessionImpl\fP\&.
.SS "abstract void NHibernate\&.Impl\&.AbstractSessionImpl\&.AfterTransactionCompletion (boolsuccessful, \fBITransaction\fPtx)\fC [pure virtual]\fP"

.PP
Notify the session that the transaction completed, so we no longer own the old locks\&. (Also we should release cache softlocks)\&. May be called multiple times during the transaction completion process\&. 
.PP
Implements \fBNHibernate\&.Engine\&.ISessionImplementor\fP\&.
.PP
Implemented in \fBNHibernate\&.Impl\&.SessionImpl\fP, and \fBNHibernate\&.Impl\&.StatelessSessionImpl\fP\&.
.SS "abstract void NHibernate\&.Impl\&.AbstractSessionImpl\&.BeforeTransactionCompletion (\fBITransaction\fPtx)\fC [pure virtual]\fP"

.PP
Notify the session that the transaction is about to complete 
.PP
Implements \fBNHibernate\&.Engine\&.ISessionImplementor\fP\&.
.PP
Implemented in \fBNHibernate\&.Impl\&.SessionImpl\fP, and \fBNHibernate\&.Impl\&.StatelessSessionImpl\fP\&.
.SS "abstract string NHibernate\&.Impl\&.AbstractSessionImpl\&.BestGuessEntityName (objectentity)\fC [pure virtual]\fP"

.PP
The best guess entity name for an entity not in an association
.PP
Implements \fBNHibernate\&.Engine\&.ISessionImplementor\fP\&.
.PP
Implemented in \fBNHibernate\&.Impl\&.SessionImpl\fP, and \fBNHibernate\&.Impl\&.StatelessSessionImpl\fP\&.
.SS "virtual \fBIQuery\fP NHibernate\&.Impl\&.AbstractSessionImpl\&.CreateQuery (\fBIQueryExpression\fPqueryExpression)\fC [virtual]\fP"

.PP
Create a new instance of \fCQuery\fP for the given query expression 
.PP
\fBParameters:\fP
.RS 4
\fIqueryExpression\fP A hibernate query expression
.RE
.PP
\fBReturns:\fP
.RS 4
The query
.RE
.PP

.PP
Implements \fBNHibernate\&.Engine\&.ISessionImplementor\fP\&.
.PP
Definition at line 367 of file AbstractSessionImpl\&.cs\&.
.SS "abstract IEnumerable NHibernate\&.Impl\&.AbstractSessionImpl\&.Enumerable (\fBIQueryExpression\fPquery, \fBQueryParameters\fPparameters)\fC [pure virtual]\fP"

.PP
Execute an \fCIterate()\fP query 
.PP
\fBParameters:\fP
.RS 4
\fIquery\fP 
.br
\fIparameters\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
.RE
.PP

.PP
Implements \fBNHibernate\&.Engine\&.ISessionImplementor\fP\&.
.PP
Implemented in \fBNHibernate\&.Impl\&.SessionImpl\fP, and \fBNHibernate\&.Impl\&.StatelessSessionImpl\fP\&.
.SS "virtual IEnumerable NHibernate\&.Impl\&.AbstractSessionImpl\&.Enumerable (stringquery, \fBQueryParameters\fPparameters)\fC [virtual]\fP"

.PP
Execute an \fCIterate()\fP query 
.PP
\fBParameters:\fP
.RS 4
\fIquery\fP 
.br
\fIparameters\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
.RE
.PP

.PP
Implements \fBNHibernate\&.Engine\&.ISessionImplementor\fP\&.
.PP
Definition at line 464 of file AbstractSessionImpl\&.cs\&.
.SS "virtual IEnumerable<T> \fBNHibernate\&.Impl\&.AbstractSessionImpl\&.Enumerable\fP< T > (stringquery, \fBQueryParameters\fPqueryParameters)\fC [virtual]\fP"

.PP
Strongly-typed version of \fBEnumerable(string, QueryParameters)\fP 
.PP
Implements \fBNHibernate\&.Engine\&.ISessionImplementor\fP\&.
.PP
Definition at line 470 of file AbstractSessionImpl\&.cs\&.
.SS "abstract IEnumerable<T> \fBNHibernate\&.Impl\&.AbstractSessionImpl\&.Enumerable\fP< T > (\fBIQueryExpression\fPquery, \fBQueryParameters\fPqueryParameters)\fC [pure virtual]\fP"

.PP
Strongly-typed version of \fBEnumerable(IQueryExpression, QueryParameters)\fP 
.PP
Implements \fBNHibernate\&.Engine\&.ISessionImplementor\fP\&.
.PP
Implemented in \fBNHibernate\&.Impl\&.SessionImpl\fP, and \fBNHibernate\&.Impl\&.StatelessSessionImpl\fP\&.
.SS "abstract IEnumerable NHibernate\&.Impl\&.AbstractSessionImpl\&.EnumerableFilter (objectcollection, stringfilter, \fBQueryParameters\fPparameters)\fC [pure virtual]\fP"

.PP
\fBCollection\fP from a filter 
.PP
Implements \fBNHibernate\&.Engine\&.ISessionImplementor\fP\&.
.PP
Implemented in \fBNHibernate\&.Impl\&.SessionImpl\fP, and \fBNHibernate\&.Impl\&.StatelessSessionImpl\fP\&.
.SS "abstract IEnumerable<T> \fBNHibernate\&.Impl\&.AbstractSessionImpl\&.EnumerableFilter\fP< T > (objectcollection, stringfilter, \fBQueryParameters\fPparameters)\fC [pure virtual]\fP"

.PP
Strongly-typed version of \fBEnumerableFilter(object, string, QueryParameters)\fP 
.PP
Implements \fBNHibernate\&.Engine\&.ISessionImplementor\fP\&.
.PP
Implemented in \fBNHibernate\&.Impl\&.SessionImpl\fP, and \fBNHibernate\&.Impl\&.StatelessSessionImpl\fP\&.
.SS "abstract int NHibernate\&.Impl\&.AbstractSessionImpl\&.ExecuteNativeUpdate (\fBNativeSQLQuerySpecification\fPspecification, \fBQueryParameters\fPqueryParameters)\fC [pure virtual]\fP"

.PP
Execute a native SQL update or delete query
.PP
Implements \fBNHibernate\&.Engine\&.ISessionImplementor\fP\&.
.PP
Implemented in \fBNHibernate\&.Impl\&.SessionImpl\fP, and \fBNHibernate\&.Impl\&.StatelessSessionImpl\fP\&.
.SS "virtual int NHibernate\&.Impl\&.AbstractSessionImpl\&.ExecuteUpdate (stringquery, \fBQueryParameters\fPqueryParameters)\fC [virtual]\fP"

.PP
Execute a HQL update or delete query
.PP
Implements \fBNHibernate\&.Engine\&.ISessionImplementor\fP\&.
.PP
Definition at line 478 of file AbstractSessionImpl\&.cs\&.
.SS "abstract int NHibernate\&.Impl\&.AbstractSessionImpl\&.ExecuteUpdate (\fBIQueryExpression\fPquery, \fBQueryParameters\fPqueryParameters)\fC [pure virtual]\fP"

.PP
Execute a HQL update or delete query
.PP
Implements \fBNHibernate\&.Engine\&.ISessionImplementor\fP\&.
.PP
Implemented in \fBNHibernate\&.Impl\&.SessionImpl\fP, and \fBNHibernate\&.Impl\&.StatelessSessionImpl\fP\&.
.SS "abstract object NHibernate\&.Impl\&.AbstractSessionImpl\&.GetContextEntityIdentifier (objectobj)\fC [pure virtual]\fP"

.PP
Return the identifier of the persistent object, or null if transient 
.PP
Implements \fBNHibernate\&.Engine\&.ISessionImplementor\fP\&.
.PP
Implemented in \fBNHibernate\&.Impl\&.SessionImpl\fP, and \fBNHibernate\&.Impl\&.StatelessSessionImpl\fP\&.
.SS "abstract \fBIEntityPersister\fP NHibernate\&.Impl\&.AbstractSessionImpl\&.GetEntityPersister (stringentityName, objectobj)\fC [pure virtual]\fP"

.PP
Get the IEntityPersister for any instance
.PP
\fBParameters:\fP
.RS 4
\fIentityName\fP optional entity name 
.br
\fIobj\fP the entity instance 
.RE
.PP

.PP
Implements \fBNHibernate\&.Engine\&.ISessionImplementor\fP\&.
.PP
Implemented in \fBNHibernate\&.Impl\&.SessionImpl\fP, and \fBNHibernate\&.Impl\&.StatelessSessionImpl\fP\&.
.SS "abstract object NHibernate\&.Impl\&.AbstractSessionImpl\&.GetEntityUsingInterceptor (\fBEntityKey\fPkey)\fC [pure virtual]\fP"

.PP
Get the entity instance associated with the given \fCKey\fP, calling the Interceptor if necessary 
.PP
Implements \fBNHibernate\&.Engine\&.ISessionImplementor\fP\&.
.PP
Implemented in \fBNHibernate\&.Impl\&.SessionImpl\fP, and \fBNHibernate\&.Impl\&.StatelessSessionImpl\fP\&.
.SS "abstract \fBIType\fP NHibernate\&.Impl\&.AbstractSessionImpl\&.GetFilterParameterType (stringfilterParameterName)\fC [pure virtual]\fP"

.PP
Retrieve the type for a given filter parameter\&. 
.PP
\fBParameters:\fP
.RS 4
\fIfilterParameterName\fP The filter parameter name in the format {FILTER_NAME\&.PARAMETER_NAME}\&.
.RE
.PP
\fBReturns:\fP
.RS 4
The filter parameter type\&.
.RE
.PP

.PP
Implements \fBNHibernate\&.Engine\&.ISessionImplementor\fP\&.
.PP
Implemented in \fBNHibernate\&.Impl\&.SessionImpl\fP, and \fBNHibernate\&.Impl\&.StatelessSessionImpl\fP\&.
.SS "abstract object NHibernate\&.Impl\&.AbstractSessionImpl\&.GetFilterParameterValue (stringfilterParameterName)\fC [pure virtual]\fP"

.PP
Retrieve the currently set value for a filter parameter\&. 
.PP
\fBParameters:\fP
.RS 4
\fIfilterParameterName\fP The filter parameter name in the format {FILTER_NAME\&.PARAMETER_NAME}\&.
.RE
.PP
\fBReturns:\fP
.RS 4
The filter parameter value\&.
.RE
.PP

.PP
Implements \fBNHibernate\&.Engine\&.ISessionImplementor\fP\&.
.PP
Implemented in \fBNHibernate\&.Impl\&.SessionImpl\fP, and \fBNHibernate\&.Impl\&.StatelessSessionImpl\fP\&.
.SS "abstract string NHibernate\&.Impl\&.AbstractSessionImpl\&.GuessEntityName (objectentity)\fC [pure virtual]\fP"

.PP
The guessed entity name for an entity not in an association
.PP
Implements \fBNHibernate\&.Engine\&.ISessionImplementor\fP\&.
.PP
Implemented in \fBNHibernate\&.Impl\&.SessionImpl\fP, and \fBNHibernate\&.Impl\&.StatelessSessionImpl\fP\&.
.SS "abstract object NHibernate\&.Impl\&.AbstractSessionImpl\&.ImmediateLoad (stringentityName, objectid)\fC [pure virtual]\fP"

.PP
Load an instance immediately\&. Do not return a proxy\&. 
.PP
\fBParameters:\fP
.RS 4
\fIentityName\fP 
.br
\fIid\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
.RE
.PP

.PP
Implements \fBNHibernate\&.Engine\&.ISessionImplementor\fP\&.
.PP
Implemented in \fBNHibernate\&.Impl\&.SessionImpl\fP, and \fBNHibernate\&.Impl\&.StatelessSessionImpl\fP\&.
.SS "void NHibernate\&.Impl\&.AbstractSessionImpl\&.Initialize ()"

.PP
Initialize the session after its construction was complete 
.PP
Implements \fBNHibernate\&.Engine\&.ISessionImplementor\fP\&.
.PP
Definition at line 63 of file AbstractSessionImpl\&.cs\&.
.SS "abstract void NHibernate\&.Impl\&.AbstractSessionImpl\&.InitializeCollection (\fBIPersistentCollection\fPcollection, boolwriting)\fC [pure virtual]\fP"

.PP
Initialize the collection (if not already initialized) 
.PP
\fBParameters:\fP
.RS 4
\fIcollection\fP 
.br
\fIwriting\fP 
.RE
.PP

.PP
Implements \fBNHibernate\&.Engine\&.ISessionImplementor\fP\&.
.PP
Implemented in \fBNHibernate\&.Impl\&.SessionImpl\fP, and \fBNHibernate\&.Impl\&.StatelessSessionImpl\fP\&.
.SS "abstract object NHibernate\&.Impl\&.AbstractSessionImpl\&.Instantiate (stringentityName, objectid)\fC [pure virtual]\fP"

.PP
Instantiate the entity class, initializing with the given identifier 
.PP
Implements \fBNHibernate\&.Engine\&.ISessionImplementor\fP\&.
.PP
Implemented in \fBNHibernate\&.Impl\&.SessionImpl\fP, and \fBNHibernate\&.Impl\&.StatelessSessionImpl\fP\&.
.SS "abstract object NHibernate\&.Impl\&.AbstractSessionImpl\&.InternalLoad (stringentityName, objectid, booleager, boolisNullable)\fC [pure virtual]\fP"

.PP
Load an instance without checking if it was deleted\&. If it does not exist and isn't nullable, throw an exception\&. This method may create a new proxy or return an existing proxy\&. 
.PP
\fBParameters:\fP
.RS 4
\fIentityName\fP The entityName (or class full name) to load\&.
.br
\fIid\fP The identifier of the object in the database\&.
.br
\fIisNullable\fP Allow null instance
.br
\fIeager\fP When enabled, the object is eagerly fetched\&.
.RE
.PP
\fBReturns:\fP
.RS 4
A proxy of the object or an instance of the object if the \fCpersistentClass\fP does not have a proxy\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBObjectNotFoundException\fP\fP No object could be found with that \fCid\fP\&.
.RE
.PP

.PP
Implements \fBNHibernate\&.Engine\&.ISessionImplementor\fP\&.
.PP
Implemented in \fBNHibernate\&.Impl\&.SessionImpl\fP, and \fBNHibernate\&.Impl\&.StatelessSessionImpl\fP\&.
.SS "virtual IList NHibernate\&.Impl\&.AbstractSessionImpl\&.List (stringquery, \fBQueryParameters\fPparameters)\fC [virtual]\fP"

.PP
Execute a \fC\fBList()\fP\fP query 
.PP
\fBParameters:\fP
.RS 4
\fIquery\fP 
.br
\fIparameters\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
.RE
.PP

.PP
Implements \fBNHibernate\&.Engine\&.ISessionImplementor\fP\&.
.PP
Definition at line 102 of file AbstractSessionImpl\&.cs\&.
.SS "virtual IList NHibernate\&.Impl\&.AbstractSessionImpl\&.List (\fBIQueryExpression\fPqueryExpression, \fBQueryParameters\fPparameters)\fC [virtual]\fP"

.PP
Execute a \fC\fBList()\fP\fP expression query 
.PP
\fBParameters:\fP
.RS 4
\fIqueryExpression\fP 
.br
\fIparameters\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
.RE
.PP

.PP
Implements \fBNHibernate\&.Engine\&.ISessionImplementor\fP\&.
.PP
Definition at line 119 of file AbstractSessionImpl\&.cs\&.
.SS "virtual IList NHibernate\&.Impl\&.AbstractSessionImpl\&.List (\fBNativeSQLQuerySpecification\fPspec, \fBQueryParameters\fPqueryParameters)\fC [virtual]\fP"

.PP
Execute an SQL Query 
.PP
Implements \fBNHibernate\&.Engine\&.ISessionImplementor\fP\&.
.PP
Definition at line 173 of file AbstractSessionImpl\&.cs\&.
.SS "virtual IList<T> \fBNHibernate\&.Impl\&.AbstractSessionImpl\&.List\fP< T > (stringquery, \fBQueryParameters\fPqueryParameters)\fC [virtual]\fP"

.PP
Strongly-typed version of \fBList(string,QueryParameters)\fP 
.PP
Implements \fBNHibernate\&.Engine\&.ISessionImplementor\fP\&.
.PP
Definition at line 114 of file AbstractSessionImpl\&.cs\&.
.SS "virtual IList<T> \fBNHibernate\&.Impl\&.AbstractSessionImpl\&.List\fP< T > (\fBIQueryExpression\fPqueryExpression, \fBQueryParameters\fPqueryParameters)\fC [virtual]\fP"

.PP
Strongly-typed version of \fBList(IQueryExpression,QueryParameters)\fP 
.PP
Implements \fBNHibernate\&.Engine\&.ISessionImplementor\fP\&.
.PP
Definition at line 130 of file AbstractSessionImpl\&.cs\&.
.SS "virtual IList<T> \fBNHibernate\&.Impl\&.AbstractSessionImpl\&.List\fP< T > (\fBCriteriaImpl\fPcriteria)\fC [virtual]\fP"

.PP
Strongly-typed version of List(CriteriaImpl) 
.PP
Implements \fBNHibernate\&.Engine\&.ISessionImplementor\fP\&.
.PP
Definition at line 140 of file AbstractSessionImpl\&.cs\&.
.SS "virtual IList<T> \fBNHibernate\&.Impl\&.AbstractSessionImpl\&.List\fP< T > (\fBNativeSQLQuerySpecification\fPspec, \fBQueryParameters\fPqueryParameters)\fC [virtual]\fP"

.PP
Strongly-typed version of \fBList(NativeSQLQuerySpecification, QueryParameters)\fP 
.PP
Implements \fBNHibernate\&.Engine\&.ISessionImplementor\fP\&.
.PP
Definition at line 196 of file AbstractSessionImpl\&.cs\&.
.SS "abstract void NHibernate\&.Impl\&.AbstractSessionImpl\&.ListCustomQuery (\fBICustomQuery\fPcustomQuery, \fBQueryParameters\fPqueryParameters, IListresults)\fC [pure virtual]\fP"

.PP
Execute an SQL Query
.PP
Implements \fBNHibernate\&.Engine\&.ISessionImplementor\fP\&.
.PP
Implemented in \fBNHibernate\&.Impl\&.SessionImpl\fP, and \fBNHibernate\&.Impl\&.StatelessSessionImpl\fP\&.
.SS "abstract IList NHibernate\&.Impl\&.AbstractSessionImpl\&.ListFilter (objectcollection, stringfilter, \fBQueryParameters\fPparameters)\fC [pure virtual]\fP"

.PP
Execute a filter 
.PP
Implements \fBNHibernate\&.Engine\&.ISessionImplementor\fP\&.
.PP
Implemented in \fBNHibernate\&.Impl\&.SessionImpl\fP, and \fBNHibernate\&.Impl\&.StatelessSessionImpl\fP\&.
.SS "abstract IList<T> \fBNHibernate\&.Impl\&.AbstractSessionImpl\&.ListFilter\fP< T > (objectcollection, stringfilter, \fBQueryParameters\fPparameters)\fC [pure virtual]\fP"

.PP
Execute a filter (strongly-typed version)\&. 
.PP
Implements \fBNHibernate\&.Engine\&.ISessionImplementor\fP\&.
.PP
Implemented in \fBNHibernate\&.Impl\&.SessionImpl\fP, and \fBNHibernate\&.Impl\&.StatelessSessionImpl\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for HSA\&.InfoSys from the source code\&.
