.TH "NHibernate.Persister.Collection.ICollectionPersister" 3 "Fri Jul 5 2013" "Version 1.0" "HSA.InfoSys" \" -*- nroff -*-
.ad l
.nh
.SH NAME
NHibernate.Persister.Collection.ICollectionPersister \- 
.PP
A strategy for persisting a collection role\&.  

.SH SYNOPSIS
.br
.PP
.PP
Inherited by \fBNHibernate\&.Persister\&.Collection\&.IQueryableCollection\fP, and NHibernate\&.Test\&.NHSpecificTest\&.CollectionPersisterStub\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBInitialize\fP (object key, \fBISessionImplementor\fP session)"
.br
.RI "\fIInitialize the given collection with the given key \fP"
.ti -1c
.RI "object \fBReadKey\fP (IDataReader rs, string[] keyAliases, \fBISessionImplementor\fP session)"
.br
.RI "\fIRead the key from a row of the IDataReader \fP"
.ti -1c
.RI "object \fBReadElement\fP (IDataReader rs, object owner, string[] columnAliases, \fBISessionImplementor\fP session)"
.br
.RI "\fIRead the element from a row of the IDataReader \fP"
.ti -1c
.RI "object \fBReadIndex\fP (IDataReader rs, string[] columnAliases, \fBISessionImplementor\fP session)"
.br
.RI "\fIRead the index from a row of the IDataReader \fP"
.ti -1c
.RI "object \fBReadIdentifier\fP (IDataReader rs, string columnAlias, \fBISessionImplementor\fP session)"
.br
.RI "\fIRead the identifier from a row of the IDataReader \fP"
.ti -1c
.RI "string \fBGetManyToManyFilterFragment\fP (string alias, IDictionary< string, \fBIFilter\fP > enabledFilters)"
.br
.ti -1c
.RI "void \fBRemove\fP (object id, \fBISessionImplementor\fP session)"
.br
.RI "\fICompletely remove the persistent state of the collection \fP"
.ti -1c
.RI "void \fBRecreate\fP (\fBIPersistentCollection\fP collection, object key, \fBISessionImplementor\fP session)"
.br
.RI "\fI(Re)create the collection's persistent state \fP"
.ti -1c
.RI "void \fBDeleteRows\fP (\fBIPersistentCollection\fP collection, object key, \fBISessionImplementor\fP session)"
.br
.RI "\fIDelete the persistent state of any elements that were removed from the collection \fP"
.ti -1c
.RI "void \fBUpdateRows\fP (\fBIPersistentCollection\fP collection, object key, \fBISessionImplementor\fP session)"
.br
.RI "\fIUpdate the persistent state of any elements that were modified \fP"
.ti -1c
.RI "void \fBInsertRows\fP (\fBIPersistentCollection\fP collection, object key, \fBISessionImplementor\fP session)"
.br
.RI "\fIInsert the persistent state of any new collection elements \fP"
.ti -1c
.RI "void \fBPostInstantiate\fP ()"
.br
.ti -1c
.RI "bool \fBIsAffectedByEnabledFilters\fP (\fBISessionImplementor\fP session)"
.br
.ti -1c
.RI "string[] \fBGetKeyColumnAliases\fP (string suffix)"
.br
.RI "\fIGenerates the collection's key column aliases, based on the given suffix\&. \fP"
.ti -1c
.RI "string[] \fBGetIndexColumnAliases\fP (string suffix)"
.br
.RI "\fIGenerates the collection's index column aliases, based on the given suffix\&. \fP"
.ti -1c
.RI "string[] \fBGetElementColumnAliases\fP (string suffix)"
.br
.RI "\fIGenerates the collection's element column aliases, based on the given suffix\&. \fP"
.ti -1c
.RI "string \fBGetIdentifierColumnAlias\fP (string suffix)"
.br
.RI "\fIGenerates the collection's identifier column aliases, based on the given suffix\&. \fP"
.ti -1c
.RI "int \fBGetSize\fP (object key, \fBISessionImplementor\fP session)"
.br
.ti -1c
.RI "bool \fBIndexExists\fP (object key, object index, \fBISessionImplementor\fP session)"
.br
.ti -1c
.RI "bool \fBElementExists\fP (object key, object element, \fBISessionImplementor\fP session)"
.br
.ti -1c
.RI "object \fBGetElementByIndex\fP (object key, object index, \fBISessionImplementor\fP session, object owner)"
.br
.RI "\fITry to find an element by a given index\&. \fP"
.in -1c
.SS "Properties"

.in +1c
.ti -1c
.RI "\fBICacheConcurrencyStrategy\fP \fBCache\fP\fC [get]\fP"
.br
.RI "\fIGet the cache \fP"
.ti -1c
.RI "\fBICacheEntryStructure\fP \fBCacheEntryStructure\fP\fC [get]\fP"
.br
.RI "\fIGet the cache structure\fP"
.ti -1c
.RI "\fBCollectionType\fP \fBCollectionType\fP\fC [get]\fP"
.br
.RI "\fIGet the associated \fCIType\fP \fP"
.ti -1c
.RI "\fBIType\fP \fBKeyType\fP\fC [get]\fP"
.br
.RI "\fIGet the 'key' type (the type of the foreign key) \fP"
.ti -1c
.RI "\fBIType\fP \fBIndexType\fP\fC [get]\fP"
.br
.RI "\fIGet the 'index' type for a list or map (optional operation) \fP"
.ti -1c
.RI "\fBIType\fP \fBElementType\fP\fC [get]\fP"
.br
.RI "\fIGet the 'element' type \fP"
.ti -1c
.RI "System\&.Type \fBElementClass\fP\fC [get]\fP"
.br
.RI "\fIReturn the element class of an array, or null otherwise \fP"
.ti -1c
.RI "bool \fBIsPrimitiveArray\fP\fC [get]\fP"
.br
.RI "\fIIs this an array or primitive values? \fP"
.ti -1c
.RI "bool \fBIsArray\fP\fC [get]\fP"
.br
.RI "\fIIs this an array? \fP"
.ti -1c
.RI "bool \fBIsOneToMany\fP\fC [get]\fP"
.br
.RI "\fIIs this a one-to-many association?\fP"
.ti -1c
.RI "bool \fBIsManyToMany\fP\fC [get]\fP"
.br
.RI "\fIIs this a many-to-many association? Note that this is mainly a convenience feature as the single persister does not contain all the information needed to handle a many-to-many itself, as internally it is looked at as two many-to-ones\&. \fP"
.ti -1c
.RI "bool \fBIsLazy\fP\fC [get]\fP"
.br
.RI "\fIIs this collection lazily initialized? \fP"
.ti -1c
.RI "bool \fBIsInverse\fP\fC [get]\fP"
.br
.RI "\fIIs this collection 'inverse', so state changes are not propogated to the database\&. \fP"
.ti -1c
.RI "string \fBRole\fP\fC [get]\fP"
.br
.RI "\fIGet the name of this collection role (the fully qualified class name, extended by a 'property path') \fP"
.ti -1c
.RI "\fBIEntityPersister\fP \fBOwnerEntityPersister\fP\fC [get]\fP"
.br
.RI "\fIGet the persister of the entity that 'owns' this collection\fP"
.ti -1c
.RI "\fBIIdentifierGenerator\fP \fBIdentifierGenerator\fP\fC [get]\fP"
.br
.RI "\fIGet the surrogate key generation strategy (optional operation) \fP"
.ti -1c
.RI "\fBIType\fP \fBIdentifierType\fP\fC [get]\fP"
.br
.RI "\fIGet the type of the surrogate key \fP"
.ti -1c
.RI "string[] \fBCollectionSpaces\fP\fC [get]\fP"
.br
.RI "\fIGet the 'space' that holds the persistent state\fP"
.ti -1c
.RI "\fBICollectionMetadata\fP \fBCollectionMetadata\fP\fC [get]\fP"
.br
.ti -1c
.RI "bool \fBCascadeDeleteEnabled\fP\fC [get]\fP"
.br
.RI "\fIIs cascade delete handled by the database-level foreign key constraint definition? \fP"
.ti -1c
.RI "bool \fBIsVersioned\fP\fC [get]\fP"
.br
.RI "\fIDoes this collection cause version increment of the owning entity? \fP"
.ti -1c
.RI "bool \fBIsMutable\fP\fC [get]\fP"
.br
.RI "\fICan the elements of this collection change?\fP"
.ti -1c
.RI "string \fBNodeName\fP\fC [get]\fP"
.br
.ti -1c
.RI "string \fBElementNodeName\fP\fC [get]\fP"
.br
.ti -1c
.RI "string \fBIndexNodeName\fP\fC [get]\fP"
.br
.ti -1c
.RI "\fBISessionFactoryImplementor\fP \fBFactory\fP\fC [get]\fP"
.br
.ti -1c
.RI "bool \fBIsExtraLazy\fP\fC [get]\fP"
.br
.ti -1c
.RI "bool \fBHasCache\fP\fC [get]\fP"
.br
.RI "\fIIs this collection role cacheable \fP"
.ti -1c
.RI "bool \fBHasIndex\fP\fC [get]\fP"
.br
.RI "\fIIs this an 'indexed' collection? (list or map) \fP"
.ti -1c
.RI "bool \fBHasOrphanDelete\fP\fC [get]\fP"
.br
.RI "\fIDoes this collection implement 'orphan delete'? \fP"
.ti -1c
.RI "bool \fBHasOrdering\fP\fC [get]\fP"
.br
.RI "\fIIs this an ordered collection? (An ordered collection is ordered by the initialization operation, not by sorting that happens in memory, as in the case of a sorted collection\&.) \fP"
.ti -1c
.RI "bool \fBHasManyToManyOrdering\fP\fC [get]\fP"
.br
.ti -1c
.RI "object \fBNotFoundObject\fP\fC [get]\fP"
.br
.RI "\fIA place-holder to inform that the data-reader was empty\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
A strategy for persisting a collection role\&. 

Defines a contract between the persistence strategy and the actual persistent collection framework and session\&. Does not define operations that are required for querying collections, or loading by outer join\&. 
.PP
Implements persistence of a collection instance while the instance is referenced in a particular role\&. 
.PP
This class is highly coupled to the IPersistentCollection hierarchy, since double dispatch is used to load and update collection elements\&. 
.PP
May be considered an immutable view of the mapping object 
.PP
Definition at line 30 of file ICollectionPersister\&.cs\&.
.SH "Member Function Documentation"
.PP 
.SS "void NHibernate\&.Persister\&.Collection\&.ICollectionPersister\&.DeleteRows (\fBIPersistentCollection\fPcollection, objectkey, \fBISessionImplementor\fPsession)"

.PP
Delete the persistent state of any elements that were removed from the collection 
.PP
\fBParameters:\fP
.RS 4
\fIcollection\fP 
.br
\fIkey\fP 
.br
\fIsession\fP 
.RE
.PP

.PP
Implemented in \fBNHibernate\&.Persister\&.Collection\&.AbstractCollectionPersister\fP\&.
.SS "object NHibernate\&.Persister\&.Collection\&.ICollectionPersister\&.GetElementByIndex (objectkey, objectindex, \fBISessionImplementor\fPsession, objectowner)"

.PP
Try to find an element by a given index\&. 
.PP
\fBParameters:\fP
.RS 4
\fIkey\fP The key of the collection (collection-owner identifier)
.br
\fIindex\fP The given index\&.
.br
\fIsession\fP The active \fBISession\fP\&.
.br
\fIowner\fP The owner of the collection\&.
.RE
.PP
\fBReturns:\fP
.RS 4
The value of the element where available; otherwise \fBNotFoundObject\fP\&.
.RE
.PP

.PP
Implemented in \fBNHibernate\&.Persister\&.Collection\&.AbstractCollectionPersister\fP, and \fBNHibernate\&.Persister\&.Collection\&.OneToManyPersister\fP\&.
.SS "string [] NHibernate\&.Persister\&.Collection\&.ICollectionPersister\&.GetElementColumnAliases (stringsuffix)"

.PP
Generates the collection's element column aliases, based on the given suffix\&. 
.PP
\fBParameters:\fP
.RS 4
\fIsuffix\fP The suffix to use in the element column alias generation\&.
.RE
.PP
\fBReturns:\fP
.RS 4
The element column aliases\&.
.RE
.PP

.PP
Implemented in \fBNHibernate\&.Persister\&.Collection\&.AbstractCollectionPersister\fP\&.
.SS "string NHibernate\&.Persister\&.Collection\&.ICollectionPersister\&.GetIdentifierColumnAlias (stringsuffix)"

.PP
Generates the collection's identifier column aliases, based on the given suffix\&. 
.PP
\fBParameters:\fP
.RS 4
\fIsuffix\fP The suffix to use in the identifier column alias generation\&.
.RE
.PP
\fBReturns:\fP
.RS 4
The identifier column aliases\&.
.RE
.PP

.PP
Implemented in \fBNHibernate\&.Persister\&.Collection\&.AbstractCollectionPersister\fP\&.
.SS "string [] NHibernate\&.Persister\&.Collection\&.ICollectionPersister\&.GetIndexColumnAliases (stringsuffix)"

.PP
Generates the collection's index column aliases, based on the given suffix\&. 
.PP
\fBParameters:\fP
.RS 4
\fIsuffix\fP The suffix to use in the index column alias generation\&.
.RE
.PP
\fBReturns:\fP
.RS 4
The index column aliases, or null if not indexed\&.
.RE
.PP

.PP
Implemented in \fBNHibernate\&.Persister\&.Collection\&.AbstractCollectionPersister\fP\&.
.SS "string [] NHibernate\&.Persister\&.Collection\&.ICollectionPersister\&.GetKeyColumnAliases (stringsuffix)"

.PP
Generates the collection's key column aliases, based on the given suffix\&. 
.PP
\fBParameters:\fP
.RS 4
\fIsuffix\fP The suffix to use in the key column alias generation\&.
.RE
.PP
\fBReturns:\fP
.RS 4
The key column aliases\&.
.RE
.PP

.PP
Implemented in \fBNHibernate\&.Persister\&.Collection\&.AbstractCollectionPersister\fP\&.
.SS "void NHibernate\&.Persister\&.Collection\&.ICollectionPersister\&.Initialize (objectkey, \fBISessionImplementor\fPsession)"

.PP
Initialize the given collection with the given key 
.PP
\fBParameters:\fP
.RS 4
\fIkey\fP 
.br
\fIsession\fP 
.RE
.PP

.PP
Implemented in \fBNHibernate\&.Persister\&.Collection\&.AbstractCollectionPersister\fP\&.
.SS "void NHibernate\&.Persister\&.Collection\&.ICollectionPersister\&.InsertRows (\fBIPersistentCollection\fPcollection, objectkey, \fBISessionImplementor\fPsession)"

.PP
Insert the persistent state of any new collection elements 
.PP
\fBParameters:\fP
.RS 4
\fIcollection\fP 
.br
\fIkey\fP 
.br
\fIsession\fP 
.RE
.PP

.PP
Implemented in \fBNHibernate\&.Persister\&.Collection\&.AbstractCollectionPersister\fP\&.
.SS "object NHibernate\&.Persister\&.Collection\&.ICollectionPersister\&.ReadElement (IDataReaderrs, objectowner, string[]columnAliases, \fBISessionImplementor\fPsession)"

.PP
Read the element from a row of the IDataReader 
.PP
Implemented in \fBNHibernate\&.Persister\&.Collection\&.AbstractCollectionPersister\fP\&.
.SS "object NHibernate\&.Persister\&.Collection\&.ICollectionPersister\&.ReadIdentifier (IDataReaderrs, stringcolumnAlias, \fBISessionImplementor\fPsession)"

.PP
Read the identifier from a row of the IDataReader 
.PP
Implemented in \fBNHibernate\&.Persister\&.Collection\&.AbstractCollectionPersister\fP\&.
.SS "object NHibernate\&.Persister\&.Collection\&.ICollectionPersister\&.ReadIndex (IDataReaderrs, string[]columnAliases, \fBISessionImplementor\fPsession)"

.PP
Read the index from a row of the IDataReader 
.PP
Implemented in \fBNHibernate\&.Persister\&.Collection\&.AbstractCollectionPersister\fP\&.
.SS "object NHibernate\&.Persister\&.Collection\&.ICollectionPersister\&.ReadKey (IDataReaderrs, string[]keyAliases, \fBISessionImplementor\fPsession)"

.PP
Read the key from a row of the IDataReader 
.PP
Implemented in \fBNHibernate\&.Persister\&.Collection\&.AbstractCollectionPersister\fP\&.
.SS "void NHibernate\&.Persister\&.Collection\&.ICollectionPersister\&.Recreate (\fBIPersistentCollection\fPcollection, objectkey, \fBISessionImplementor\fPsession)"

.PP
(Re)create the collection's persistent state 
.PP
\fBParameters:\fP
.RS 4
\fIcollection\fP 
.br
\fIkey\fP 
.br
\fIsession\fP 
.RE
.PP

.PP
Implemented in \fBNHibernate\&.Persister\&.Collection\&.AbstractCollectionPersister\fP\&.
.SS "void NHibernate\&.Persister\&.Collection\&.ICollectionPersister\&.Remove (objectid, \fBISessionImplementor\fPsession)"

.PP
Completely remove the persistent state of the collection 
.PP
\fBParameters:\fP
.RS 4
\fIid\fP 
.br
\fIsession\fP 
.RE
.PP

.PP
Implemented in \fBNHibernate\&.Persister\&.Collection\&.AbstractCollectionPersister\fP\&.
.SS "void NHibernate\&.Persister\&.Collection\&.ICollectionPersister\&.UpdateRows (\fBIPersistentCollection\fPcollection, objectkey, \fBISessionImplementor\fPsession)"

.PP
Update the persistent state of any elements that were modified 
.PP
\fBParameters:\fP
.RS 4
\fIcollection\fP 
.br
\fIkey\fP 
.br
\fIsession\fP 
.RE
.PP

.PP
Implemented in \fBNHibernate\&.Persister\&.Collection\&.AbstractCollectionPersister\fP\&.
.SH "Property Documentation"
.PP 
.SS "\fBICacheConcurrencyStrategy\fP NHibernate\&.Persister\&.Collection\&.ICollectionPersister\&.Cache\fC [get]\fP"

.PP
Get the cache 
.PP
Definition at line 35 of file ICollectionPersister\&.cs\&.
.SS "\fBICacheEntryStructure\fP NHibernate\&.Persister\&.Collection\&.ICollectionPersister\&.CacheEntryStructure\fC [get]\fP"

.PP
Get the cache structure
.PP
Definition at line 38 of file ICollectionPersister\&.cs\&.
.SS "bool NHibernate\&.Persister\&.Collection\&.ICollectionPersister\&.CascadeDeleteEnabled\fC [get]\fP"

.PP
Is cascade delete handled by the database-level foreign key constraint definition? 
.PP
Definition at line 123 of file ICollectionPersister\&.cs\&.
.SS "string [] NHibernate\&.Persister\&.Collection\&.ICollectionPersister\&.CollectionSpaces\fC [get]\fP"

.PP
Get the 'space' that holds the persistent state
.PP
Definition at line 115 of file ICollectionPersister\&.cs\&.
.SS "\fBCollectionType\fP NHibernate\&.Persister\&.Collection\&.ICollectionPersister\&.CollectionType\fC [get]\fP"

.PP
Get the associated \fCIType\fP 
.PP
Definition at line 43 of file ICollectionPersister\&.cs\&.
.SS "System\&.Type NHibernate\&.Persister\&.Collection\&.ICollectionPersister\&.ElementClass\fC [get]\fP"

.PP
Return the element class of an array, or null otherwise 
.PP
Definition at line 63 of file ICollectionPersister\&.cs\&.
.SS "\fBIType\fP NHibernate\&.Persister\&.Collection\&.ICollectionPersister\&.ElementType\fC [get]\fP"

.PP
Get the 'element' type 
.PP
Definition at line 58 of file ICollectionPersister\&.cs\&.
.SS "bool NHibernate\&.Persister\&.Collection\&.ICollectionPersister\&.HasCache\fC [get]\fP"

.PP
Is this collection role cacheable 
.PP
Definition at line 152 of file ICollectionPersister\&.cs\&.
.SS "bool NHibernate\&.Persister\&.Collection\&.ICollectionPersister\&.HasIndex\fC [get]\fP"

.PP
Is this an 'indexed' collection? (list or map) 
.PP
Definition at line 182 of file ICollectionPersister\&.cs\&.
.SS "bool NHibernate\&.Persister\&.Collection\&.ICollectionPersister\&.HasOrdering\fC [get]\fP"

.PP
Is this an ordered collection? (An ordered collection is ordered by the initialization operation, not by sorting that happens in memory, as in the case of a sorted collection\&.) 
.PP
Definition at line 233 of file ICollectionPersister\&.cs\&.
.SS "bool NHibernate\&.Persister\&.Collection\&.ICollectionPersister\&.HasOrphanDelete\fC [get]\fP"

.PP
Does this collection implement 'orphan delete'? 
.PP
Definition at line 226 of file ICollectionPersister\&.cs\&.
.SS "\fBIIdentifierGenerator\fP NHibernate\&.Persister\&.Collection\&.ICollectionPersister\&.IdentifierGenerator\fC [get]\fP"

.PP
Get the surrogate key generation strategy (optional operation) 
.PP
Definition at line 107 of file ICollectionPersister\&.cs\&.
.SS "\fBIType\fP NHibernate\&.Persister\&.Collection\&.ICollectionPersister\&.IdentifierType\fC [get]\fP"

.PP
Get the type of the surrogate key 
.PP
Definition at line 112 of file ICollectionPersister\&.cs\&.
.SS "\fBIType\fP NHibernate\&.Persister\&.Collection\&.ICollectionPersister\&.IndexType\fC [get]\fP"

.PP
Get the 'index' type for a list or map (optional operation) 
.PP
Definition at line 53 of file ICollectionPersister\&.cs\&.
.SS "bool NHibernate\&.Persister\&.Collection\&.ICollectionPersister\&.IsArray\fC [get]\fP"

.PP
Is this an array? 
.PP
Definition at line 73 of file ICollectionPersister\&.cs\&.
.SS "bool NHibernate\&.Persister\&.Collection\&.ICollectionPersister\&.IsInverse\fC [get]\fP"

.PP
Is this collection 'inverse', so state changes are not propogated to the database\&. 
.PP
Definition at line 94 of file ICollectionPersister\&.cs\&.
.SS "bool NHibernate\&.Persister\&.Collection\&.ICollectionPersister\&.IsLazy\fC [get]\fP"

.PP
Is this collection lazily initialized? 
.PP
Definition at line 89 of file ICollectionPersister\&.cs\&.
.SS "bool NHibernate\&.Persister\&.Collection\&.ICollectionPersister\&.IsManyToMany\fC [get]\fP"

.PP
Is this a many-to-many association? Note that this is mainly a convenience feature as the single persister does not contain all the information needed to handle a many-to-many itself, as internally it is looked at as two many-to-ones\&. 
.PP
Definition at line 84 of file ICollectionPersister\&.cs\&.
.SS "bool NHibernate\&.Persister\&.Collection\&.ICollectionPersister\&.IsMutable\fC [get]\fP"

.PP
Can the elements of this collection change?
.PP
Definition at line 131 of file ICollectionPersister\&.cs\&.
.SS "bool NHibernate\&.Persister\&.Collection\&.ICollectionPersister\&.IsOneToMany\fC [get]\fP"

.PP
Is this a one-to-many association?
.PP
Definition at line 76 of file ICollectionPersister\&.cs\&.
.SS "bool NHibernate\&.Persister\&.Collection\&.ICollectionPersister\&.IsPrimitiveArray\fC [get]\fP"

.PP
Is this an array or primitive values? 
.PP
Definition at line 68 of file ICollectionPersister\&.cs\&.
.SS "bool NHibernate\&.Persister\&.Collection\&.ICollectionPersister\&.IsVersioned\fC [get]\fP"

.PP
Does this collection cause version increment of the owning entity? 
.PP
Definition at line 128 of file ICollectionPersister\&.cs\&.
.SS "\fBIType\fP NHibernate\&.Persister\&.Collection\&.ICollectionPersister\&.KeyType\fC [get]\fP"

.PP
Get the 'key' type (the type of the foreign key) 
.PP
Definition at line 48 of file ICollectionPersister\&.cs\&.
.SS "object NHibernate\&.Persister\&.Collection\&.ICollectionPersister\&.NotFoundObject\fC [get]\fP"

.PP
A place-holder to inform that the data-reader was empty\&. 
.PP
Definition at line 290 of file ICollectionPersister\&.cs\&.
.SS "\fBIEntityPersister\fP NHibernate\&.Persister\&.Collection\&.ICollectionPersister\&.OwnerEntityPersister\fC [get]\fP"

.PP
Get the persister of the entity that 'owns' this collection
.PP
Definition at line 102 of file ICollectionPersister\&.cs\&.
.SS "string NHibernate\&.Persister\&.Collection\&.ICollectionPersister\&.Role\fC [get]\fP"

.PP
Get the name of this collection role (the fully qualified class name, extended by a 'property path') 
.PP
Definition at line 99 of file ICollectionPersister\&.cs\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for HSA\&.InfoSys from the source code\&.
