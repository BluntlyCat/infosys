.TH "NHibernate.Loader.Custom.CustomLoader" 3 "Fri Jul 5 2013" "Version 1.0" "HSA.InfoSys" \" -*- nroff -*-
.ad l
.nh
.SH NAME
NHibernate.Loader.Custom.CustomLoader \- 
.PP
Extension point for loaders which use a SQL result set with 'unexpected' column aliases\&.  

.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBNHibernate\&.Loader\&.Loader\fP\&.
.SS "Classes"

.in +1c
.ti -1c
.RI "interface \fBIResultColumnProcessor\fP"
.br
.ti -1c
.RI "class \fBMetaData\fP"
.br
.RI "\fIEncapsulates the metadata available from the database result set\&. \fP"
.ti -1c
.RI "class \fBNonScalarResultColumnProcessor\fP"
.br
.ti -1c
.RI "class \fBResultRowProcessor\fP"
.br
.ti -1c
.RI "class \fBScalarResultColumnProcessor\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBCustomLoader\fP (\fBICustomQuery\fP customQuery, \fBISessionFactoryImplementor\fP factory)"
.br
.ti -1c
.RI "override \fBLockMode\fP[] \fBGetLockModes\fP (IDictionary< string, \fBLockMode\fP > lockModesMap)"
.br
.RI "\fIWhat lock mode does this load entities with? \fP"
.ti -1c
.RI "IList \fBList\fP (\fBISessionImplementor\fP session, \fBQueryParameters\fP queryParameters)"
.br
.ti -1c
.RI "override IList \fBGetResultList\fP (IList results, \fBIResultTransformer\fP resultTransformer)"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "override object \fBGetResultColumnOrRow\fP (object[] row, \fBIResultTransformer\fP resultTransformer, IDataReader rs, \fBISessionImplementor\fP session)"
.br
.RI "\fIGet the actual object that is returned in the user-visible result list\&. \fP"
.ti -1c
.RI "override void \fBAutoDiscoverTypes\fP (IDataReader rs)"
.br
.ti -1c
.RI "override void \fBResetEffectiveExpectedType\fP (IEnumerable< \fBIParameterSpecification\fP > parameterSpecs, \fBQueryParameters\fP queryParameters)"
.br
.ti -1c
.RI "override IEnumerable
.br
< \fBIParameterSpecification\fP > \fBGetParameterSpecifications\fP ()"
.br
.in -1c
.SS "Properties"

.in +1c
.ti -1c
.RI "ISet< string > \fBQuerySpaces\fP\fC [get]\fP"
.br
.ti -1c
.RI "override int[] \fBCollectionOwners\fP\fC [get]\fP"
.br
.ti -1c
.RI "override int[] \fBOwners\fP\fC [get]\fP"
.br
.ti -1c
.RI "override \fBIEntityAliases\fP[] \fBEntityAliases\fP\fC [get]\fP"
.br
.ti -1c
.RI "override \fBICollectionAliases\fP[] \fBCollectionAliases\fP\fC [get]\fP"
.br
.ti -1c
.RI "override string \fBQueryIdentifier\fP\fC [get]\fP"
.br
.ti -1c
.RI "override \fBSqlString\fP \fBSqlString\fP\fC [get]\fP"
.br
.ti -1c
.RI "override \fBILoadable\fP[] \fBEntityPersisters\fP\fC [get]\fP"
.br
.ti -1c
.RI "override \fBICollectionPersister\fP[] \fBCollectionPersisters\fP\fC [get]\fP"
.br
.ti -1c
.RI "\fBIType\fP[] \fBResultTypes\fP\fC [get]\fP"
.br
.ti -1c
.RI "string[] \fBReturnAliases\fP\fC [get]\fP"
.br
.ti -1c
.RI "IEnumerable< string > \fBNamedParameters\fP\fC [get]\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Extension point for loaders which use a SQL result set with 'unexpected' column aliases\&. 


.PP
Definition at line 22 of file CustomLoader\&.cs\&.
.SH "Member Function Documentation"
.PP 
.SS "override \fBLockMode\fP [] NHibernate\&.Loader\&.Custom\&.CustomLoader\&.GetLockModes (IDictionary< string, \fBLockMode\fP >lockModes)\fC [virtual]\fP"

.PP
What lock mode does this load entities with? 
.PP
\fBParameters:\fP
.RS 4
\fIlockModes\fP A \fBCollection\fP of lock modes specified dynamically via the Query Interface
.RE
.PP
\fBReturns:\fP
.RS 4
.RE
.PP

.PP
Implements \fBNHibernate\&.Loader\&.Loader\fP\&.
.PP
Definition at line 258 of file CustomLoader\&.cs\&.
.SS "override object NHibernate\&.Loader\&.Custom\&.CustomLoader\&.GetResultColumnOrRow (object[]row, \fBIResultTransformer\fPresultTransformer, IDataReaderrs, \fBISessionImplementor\fPsession)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Get the actual object that is returned in the user-visible result list\&. This empty implementation merely returns its first argument\&. This is overridden by some subclasses\&. 
.PP
Reimplemented from \fBNHibernate\&.Loader\&.Loader\fP\&.
.PP
Definition at line 280 of file CustomLoader\&.cs\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for HSA\&.InfoSys from the source code\&.
