.TH "log4net.Util.ThreadContextStack" 3 "Fri Jul 5 2013" "Version 1.0" "HSA.InfoSys" \" -*- nroff -*-
.ad l
.nh
.SH NAME
log4net.Util.ThreadContextStack \- 
.PP
Implementation of Stack for the \fBlog4net\&.ThreadContext\fP  

.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBlog4net\&.Core\&.IFixingRequired\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBClear\fP ()"
.br
.RI "\fIClears all the contextual information held in this stack\&. \fP"
.ti -1c
.RI "string \fBPop\fP ()"
.br
.RI "\fIRemoves the top context from this stack\&. \fP"
.ti -1c
.RI "IDisposable \fBPush\fP (string message)"
.br
.RI "\fIPushes a new context message into this stack\&. \fP"
.ti -1c
.RI "override string \fBToString\fP ()"
.br
.RI "\fIGets the current context information for this stack\&. \fP"
.in -1c
.SS "Properties"

.in +1c
.ti -1c
.RI "int \fBCount\fP\fC [get]\fP"
.br
.RI "\fIThe number of messages in the stack \fP"
.in -1c
.SH "Detailed Description"
.PP 
Implementation of Stack for the \fBlog4net\&.ThreadContext\fP 

Implementation of Stack for the \fBlog4net\&.ThreadContext\fP 
.PP
<author>Nicko Cadell</author> 
.PP
Definition at line 39 of file ThreadContextStack\&.cs\&.
.SH "Member Function Documentation"
.PP 
.SS "void log4net\&.Util\&.ThreadContextStack\&.Clear ()"

.PP
Clears all the contextual information held in this stack\&. Clears all the contextual information held in this stack\&. Only call this if you think that this tread is being reused after a previous call execution which may not have completed correctly\&. You do not need to use this method if you always guarantee to call the IDisposable\&.Dispose method of the IDisposable returned from \fBPush\fP even in exceptional circumstances, for example by using the \fCusing(\fBlog4net\&.ThreadContext\&.Stacks\fP['NDC']\&.Push('Stack_Message'))\fP syntax\&. 
.PP
Definition at line 105 of file ThreadContextStack\&.cs\&.
.SS "string log4net\&.Util\&.ThreadContextStack\&.Pop ()"

.PP
Removes the top context from this stack\&. 
.PP
\fBReturns:\fP
.RS 4
The message in the context that was removed from the top of this stack\&.
.RE
.PP
.PP
Remove the top context from this stack, and return it to the caller\&. If this stack is empty then an empty string (not ) is returned\&. 
.PP
Definition at line 121 of file ThreadContextStack\&.cs\&.
.SS "IDisposable log4net\&.Util\&.ThreadContextStack\&.Push (stringmessage)"

.PP
Pushes a new context message into this stack\&. 
.PP
\fBParameters:\fP
.RS 4
\fImessage\fP The new context message\&.
.RE
.PP
\fBReturns:\fP
.RS 4
An IDisposable that can be used to clean up the context stack\&. 
.RE
.PP
.PP
Pushes a new context onto this stack\&. An IDisposable is returned that can be used to clean up this stack\&. This can be easily combined with the \fCusing\fP keyword to scope the context\&. 
.PP
Simple example of using the \fCPush\fP method with the \fCusing\fP keyword\&. 
.PP
.nf
using(log4net\&.ThreadContext\&.Stacks["NDC"]\&.Push("Stack_Message"))
{
    log\&.Warn("This should have an ThreadContext Stack message");
}

.fi
.PP
 
.PP
Definition at line 154 of file ThreadContextStack\&.cs\&.
.SS "override string log4net\&.Util\&.ThreadContextStack\&.ToString ()"

.PP
Gets the current context information for this stack\&. 
.PP
\fBReturns:\fP
.RS 4
Gets the current context information
.RE
.PP
.PP
Gets the current context information for this stack\&. 
.PP
Definition at line 208 of file ThreadContextStack\&.cs\&.
.SH "Property Documentation"
.PP 
.SS "int log4net\&.Util\&.ThreadContextStack\&.Count\fC [get]\fP"

.PP
The number of messages in the stack The current number of messages in the stack 
.PP
The current number of messages in the stack\&. That is the number of times \fBPush\fP has been called minus the number of times \fBPop\fP has been called\&. 
.PP
Definition at line 82 of file ThreadContextStack\&.cs\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for HSA\&.InfoSys from the source code\&.
