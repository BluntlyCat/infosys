//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.18047
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HSA.InfoSys.Common.Timing.Properties {
    using System;
    
    
    /// <summary>
    ///   Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
    /// </summary>
    // Diese Klasse wurde von der StronglyTypedResourceBuilder automatisch generiert
    // -Klasse über ein Tool wie ResGen oder Visual Studio automatisch generiert.
    // Um einen Member hinzuzufügen oder zu entfernen, bearbeiten Sie die .ResX-Datei und führen dann ResGen
    // mit der /str-Option erneut aus, oder Sie erstellen Ihr VS-Projekt neu.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("HSA.InfoSys.Common.Timing.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
        ///   Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Initialize a new instance of Countdown ähnelt.
        /// </summary>
        internal static string LOG_COUNTDOWN_INITIALIZE {
            get {
                return ResourceManager.GetString("LOG_COUNTDOWN_INITIALIZE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Initialize a new instance of Countdown with time [{0}] ähnelt.
        /// </summary>
        internal static string LOG_COUNTDOWN_INITIALIZE_PARAMS {
            get {
                return ResourceManager.GetString("LOG_COUNTDOWN_INITIALIZE_PARAMS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die All values cleaned: [{0}, {1}]. ähnelt.
        /// </summary>
        internal static string LOG_COUNTDOWN_RESET_VALUES {
            get {
                return ResourceManager.GetString("LOG_COUNTDOWN_RESET_VALUES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die New time [{0}] set to repeat. ähnelt.
        /// </summary>
        internal static string LOG_COUNTDOWN_SET_NEW_REPEAT_TIME {
            get {
                return ResourceManager.GetString("LOG_COUNTDOWN_SET_NEW_REPEAT_TIME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Set new repeat time. ähnelt.
        /// </summary>
        internal static string LOG_COUNTDOWN_SET_REPEAT_TIME {
            get {
                return ResourceManager.GetString("LOG_COUNTDOWN_SET_REPEAT_TIME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Start new countdown. ähnelt.
        /// </summary>
        internal static string LOG_COUNTDOWN_START_COUNTDOWN {
            get {
                return ResourceManager.GetString("LOG_COUNTDOWN_START_COUNTDOWN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Could not start countdown, time is not set: [{0}] ähnelt.
        /// </summary>
        internal static string LOG_COUNTDOWN_START_COUNTDOWN_ERROR {
            get {
                return ResourceManager.GetString("LOG_COUNTDOWN_START_COUNTDOWN_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Stop countdown. ähnelt.
        /// </summary>
        internal static string LOG_COUNTDOWN_STOP_COUNTDOWN {
            get {
                return ResourceManager.GetString("LOG_COUNTDOWN_STOP_COUNTDOWN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Thread left while loop. ähnelt.
        /// </summary>
        internal static string LOG_COUNTDOWN_THREAD_ENDS {
            get {
                return ResourceManager.GetString("LOG_COUNTDOWN_THREAD_ENDS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Thread is running. ähnelt.
        /// </summary>
        internal static string LOG_COUNTDOWN_THREAD_IS_RUNNING {
            get {
                return ResourceManager.GetString("LOG_COUNTDOWN_THREAD_IS_RUNNING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Get Days [{0}] ähnelt.
        /// </summary>
        internal static string LOG_REMAIN_TIME_GET_DAYS {
            get {
                return ResourceManager.GetString("LOG_REMAIN_TIME_GET_DAYS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Get Hours [{0}] ähnelt.
        /// </summary>
        internal static string LOG_REMAIN_TIME_GET_HOURS {
            get {
                return ResourceManager.GetString("LOG_REMAIN_TIME_GET_HOURS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Get Milliseconds [{0}] ähnelt.
        /// </summary>
        internal static string LOG_REMAIN_TIME_GET_MILLISECONDS {
            get {
                return ResourceManager.GetString("LOG_REMAIN_TIME_GET_MILLISECONDS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Get Minutes [{0}] ähnelt.
        /// </summary>
        internal static string LOG_REMAIN_TIME_GET_MINUTES {
            get {
                return ResourceManager.GetString("LOG_REMAIN_TIME_GET_MINUTES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Get Seconds [{0}] ähnelt.
        /// </summary>
        internal static string LOG_REMAIN_TIME_GET_SECONDS {
            get {
                return ResourceManager.GetString("LOG_REMAIN_TIME_GET_SECONDS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Initialize a new instance of RemainTime with TimeSpan [{0}] ähnelt.
        /// </summary>
        internal static string LOG_REMAIN_TIME_INITIALIZE {
            get {
                return ResourceManager.GetString("LOG_REMAIN_TIME_INITIALIZE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Remaining time: [{0}D : {1}H : {2}m : {3}s] ähnelt.
        /// </summary>
        internal static string LOG_REMAIN_TIME_TO_STRING {
            get {
                return ResourceManager.GetString("LOG_REMAIN_TIME_TO_STRING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Values reset. ähnelt.
        /// </summary>
        internal static string LOG_RESET_VALUES {
            get {
                return ResourceManager.GetString("LOG_RESET_VALUES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Values reset [Starttime: {0}, Endtime: {1}, Remaintime: {2}, Type: {3}, Params: {4}, Timestring: {5}]. ähnelt.
        /// </summary>
        internal static string LOG_TIME_RESET_VALUES {
            get {
                return ResourceManager.GetString("LOG_TIME_RESET_VALUES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Set time. ähnelt.
        /// </summary>
        internal static string LOG_TIME_SET_TIME {
            get {
                return ResourceManager.GetString("LOG_TIME_SET_TIME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Set time with param [{0}]. ähnelt.
        /// </summary>
        internal static string LOG_TIME_SET_TIME_PARAM_DATETIME {
            get {
                return ResourceManager.GetString("LOG_TIME_SET_TIME_PARAM_DATETIME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Validate time [{0}]. ähnelt.
        /// </summary>
        internal static string LOG_TIME_VALIDATION_BEGIN_VALIDATION {
            get {
                return ResourceManager.GetString("LOG_TIME_VALIDATION_BEGIN_VALIDATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Time [{0}] is empty. ähnelt.
        /// </summary>
        internal static string LOG_TIME_VALIDATION_EMPTY_STRING {
            get {
                return ResourceManager.GetString("LOG_TIME_VALIDATION_EMPTY_STRING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Got values from timestring [{0}, {1}, {2}] ähnelt.
        /// </summary>
        internal static string LOG_TIME_VALIDATION_GOT_VALUES_OF_TYPE_DATE {
            get {
                return ResourceManager.GetString("LOG_TIME_VALIDATION_GOT_VALUES_OF_TYPE_DATE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Got values from timestring  [{0}, {1}] ähnelt.
        /// </summary>
        internal static string LOG_TIME_VALIDATION_GOT_VALUES_OF_TYPE_TIME {
            get {
                return ResourceManager.GetString("LOG_TIME_VALIDATION_GOT_VALUES_OF_TYPE_TIME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Time [{0}] has separator at index [{1}]. ähnelt.
        /// </summary>
        internal static string LOG_TIME_VALIDATION_HAS_SEPARATOR_AT_INDEX {
            get {
                return ResourceManager.GetString("LOG_TIME_VALIDATION_HAS_SEPARATOR_AT_INDEX", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Time [{0}] has separators. ähnelt.
        /// </summary>
        internal static string LOG_TIME_VALIDATION_HAS_SEPARATORS {
            get {
                return ResourceManager.GetString("LOG_TIME_VALIDATION_HAS_SEPARATORS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Time [{0}] has invalid characters. ähnelt.
        /// </summary>
        internal static string LOG_TIME_VALIDATION_INVALID_CHARS {
            get {
                return ResourceManager.GetString("LOG_TIME_VALIDATION_INVALID_CHARS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Time [{0}] has invalid length [{1}] ähnelt.
        /// </summary>
        internal static string LOG_TIME_VALIDATION_INVALID_LENGTH {
            get {
                return ResourceManager.GetString("LOG_TIME_VALIDATION_INVALID_LENGTH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Error while parsing time [{0}], with error:\n[{2}]. ähnelt.
        /// </summary>
        internal static string LOG_TIME_VALIDATION_INVALID_TIME_FORMAT {
            get {
                return ResourceManager.GetString("LOG_TIME_VALIDATION_INVALID_TIME_FORMAT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Time has invalid type of {0} ähnelt.
        /// </summary>
        internal static string LOG_TIME_VALIDATION_INVALID_TYPE_OF_TIME {
            get {
                return ResourceManager.GetString("LOG_TIME_VALIDATION_INVALID_TYPE_OF_TIME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Time [{0}] is not valid, error was: [{1}]. ähnelt.
        /// </summary>
        internal static string LOG_TIME_VALIDATION_IS_NOT_VALID {
            get {
                return ResourceManager.GetString("LOG_TIME_VALIDATION_IS_NOT_VALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Time [{0}] is not valid. ähnelt.
        /// </summary>
        internal static string LOG_TIME_VALIDATION_IS_NOT_VALID_NO_ERROR {
            get {
                return ResourceManager.GetString("LOG_TIME_VALIDATION_IS_NOT_VALID_NO_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Time [{0}] is valid. ähnelt.
        /// </summary>
        internal static string LOG_TIME_VALIDATION_IS_VALID {
            get {
                return ResourceManager.GetString("LOG_TIME_VALIDATION_IS_VALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Time [{0}] has no separator at index [{1}]. ähnelt.
        /// </summary>
        internal static string LOG_TIME_VALIDATION_NO_SEPARATOR_AT_INDEX {
            get {
                return ResourceManager.GetString("LOG_TIME_VALIDATION_NO_SEPARATOR_AT_INDEX", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Time [{0}] has no separators. ähnelt.
        /// </summary>
        internal static string LOG_TIME_VALIDATION_NO_SEPARATORS {
            get {
                return ResourceManager.GetString("LOG_TIME_VALIDATION_NO_SEPARATORS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Time [{0}] does not need separators. ähnelt.
        /// </summary>
        internal static string LOG_TIME_VALIDATION_NO_SEPARATORS_NEEDED {
            get {
                return ResourceManager.GetString("LOG_TIME_VALIDATION_NO_SEPARATORS_NEEDED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Time [{0}]. ähnelt.
        /// </summary>
        internal static string LOG_TIME_VALIDATION_SET_IF_IN_FUTURE {
            get {
                return ResourceManager.GetString("LOG_TIME_VALIDATION_SET_IF_IN_FUTURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Set type of time for timestring {0} ähnelt.
        /// </summary>
        internal static string LOG_TIME_VALIDATION_SET_TYPE_OF_TIME {
            get {
                return ResourceManager.GetString("LOG_TIME_VALIDATION_SET_TYPE_OF_TIME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Timestring is type of [{0}] ähnelt.
        /// </summary>
        internal static string LOG_TIME_VALIDATION_STRING_IS_TYPE_OF {
            get {
                return ResourceManager.GetString("LOG_TIME_VALIDATION_STRING_IS_TYPE_OF", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Timestring is in past. ähnelt.
        /// </summary>
        internal static string LOG_TIME_VALIDATION_TIME_IN_PAST {
            get {
                return ResourceManager.GetString("LOG_TIME_VALIDATION_TIME_IN_PAST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Time [{0}] has valid characters. ähnelt.
        /// </summary>
        internal static string LOG_TIME_VALIDATION_VALID_CHARS {
            get {
                return ResourceManager.GetString("LOG_TIME_VALIDATION_VALID_CHARS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Time [{0}] has valid length [{1}]. ähnelt.
        /// </summary>
        internal static string LOG_TIME_VALIDATION_VALID_LENGTH {
            get {
                return ResourceManager.GetString("LOG_TIME_VALIDATION_VALID_LENGTH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Time [{0}] has wrong placed separators. ähnelt.
        /// </summary>
        internal static string LOG_TIME_VALIDATION_WRONG_PLACED_SEPARATOR {
            get {
                return ResourceManager.GetString("LOG_TIME_VALIDATION_WRONG_PLACED_SEPARATOR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Time [{0}] has wrong placed separator at index [{1}]. ähnelt.
        /// </summary>
        internal static string LOG_TIME_VALIDATION_WRONG_PLACED_SEPARATOR_AT_INDEX {
            get {
                return ResourceManager.GetString("LOG_TIME_VALIDATION_WRONG_PLACED_SEPARATOR_AT_INDEX", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Starttime: {0}, Endtime: {1}, Remaintime: {2}, Type: {3}, Values: {4}, Timestring: {5} ähnelt.
        /// </summary>
        internal static string TIME_TO_STRING {
            get {
                return ResourceManager.GetString("TIME_TO_STRING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Timestring must not be empty. ähnelt.
        /// </summary>
        internal static string TIME_VALIDATION_EMPTY_STRING {
            get {
                return ResourceManager.GetString("TIME_VALIDATION_EMPTY_STRING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Time must have separatos (&apos;.&apos; or &apos;:&apos;). ähnelt.
        /// </summary>
        internal static string TIME_VALIDATION_ERROR_HAS_NO_SEPARATORS {
            get {
                return ResourceManager.GetString("TIME_VALIDATION_ERROR_HAS_NO_SEPARATORS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Time has invalid characters. ähnelt.
        /// </summary>
        internal static string TIME_VALIDATION_ERROR_INVALID_CHARS {
            get {
                return ResourceManager.GetString("TIME_VALIDATION_ERROR_INVALID_CHARS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Invalid time format for date ähnelt.
        /// </summary>
        internal static string TIME_VALIDATION_ERROR_INVALID_DATE_FORMAT {
            get {
                return ResourceManager.GetString("TIME_VALIDATION_ERROR_INVALID_DATE_FORMAT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Time has invalid length. ähnelt.
        /// </summary>
        internal static string TIME_VALIDATION_ERROR_INVALID_LENGTH {
            get {
                return ResourceManager.GetString("TIME_VALIDATION_ERROR_INVALID_LENGTH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Invalid time format for time ähnelt.
        /// </summary>
        internal static string TIME_VALIDATION_ERROR_INVALID_TIME_FORMAT {
            get {
                return ResourceManager.GetString("TIME_VALIDATION_ERROR_INVALID_TIME_FORMAT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Invalid type of time [{0}] ähnelt.
        /// </summary>
        internal static string TIME_VALIDATION_ERROR_INVALID_TYPE_OF_TIME {
            get {
                return ResourceManager.GetString("TIME_VALIDATION_ERROR_INVALID_TYPE_OF_TIME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Time has no separators at index {0}. ähnelt.
        /// </summary>
        internal static string TIME_VALIDATION_ERROR_NO_SEPARATOR_AT_INDEX {
            get {
                return ResourceManager.GetString("TIME_VALIDATION_ERROR_NO_SEPARATOR_AT_INDEX", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Timestring is in past. ähnelt.
        /// </summary>
        internal static string TIME_VALIDATION_ERROR_TIME_IN_PAST {
            get {
                return ResourceManager.GetString("TIME_VALIDATION_ERROR_TIME_IN_PAST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Time is not valid. ähnelt.
        /// </summary>
        internal static string TIME_VALIDATION_ERROR_TIME_NOT_VALID {
            get {
                return ResourceManager.GetString("TIME_VALIDATION_ERROR_TIME_NOT_VALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Time has wrong placed separator. ähnelt.
        /// </summary>
        internal static string TIME_VALIDATION_ERROR_WRONG_PLACED_SEPARATOR {
            get {
                return ResourceManager.GetString("TIME_VALIDATION_ERROR_WRONG_PLACED_SEPARATOR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Time has wrong placed separator at index [{0}]. ähnelt.
        /// </summary>
        internal static string TIME_VALIDATION_ERROR_WRONG_PLACED_SEPARATOR_AT_INDEX {
            get {
                return ResourceManager.GetString("TIME_VALIDATION_ERROR_WRONG_PLACED_SEPARATOR_AT_INDEX", resourceCulture);
            }
        }
    }
}
