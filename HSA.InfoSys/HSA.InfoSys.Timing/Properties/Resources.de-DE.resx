<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="COUNTDOWN_TO_STRING" xml:space="preserve">
    <value>Countdown Zeit: [{0}], Quelle: [{1}]</value>
  </data>
  <data name="LOG_COUNTDOWN_INITIALIZE" xml:space="preserve">
    <value>Initialisiere neuen Countdown.</value>
  </data>
  <data name="LOG_COUNTDOWN_INITIALIZE_PARAMS" xml:space="preserve">
    <value>Initialisiere neuen Countdown mit Zeit [{0}].</value>
  </data>
  <data name="LOG_COUNTDOWN_RESET_VALUES" xml:space="preserve">
    <value>Alle Werte zurückgesetzt: [{0}, {1}].</value>
  </data>
  <data name="LOG_COUNTDOWN_SET_NEW_REPEAT_TIME" xml:space="preserve">
    <value>Neue Zeit [{0}] zur Wiederholung gesetzt.</value>
  </data>
  <data name="LOG_COUNTDOWN_SET_REPEAT_TIME" xml:space="preserve">
    <value>Setze neue Zeit zur Wiederholung.</value>
  </data>
  <data name="LOG_COUNTDOWN_START_COUNTDOWN" xml:space="preserve">
    <value>Starte neuen Countdown.</value>
  </data>
  <data name="LOG_COUNTDOWN_START_COUNTDOWN_ERROR" xml:space="preserve">
    <value>Countdown konnte nicht gestartet werden, Zeit wurde nicht gesetzt: [{0}]</value>
  </data>
  <data name="LOG_COUNTDOWN_STOP_COUNTDOWN" xml:space="preserve">
    <value>Stoppe Countdown.</value>
  </data>
  <data name="LOG_COUNTDOWN_THREAD_ENDS" xml:space="preserve">
    <value>Thread verlässt while-Schleife.</value>
  </data>
  <data name="LOG_COUNTDOWN_THREAD_IS_RUNNING" xml:space="preserve">
    <value>Thread läuft.</value>
  </data>
  <data name="LOG_REMAIN_TIME_GET_DAYS" xml:space="preserve">
    <value>Hole Tage [{0}].</value>
  </data>
  <data name="LOG_REMAIN_TIME_GET_HOURS" xml:space="preserve">
    <value>Hole Stunden [{0}].</value>
  </data>
  <data name="LOG_REMAIN_TIME_GET_MILLISECONDS" xml:space="preserve">
    <value>Hole Millisekunden [{0}].</value>
  </data>
  <data name="LOG_REMAIN_TIME_GET_MINUTES" xml:space="preserve">
    <value>Hole Minuten [{0}].</value>
  </data>
  <data name="LOG_REMAIN_TIME_GET_SECONDS" xml:space="preserve">
    <value>Hole Sekunden [{0}].</value>
  </data>
  <data name="LOG_REMAIN_TIME_INITIALIZE" xml:space="preserve">
    <value>Initialisiere neues RemainTime Objekt mit Zeitspanne: [{0}].</value>
  </data>
  <data name="LOG_REMAIN_TIME_TO_STRING" xml:space="preserve">
    <value>Verbleibende Zeit: [ID: {0} - {1}T : {2}S : {3}m : {4}s]</value>
  </data>
  <data name="LOG_RESET_VALUES" xml:space="preserve">
    <value>Werte zurückgesetzt.</value>
  </data>
  <data name="LOG_TIME_RESET_VALUES" xml:space="preserve">
    <value>Werte zurückgesetzt [Startzeit: {0}, Endzeit: {1}, Verbleibend: {2}, Typ: {3}, Parameter: {4}, Zeitstring: {5}].</value>
  </data>
  <data name="LOG_TIME_SET_TIME" xml:space="preserve">
    <value>Setze Zeit.</value>
  </data>
  <data name="LOG_TIME_SET_TIME_PARAM_DATETIME" xml:space="preserve">
    <value>Setze Zeit mit Parameter [{0}].</value>
  </data>
  <data name="LOG_TIME_VALIDATION_BEGIN_VALIDATION" xml:space="preserve">
    <value>Validiere Zeit [{0}].</value>
  </data>
  <data name="LOG_TIME_VALIDATION_EMPTY_STRING" xml:space="preserve">
    <value>Zeit [{0}] ist leer.</value>
  </data>
  <data name="LOG_TIME_VALIDATION_GOT_VALUES_OF_TYPE_DATE" xml:space="preserve">
    <value>Folgende Werte vom Zeitstring erhalten: [{0}, {1}, {2}].</value>
  </data>
  <data name="LOG_TIME_VALIDATION_GOT_VALUES_OF_TYPE_TIME" xml:space="preserve">
    <value>Folgende Werte vom Zeitstring erhalten:  [{0}, {1}].</value>
  </data>
  <data name="LOG_TIME_VALIDATION_HAS_SEPARATORS" xml:space="preserve">
    <value>Zeit [{0}] hat Separatoren.</value>
  </data>
  <data name="LOG_TIME_VALIDATION_HAS_SEPARATOR_AT_INDEX" xml:space="preserve">
    <value>Zeit [{0}] hat Separator an Position [{1}].</value>
  </data>
  <data name="LOG_TIME_VALIDATION_INVALID_CHARS" xml:space="preserve">
    <value>Zeit [{0}] enthält ungültige Zeichen.</value>
  </data>
  <data name="LOG_TIME_VALIDATION_INVALID_DATE_FORMAT" xml:space="preserve">
    <value>Fehler beim Parsen des Zeitstrings [{0}], Zeittyp [{1}], Fehler:\n[{2}].</value>
  </data>
  <data name="LOG_TIME_VALIDATION_INVALID_LENGTH" xml:space="preserve">
    <value>Zeit [{0}] hat ungültige Länge [{1}]</value>
  </data>
  <data name="LOG_TIME_VALIDATION_INVALID_TIME_FORMAT" xml:space="preserve">
    <value>Fehler beim Parsen des Zeitstrings [{0}], Fehler:\n[{2}].</value>
  </data>
  <data name="LOG_TIME_VALIDATION_INVALID_TYPE_OF_TIME" xml:space="preserve">
    <value>Zeit hat ungültigen Typ: [{0}].</value>
  </data>
  <data name="LOG_TIME_VALIDATION_IS_NOT_VALID" xml:space="preserve">
    <value>Zeit [{0}] ist ungültig, Fehler war: [{1}].</value>
  </data>
  <data name="LOG_TIME_VALIDATION_IS_VALID" xml:space="preserve">
    <value>Zeit [{0}] ist gültig.</value>
  </data>
  <data name="LOG_TIME_VALIDATION_NO_SEPARATORS" xml:space="preserve">
    <value>Zeit [{0}] hat keine Separatoren.</value>
  </data>
  <data name="LOG_TIME_VALIDATION_NO_SEPARATORS_NEEDED" xml:space="preserve">
    <value>Zeit [{0}] benötigt keine Separatoren.</value>
  </data>
  <data name="LOG_TIME_VALIDATION_NO_SEPARATOR_AT_INDEX" xml:space="preserve">
    <value>Zeit [{0}] hat keine Separatoren an Position [{1}].</value>
  </data>
  <data name="LOG_TIME_VALIDATION_SET_IF_IN_FUTURE" xml:space="preserve">
    <value>Zeit: [{0}].</value>
  </data>
  <data name="LOG_TIME_VALIDATION_SET_TYPE_OF_TIME" xml:space="preserve">
    <value>Setze Zeittyp für Zeit [{0}]</value>
  </data>
  <data name="LOG_TIME_VALIDATION_STRING_IS_TYPE_OF" xml:space="preserve">
    <value>Zeitstring ist vom Typ: [{0}]</value>
  </data>
  <data name="LOG_TIME_VALIDATION_TIME_IN_PAST" xml:space="preserve">
    <value>Zeit liegt in der Vergangenheit.</value>
  </data>
  <data name="LOG_TIME_VALIDATION_VALID_CHARS" xml:space="preserve">
    <value>Zeit [{0}] enthält gültige Zeichen.</value>
  </data>
  <data name="LOG_TIME_VALIDATION_VALID_LENGTH" xml:space="preserve">
    <value>Zeit [{0}] hat gültige Länge [{1}].</value>
  </data>
  <data name="LOG_TIME_VALIDATION_WRONG_PLACED_SEPARATOR" xml:space="preserve">
    <value>Zeit [{0}] hat falsch platzierte Separatoren.</value>
  </data>
  <data name="LOG_TIME_VALIDATION_WRONG_PLACED_SEPARATOR_AT_INDEX" xml:space="preserve">
    <value>Zeit [{0}] hat falsch platzierte Separatoren an Position [{1}].</value>
  </data>
  <data name="SCHEDULER_ON_TICK" xml:space="preserve">
    <value>Verbleibende Zeit: [{0}].</value>
  </data>
  <data name="TIME_TO_STRING" xml:space="preserve">
    <value>Startzeit: {0}, Endzeit: {1}, Verbleibend: {2}</value>
  </data>
  <data name="TIME_VALIDATION_EMPTY_STRING" xml:space="preserve">
    <value>Der Zeitstring darf nicht leer sein.</value>
  </data>
  <data name="TIME_VALIDATION_ERROR_HAS_NO_SEPARATORS" xml:space="preserve">
    <value>Zeit benötigt Separatoren ('.' oder ':').</value>
  </data>
  <data name="TIME_VALIDATION_ERROR_INVALID_CHARS" xml:space="preserve">
    <value>Zeit enthält ungültige Zeichen.</value>
  </data>
  <data name="TIME_VALIDATION_ERROR_INVALID_LENGTH" xml:space="preserve">
    <value>Zeit hat eine ungültige Länge.</value>
  </data>
  <data name="TIME_VALIDATION_ERROR_INVALID_TIME_FORMAT" xml:space="preserve">
    <value>Das Zeitformat ist ungültig.</value>
  </data>
  <data name="TIME_VALIDATION_ERROR_INVALID_TYPE_OF_TIME" xml:space="preserve">
    <value>Der Zeittyp {0} ist ungültig.</value>
  </data>
  <data name="TIME_VALIDATION_ERROR_NO_SEPARATOR_AT_INDEX" xml:space="preserve">
    <value>Die Zeit hat keine Separatoren an Position {0}.</value>
  </data>
  <data name="TIME_VALIDATION_ERROR_TIMESPAN_HAS_WRONG_PLACED_SEPARATOR_AT_INDEX" xml:space="preserve">
    <value>Der Zeitstring ist eine Zeitspanne und hat falsch platzierte Separatoren.</value>
  </data>
  <data name="TIME_VALIDATION_ERROR_TIME_IN_PAST" xml:space="preserve">
    <value>Die Zeit liegt in der Vergangenheit.</value>
  </data>
  <data name="TIME_VALIDATION_ERROR_TIME_NOT_VALID" xml:space="preserve">
    <value>Die eingegebene Zeit ist ungültig.</value>
  </data>
  <data name="TIME_VALIDATION_ERROR_WRONG_PLACED_SEPARATOR_AT_INDEX" xml:space="preserve">
    <value>Die Zeit hat falsch platzierte Separatoren an Position [{0}].</value>
  </data>
</root>